{
	"project": {
		"name": "ROKIT_Locator_1.6_API_v0.2.1",
		"description": "",
		"details": {
			"variable": [],
			"servers": [
				{
					"server_id": "default",
					"name": "默认服务"
				}
			],
			"markList": [
				{
					"key": "developing",
					"name": "开发中",
					"color": "#3A86FF",
					"is_default": true
				},
				{
					"key": "complated",
					"name": "已完成",
					"color": "#2BA58F",
					"is_default": true
				},
				{
					"key": "modifying",
					"name": "需修改",
					"color": "#EC4646",
					"is_default": true
				},
				{
					"key": "29ebce38-a9a8-4169-a0b1-29fc53ac6e36",
					"name": "blocked",
					"color": "#f47373",
					"is_default": false
				}
			],
			"script": {
				"pre_script": "",
				"test": ""
			},
			"request": {
				"query": [],
				"header": [],
				"body": [
					{
						"description": "",
						"field_type": "String",
						"is_checked": 1,
						"key": "id",
						"value": "",
						"not_null": 1,
						"type": "Text"
					},
					{
						"description": "",
						"field_type": "String",
						"is_checked": 1,
						"key": "jsonrpc",
						"value": "2.0",
						"not_null": 1,
						"type": "Text"
					},
					{
						"description": "",
						"field_type": "String",
						"is_checked": 1,
						"key": "method",
						"value": "",
						"not_null": 1,
						"type": "Text"
					},
					{
						"description": "",
						"field_type": "String",
						"is_checked": 1,
						"key": "params",
						"value": "",
						"not_null": 1,
						"type": "Text"
					}
				]
			},
			"mock_rules": []
		}
	},
	"apis": [
		{
			"target_type": "folder",
			"name": "8 Rexroth ROKIT Locator Client – RPC Methods",
			"mark": "developing",
			"sort": 1,
			"tags": [],
			"created_uuid": "",
			"request": {
				"description": ""
			},
			"children": [
				{
					"target_type": "folder",
					"name": "ClientRecording",
					"mark": "developing",
					"sort": 1,
					"tags": [],
					"created_uuid": "",
					"request": {
						"description": ""
					},
					"children": [
						{
							"target_type": "api",
							"name": "clientRecordingRename",
							"mark": "developing",
							"sort": 1,
							"tags": [],
							"created_uuid": "",
							"method": "POST",
							"mock": "{}",
							"mock_url": "",
							"request": {
								"url": "",
								"description": "",
								"event": {
									"pre_script": "",
									"test": ""
								},
								"pre_tasks": [],
								"post_tasks": [],
								"body": {
									"mode": "json",
									"parameter": [],
									"raw": "{\"0\":\"s\",\"1\":\"e\",\"2\":\"s\",\"3\":\"s\",\"4\":\"i\",\"5\":\"o\",\"6\":\"n\",\"7\":\"L\",\"8\":\"o\",\"9\":\"g\",\"10\":\"i\",\"11\":\"n\",\"query\":{\"timeout\":{\"valid\":true,\"time\":1663372036854775800,\"resolution\":1},\"userName\":\"admin\",\"password\":\"bbZGs3wFsB35\"}}",
									"raw_para": [],
									"raw_schema": {
										"type": "object",
										"properties": {
											"id": {
												"type": "integer"
											},
											"jsonrpc": {
												"type": "string",
												"mock": {
													"mock": "2.0"
												}
											},
											"method": {
												"type": "string",
												"mock": {
													"mock": "clientRecordingRename"
												}
											},
											"params": {
												"type": "object",
												"properties": {
													"query": {
														"type": "object",
														"properties": {
															"sessionId": {
																"type": "string",
																"mock": {
																	"mock": "{{sessionId}}"
																}
															},
															"currentRecordingName": {
																"ref": "cd1feef2-6671-4e67-baa4-183b8aa413c3"
															},
															"desiredRecordingName": {
																"ref": "cd1feef2-6671-4e67-baa4-183b8aa413c3"
															}
														},
														"APIPOST_ORDERS": [
															"sessionId",
															"currentRecordingName",
															"desiredRecordingName"
														],
														"required": [
															"sessionId",
															"currentRecordingName",
															"desiredRecordingName"
														]
													}
												},
												"APIPOST_ORDERS": [
													"query"
												],
												"required": [
													"query"
												]
											}
										},
										"APIPOST_ORDERS": [
											"id",
											"jsonrpc",
											"method",
											"params"
										],
										"required": [
											"id",
											"jsonrpc",
											"method",
											"params"
										]
									}
								},
								"header": {
									"parameter": [
										{
											"is_checked": "1",
											"type": "Text",
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"not_null": "-1",
											"description": "",
											"field_type": "Text"
										}
									]
								}
							},
							"response": {
								"success": {
									"raw": "{\n    \"id\": 326,\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"response\": {\n            \"responseCode\": 0\n        }\n    }\n}",
									"parameter": [],
									"expect": {
										"name": "OK",
										"isDefault": 1,
										"code": 200,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object",
											"properties": {
												"id": {
													"type": "integer"
												},
												"jsonrpc": {
													"type": "string"
												},
												"result": {
													"type": "object",
													"properties": {
														"response": {
															"type": "object",
															"properties": {
																"responseCode": {
																	"type": "integer"
																},
																"aboutString": {
																	"type": "string"
																}
															},
															"required": [
																"responseCode"
															],
															"APIPOST_ORDERS": [
																"responseCode",
																"aboutString"
															]
														}
													},
													"required": [
														"response"
													],
													"APIPOST_ORDERS": [
														"response"
													]
												}
											},
											"required": [
												"id",
												"jsonrpc",
												"result"
											],
											"APIPOST_ORDERS": [
												"id",
												"jsonrpc",
												"result"
											]
										}
									}
								},
								"error": {
									"raw": "",
									"parameter": [],
									"expect": {
										"name": "失败",
										"isDefault": -1,
										"code": 404,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object"
										}
									}
								}
							},
							"children": []
						},
						{
							"target_type": "api",
							"name": "clientRecordingSetCurrentPose",
							"mark": "developing",
							"sort": 1,
							"tags": [],
							"created_uuid": "",
							"method": "POST",
							"mock": "{}",
							"mock_url": "",
							"request": {
								"url": "",
								"description": "",
								"event": {
									"pre_script": "",
									"test": ""
								},
								"pre_tasks": [],
								"post_tasks": [],
								"body": {
									"mode": "json",
									"parameter": [],
									"raw": "{\"0\":\"s\",\"1\":\"e\",\"2\":\"s\",\"3\":\"s\",\"4\":\"i\",\"5\":\"o\",\"6\":\"n\",\"7\":\"L\",\"8\":\"o\",\"9\":\"g\",\"10\":\"i\",\"11\":\"n\",\"query\":{\"timeout\":{\"valid\":true,\"time\":1663372036854775800,\"resolution\":1},\"userName\":\"admin\",\"password\":\"bbZGs3wFsB35\"}}",
									"raw_para": [],
									"raw_schema": {
										"type": "object",
										"properties": {
											"id": {
												"type": "integer"
											},
											"jsonrpc": {
												"type": "string",
												"mock": {
													"mock": "2.0"
												}
											},
											"method": {
												"type": "string",
												"mock": {
													"mock": "clientRecordingSetCurrentPose"
												}
											},
											"params": {
												"type": "object",
												"properties": {
													"query": {
														"type": "object",
														"properties": {
															"sessionId": {
																"type": "string",
																"mock": {
																	"mock": "{{sessionId}}"
																}
															},
															"pose": {
																"ref": "471faa0e-569d-4aae-829c-389b3abf3366"
															}
														},
														"APIPOST_ORDERS": [
															"sessionId",
															"pose"
														],
														"required": [
															"sessionId",
															"pose"
														]
													}
												},
												"APIPOST_ORDERS": [
													"query"
												],
												"required": [
													"query"
												]
											}
										},
										"APIPOST_ORDERS": [
											"id",
											"jsonrpc",
											"method",
											"params"
										],
										"required": [
											"id",
											"jsonrpc",
											"method",
											"params"
										]
									}
								},
								"header": {
									"parameter": [
										{
											"is_checked": "1",
											"type": "Text",
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"not_null": "-1",
											"description": "",
											"field_type": "Text"
										}
									]
								}
							},
							"response": {
								"success": {
									"raw": "{\n    \"id\": 326,\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"response\": {\n            \"responseCode\": 0\n        }\n    }\n}",
									"parameter": [],
									"expect": {
										"name": "OK",
										"isDefault": 1,
										"code": 200,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object",
											"properties": {
												"id": {
													"type": "integer"
												},
												"jsonrpc": {
													"type": "string"
												},
												"result": {
													"type": "object",
													"properties": {
														"response": {
															"type": "object",
															"properties": {
																"responseCode": {
																	"type": "integer"
																},
																"aboutString": {
																	"type": "string"
																}
															},
															"required": [
																"responseCode"
															],
															"APIPOST_ORDERS": [
																"responseCode",
																"aboutString"
															]
														}
													},
													"required": [
														"response"
													],
													"APIPOST_ORDERS": [
														"response"
													]
												}
											},
											"required": [
												"id",
												"jsonrpc",
												"result"
											],
											"APIPOST_ORDERS": [
												"id",
												"jsonrpc",
												"result"
											]
										}
									}
								},
								"error": {
									"raw": "",
									"parameter": [],
									"expect": {
										"name": "失败",
										"isDefault": -1,
										"code": 404,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object"
										}
									}
								}
							},
							"children": []
						},
						{
							"target_type": "api",
							"name": "clientRecordingList",
							"mark": "developing",
							"sort": 1,
							"tags": [],
							"created_uuid": "",
							"method": "POST",
							"mock": "{}",
							"mock_url": "",
							"request": {
								"url": "",
								"description": "",
								"event": {
									"pre_script": "",
									"test": ""
								},
								"pre_tasks": [],
								"post_tasks": [],
								"body": {
									"mode": "json",
									"parameter": [],
									"raw": "{\"0\":\"s\",\"1\":\"e\",\"2\":\"s\",\"3\":\"s\",\"4\":\"i\",\"5\":\"o\",\"6\":\"n\",\"7\":\"L\",\"8\":\"o\",\"9\":\"g\",\"10\":\"i\",\"11\":\"n\",\"query\":{\"timeout\":{\"valid\":true,\"time\":1663372036854775800,\"resolution\":1},\"userName\":\"admin\",\"password\":\"bbZGs3wFsB35\"}}",
									"raw_para": [],
									"raw_schema": {
										"type": "object",
										"properties": {
											"id": {
												"type": "integer"
											},
											"jsonrpc": {
												"type": "string",
												"mock": {
													"mock": "2.0"
												}
											},
											"method": {
												"type": "string",
												"mock": {
													"mock": "clientRecordingList"
												}
											},
											"params": {
												"type": "object",
												"properties": {
													"query": {
														"type": "object",
														"properties": {
															"sessionId": {
																"type": "string",
																"mock": {
																	"mock": "{{sessionId}}"
																}
															}
														},
														"APIPOST_ORDERS": [
															"sessionId"
														],
														"required": [
															"sessionId"
														]
													}
												},
												"APIPOST_ORDERS": [
													"query"
												],
												"required": [
													"query"
												]
											}
										},
										"APIPOST_ORDERS": [
											"id",
											"jsonrpc",
											"method",
											"params"
										],
										"required": [
											"id",
											"jsonrpc",
											"method",
											"params"
										]
									}
								},
								"header": {
									"parameter": [
										{
											"is_checked": "1",
											"type": "Text",
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"not_null": "-1",
											"description": "",
											"field_type": "Text"
										}
									]
								}
							},
							"response": {
								"success": {
									"raw": "{\n    \"id\": 326,\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"response\": {\n            \"responseCode\": 0\n        }\n    }\n}",
									"parameter": [],
									"expect": {
										"name": "OK",
										"isDefault": 1,
										"code": 200,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object",
											"properties": {
												"id": {
													"type": "integer"
												},
												"jsonrpc": {
													"type": "string"
												},
												"result": {
													"type": "object",
													"properties": {
														"response": {
															"type": "object",
															"properties": {
																"responseCode": {
																	"type": "integer"
																},
																"aboutString": {
																	"type": "string"
																}
															},
															"required": [
																"responseCode"
															],
															"APIPOST_ORDERS": [
																"responseCode",
																"aboutString"
															]
														}
													},
													"required": [
														"response"
													],
													"APIPOST_ORDERS": [
														"response"
													]
												}
											},
											"required": [
												"id",
												"jsonrpc",
												"result"
											],
											"APIPOST_ORDERS": [
												"id",
												"jsonrpc",
												"result"
											]
										}
									}
								},
								"error": {
									"raw": "",
									"parameter": [],
									"expect": {
										"name": "失败",
										"isDefault": -1,
										"code": 404,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object"
										}
									}
								}
							},
							"children": []
						},
						{
							"target_type": "api",
							"name": "clientRecordingDelete",
							"mark": "developing",
							"sort": 1,
							"tags": [],
							"created_uuid": "",
							"method": "POST",
							"mock": "{}",
							"mock_url": "",
							"request": {
								"url": "",
								"description": "",
								"event": {
									"pre_script": "",
									"test": ""
								},
								"pre_tasks": [],
								"post_tasks": [],
								"body": {
									"mode": "json",
									"parameter": [],
									"raw": "{\"0\":\"s\",\"1\":\"e\",\"2\":\"s\",\"3\":\"s\",\"4\":\"i\",\"5\":\"o\",\"6\":\"n\",\"7\":\"L\",\"8\":\"o\",\"9\":\"g\",\"10\":\"i\",\"11\":\"n\",\"query\":{\"timeout\":{\"valid\":true,\"time\":1663372036854775800,\"resolution\":1},\"userName\":\"admin\",\"password\":\"bbZGs3wFsB35\"}}",
									"raw_para": [],
									"raw_schema": {
										"type": "object",
										"properties": {
											"id": {
												"type": "integer"
											},
											"jsonrpc": {
												"type": "string",
												"mock": {
													"mock": "2.0"
												}
											},
											"method": {
												"type": "string",
												"mock": {
													"mock": "clientRecordingDelete"
												}
											},
											"params": {
												"type": "object",
												"properties": {
													"query": {
														"type": "object",
														"properties": {
															"sessionId": {
																"type": "string",
																"mock": {
																	"mock": "{{sessionId}}"
																}
															},
															"recordingName": {
																"ref": "cd1feef2-6671-4e67-baa4-183b8aa413c3"
															}
														},
														"APIPOST_ORDERS": [
															"sessionId",
															"recordingName"
														],
														"required": [
															"sessionId",
															"recordingName"
														]
													}
												},
												"APIPOST_ORDERS": [
													"query"
												],
												"required": [
													"query"
												]
											}
										},
										"APIPOST_ORDERS": [
											"id",
											"jsonrpc",
											"method",
											"params"
										],
										"required": [
											"id",
											"jsonrpc",
											"method",
											"params"
										]
									}
								},
								"header": {
									"parameter": [
										{
											"is_checked": "1",
											"type": "Text",
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"not_null": "-1",
											"description": "",
											"field_type": "Text"
										}
									]
								}
							},
							"response": {
								"success": {
									"raw": "{\n    \"id\": 326,\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"response\": {\n            \"responseCode\": 0\n        }\n    }\n}",
									"parameter": [],
									"expect": {
										"name": "OK",
										"isDefault": 1,
										"code": 200,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object",
											"properties": {
												"id": {
													"type": "integer"
												},
												"jsonrpc": {
													"type": "string"
												},
												"result": {
													"type": "object",
													"properties": {
														"response": {
															"type": "object",
															"properties": {
																"responseCode": {
																	"type": "integer"
																},
																"aboutString": {
																	"type": "string"
																}
															},
															"required": [
																"responseCode"
															],
															"APIPOST_ORDERS": [
																"responseCode",
																"aboutString"
															]
														}
													},
													"required": [
														"response"
													],
													"APIPOST_ORDERS": [
														"response"
													]
												}
											},
											"required": [
												"id",
												"jsonrpc",
												"result"
											],
											"APIPOST_ORDERS": [
												"id",
												"jsonrpc",
												"result"
											]
										}
									}
								},
								"error": {
									"raw": "",
									"parameter": [],
									"expect": {
										"name": "失败",
										"isDefault": -1,
										"code": 404,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object"
										}
									}
								}
							},
							"children": []
						},
						{
							"target_type": "api",
							"name": "clientRecordingStopVisualRecording",
							"mark": "developing",
							"sort": 1,
							"tags": [],
							"created_uuid": "",
							"method": "POST",
							"mock": "{}",
							"mock_url": "",
							"request": {
								"url": "",
								"description": "",
								"event": {
									"pre_script": "",
									"test": ""
								},
								"pre_tasks": [],
								"post_tasks": [],
								"body": {
									"mode": "json",
									"parameter": [],
									"raw": "{\"0\":\"s\",\"1\":\"e\",\"2\":\"s\",\"3\":\"s\",\"4\":\"i\",\"5\":\"o\",\"6\":\"n\",\"7\":\"L\",\"8\":\"o\",\"9\":\"g\",\"10\":\"i\",\"11\":\"n\",\"query\":{\"timeout\":{\"valid\":true,\"time\":1663372036854775800,\"resolution\":1},\"userName\":\"admin\",\"password\":\"bbZGs3wFsB35\"}}",
									"raw_para": [],
									"raw_schema": {
										"type": "object",
										"properties": {
											"id": {
												"type": "integer"
											},
											"jsonrpc": {
												"type": "string",
												"mock": {
													"mock": "2.0"
												}
											},
											"method": {
												"type": "string",
												"mock": {
													"mock": "clientRecordingStopVisualRecording"
												}
											},
											"params": {
												"type": "object",
												"properties": {
													"query": {
														"type": "object",
														"properties": {
															"sessionId": {
																"type": "string",
																"mock": {
																	"mock": "{{sessionId}}"
																}
															}
														},
														"APIPOST_ORDERS": [
															"sessionId"
														],
														"required": [
															"sessionId"
														]
													}
												},
												"APIPOST_ORDERS": [
													"query"
												],
												"required": [
													"query"
												]
											}
										},
										"APIPOST_ORDERS": [
											"id",
											"jsonrpc",
											"method",
											"params"
										],
										"required": [
											"id",
											"jsonrpc",
											"method",
											"params"
										]
									}
								},
								"header": {
									"parameter": [
										{
											"is_checked": "1",
											"type": "Text",
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"not_null": "-1",
											"description": "",
											"field_type": "Text"
										}
									]
								}
							},
							"response": {
								"success": {
									"raw": "{\n    \"id\": 326,\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"response\": {\n            \"responseCode\": 0\n        }\n    }\n}",
									"parameter": [],
									"expect": {
										"name": "OK",
										"isDefault": 1,
										"code": 200,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object",
											"properties": {
												"id": {
													"type": "integer"
												},
												"jsonrpc": {
													"type": "string"
												},
												"result": {
													"type": "object",
													"properties": {
														"response": {
															"type": "object",
															"properties": {
																"responseCode": {
																	"type": "integer"
																},
																"aboutString": {
																	"type": "string"
																}
															},
															"required": [
																"responseCode"
															],
															"APIPOST_ORDERS": [
																"responseCode",
																"aboutString"
															]
														}
													},
													"required": [
														"response"
													],
													"APIPOST_ORDERS": [
														"response"
													]
												}
											},
											"required": [
												"id",
												"jsonrpc",
												"result"
											],
											"APIPOST_ORDERS": [
												"id",
												"jsonrpc",
												"result"
											]
										}
									}
								},
								"error": {
									"raw": "",
									"parameter": [],
									"expect": {
										"name": "失败",
										"isDefault": -1,
										"code": 404,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object"
										}
									}
								}
							},
							"children": []
						},
						{
							"target_type": "api",
							"name": "clientRecordingStart",
							"mark": "developing",
							"sort": 1,
							"tags": [],
							"created_uuid": "",
							"method": "POST",
							"mock": "{}",
							"mock_url": "",
							"request": {
								"url": "",
								"description": "",
								"event": {
									"pre_script": "",
									"test": ""
								},
								"pre_tasks": [],
								"post_tasks": [],
								"body": {
									"mode": "json",
									"parameter": [],
									"raw": "{\"0\":\"s\",\"1\":\"e\",\"2\":\"s\",\"3\":\"s\",\"4\":\"i\",\"5\":\"o\",\"6\":\"n\",\"7\":\"L\",\"8\":\"o\",\"9\":\"g\",\"10\":\"i\",\"11\":\"n\",\"query\":{\"timeout\":{\"valid\":true,\"time\":1663372036854775800,\"resolution\":1},\"userName\":\"admin\",\"password\":\"bbZGs3wFsB35\"}}",
									"raw_para": [],
									"raw_schema": {
										"type": "object",
										"properties": {
											"id": {
												"type": "integer"
											},
											"jsonrpc": {
												"type": "string",
												"mock": {
													"mock": "2.0"
												}
											},
											"method": {
												"type": "string",
												"mock": {
													"mock": "clientRecordingStart"
												}
											},
											"params": {
												"type": "object",
												"properties": {
													"query": {
														"type": "object",
														"properties": {
															"sessionId": {
																"type": "string",
																"mock": {
																	"mock": "{{sessionId}}"
																}
															},
															"recordingName": {
																"ref": "cd1feef2-6671-4e67-baa4-183b8aa413c3"
															}
														},
														"APIPOST_ORDERS": [
															"sessionId",
															"recordingName"
														],
														"required": [
															"sessionId",
															"recordingName"
														]
													}
												},
												"APIPOST_ORDERS": [
													"query"
												],
												"required": [
													"query"
												]
											}
										},
										"APIPOST_ORDERS": [
											"id",
											"jsonrpc",
											"method",
											"params"
										],
										"required": [
											"id",
											"jsonrpc",
											"method",
											"params"
										]
									}
								},
								"header": {
									"parameter": [
										{
											"is_checked": "1",
											"type": "Text",
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"not_null": "-1",
											"description": "",
											"field_type": "Text"
										}
									]
								}
							},
							"response": {
								"success": {
									"raw": "{\n    \"id\": 326,\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"response\": {\n            \"responseCode\": 0\n        }\n    }\n}",
									"parameter": [],
									"expect": {
										"name": "OK",
										"isDefault": 1,
										"code": 200,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object",
											"properties": {
												"id": {
													"type": "integer"
												},
												"jsonrpc": {
													"type": "string"
												},
												"result": {
													"type": "object",
													"properties": {
														"response": {
															"type": "object",
															"properties": {
																"responseCode": {
																	"type": "integer"
																},
																"aboutString": {
																	"type": "string"
																}
															},
															"required": [
																"responseCode"
															],
															"APIPOST_ORDERS": [
																"responseCode",
																"aboutString"
															]
														}
													},
													"required": [
														"response"
													],
													"APIPOST_ORDERS": [
														"response"
													]
												}
											},
											"required": [
												"id",
												"jsonrpc",
												"result"
											],
											"APIPOST_ORDERS": [
												"id",
												"jsonrpc",
												"result"
											]
										}
									}
								},
								"error": {
									"raw": "",
									"parameter": [],
									"expect": {
										"name": "失败",
										"isDefault": -1,
										"code": 404,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object"
										}
									}
								}
							},
							"children": []
						},
						{
							"target_type": "api",
							"name": "clientRecordingStartVisualRecording",
							"mark": "developing",
							"sort": 1,
							"tags": [],
							"created_uuid": "",
							"method": "POST",
							"mock": "{}",
							"mock_url": "",
							"request": {
								"url": "",
								"description": "",
								"event": {
									"pre_script": "",
									"test": ""
								},
								"pre_tasks": [],
								"post_tasks": [],
								"body": {
									"mode": "json",
									"parameter": [],
									"raw": "{\"0\":\"s\",\"1\":\"e\",\"2\":\"s\",\"3\":\"s\",\"4\":\"i\",\"5\":\"o\",\"6\":\"n\",\"7\":\"L\",\"8\":\"o\",\"9\":\"g\",\"10\":\"i\",\"11\":\"n\",\"query\":{\"timeout\":{\"valid\":true,\"time\":1663372036854775800,\"resolution\":1},\"userName\":\"admin\",\"password\":\"bbZGs3wFsB35\"}}",
									"raw_para": [],
									"raw_schema": {
										"type": "object",
										"properties": {
											"id": {
												"type": "integer"
											},
											"jsonrpc": {
												"type": "string",
												"mock": {
													"mock": "2.0"
												}
											},
											"method": {
												"type": "string",
												"mock": {
													"mock": "clientRecordingStartVisualRecording"
												}
											},
											"params": {
												"type": "object",
												"properties": {
													"query": {
														"type": "object",
														"properties": {
															"sessionId": {
																"type": "string",
																"mock": {
																	"mock": "{{sessionId}}"
																}
															},
															"recordingName": {
																"ref": "cd1feef2-6671-4e67-baa4-183b8aa413c3"
															}
														},
														"APIPOST_ORDERS": [
															"sessionId",
															"recordingName"
														],
														"required": [
															"sessionId",
															"recordingName"
														]
													}
												},
												"APIPOST_ORDERS": [
													"query"
												],
												"required": [
													"query"
												]
											}
										},
										"APIPOST_ORDERS": [
											"id",
											"jsonrpc",
											"method",
											"params"
										],
										"required": [
											"id",
											"jsonrpc",
											"method",
											"params"
										]
									}
								},
								"header": {
									"parameter": [
										{
											"is_checked": "1",
											"type": "Text",
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"not_null": "-1",
											"description": "",
											"field_type": "Text"
										}
									]
								}
							},
							"response": {
								"success": {
									"raw": "{\n    \"id\": 326,\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"response\": {\n            \"responseCode\": 0\n        }\n    }\n}",
									"parameter": [],
									"expect": {
										"name": "OK",
										"isDefault": 1,
										"code": 200,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object",
											"properties": {
												"id": {
													"type": "integer"
												},
												"jsonrpc": {
													"type": "string"
												},
												"result": {
													"type": "object",
													"properties": {
														"response": {
															"type": "object",
															"properties": {
																"responseCode": {
																	"type": "integer"
																},
																"aboutString": {
																	"type": "string"
																}
															},
															"required": [
																"responseCode"
															],
															"APIPOST_ORDERS": [
																"responseCode",
																"aboutString"
															]
														}
													},
													"required": [
														"response"
													],
													"APIPOST_ORDERS": [
														"response"
													]
												}
											},
											"required": [
												"id",
												"jsonrpc",
												"result"
											],
											"APIPOST_ORDERS": [
												"id",
												"jsonrpc",
												"result"
											]
										}
									}
								},
								"error": {
									"raw": "",
									"parameter": [],
									"expect": {
										"name": "失败",
										"isDefault": -1,
										"code": 404,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object"
										}
									}
								}
							},
							"children": []
						},
						{
							"target_type": "api",
							"name": "clientRecordingStop",
							"mark": "developing",
							"sort": 1,
							"tags": [],
							"created_uuid": "",
							"method": "POST",
							"mock": "{}",
							"mock_url": "",
							"request": {
								"url": "",
								"description": "",
								"event": {
									"pre_script": "",
									"test": ""
								},
								"pre_tasks": [],
								"post_tasks": [],
								"body": {
									"mode": "json",
									"parameter": [],
									"raw": "{\"0\":\"s\",\"1\":\"e\",\"2\":\"s\",\"3\":\"s\",\"4\":\"i\",\"5\":\"o\",\"6\":\"n\",\"7\":\"L\",\"8\":\"o\",\"9\":\"g\",\"10\":\"i\",\"11\":\"n\",\"query\":{\"timeout\":{\"valid\":true,\"time\":1663372036854775800,\"resolution\":1},\"userName\":\"admin\",\"password\":\"bbZGs3wFsB35\"}}",
									"raw_para": [],
									"raw_schema": {
										"type": "object",
										"properties": {
											"id": {
												"type": "integer"
											},
											"jsonrpc": {
												"type": "string",
												"mock": {
													"mock": "2.0"
												}
											},
											"method": {
												"type": "string",
												"mock": {
													"mock": "clientRecordingStop"
												}
											},
											"params": {
												"type": "object",
												"properties": {
													"query": {
														"type": "object",
														"properties": {
															"sessionId": {
																"type": "string",
																"mock": {
																	"mock": "{{sessionId}}"
																}
															}
														},
														"APIPOST_ORDERS": [
															"sessionId"
														],
														"required": [
															"sessionId"
														]
													}
												},
												"APIPOST_ORDERS": [
													"query"
												],
												"required": [
													"query"
												]
											}
										},
										"APIPOST_ORDERS": [
											"id",
											"jsonrpc",
											"method",
											"params"
										],
										"required": [
											"id",
											"jsonrpc",
											"method",
											"params"
										]
									}
								},
								"header": {
									"parameter": [
										{
											"is_checked": "1",
											"type": "Text",
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"not_null": "-1",
											"description": "",
											"field_type": "Text"
										}
									]
								}
							},
							"response": {
								"success": {
									"raw": "{\n    \"id\": 326,\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"response\": {\n            \"responseCode\": 0\n        }\n    }\n}",
									"parameter": [],
									"expect": {
										"name": "OK",
										"isDefault": 1,
										"code": 200,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object",
											"properties": {
												"id": {
													"type": "integer"
												},
												"jsonrpc": {
													"type": "string"
												},
												"result": {
													"type": "object",
													"properties": {
														"response": {
															"type": "object",
															"properties": {
																"responseCode": {
																	"type": "integer"
																},
																"aboutString": {
																	"type": "string"
																}
															},
															"required": [
																"responseCode"
															],
															"APIPOST_ORDERS": [
																"responseCode",
																"aboutString"
															]
														}
													},
													"required": [
														"response"
													],
													"APIPOST_ORDERS": [
														"response"
													]
												}
											},
											"required": [
												"id",
												"jsonrpc",
												"result"
											],
											"APIPOST_ORDERS": [
												"id",
												"jsonrpc",
												"result"
											]
										}
									}
								},
								"error": {
									"raw": "",
									"parameter": [],
									"expect": {
										"name": "失败",
										"isDefault": -1,
										"code": 404,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object"
										}
									}
								}
							},
							"children": []
						}
					]
				},
				{
					"target_type": "folder",
					"name": "ClientMap",
					"mark": "developing",
					"sort": 1,
					"tags": [],
					"created_uuid": "",
					"request": {
						"description": ""
					},
					"children": [
						{
							"target_type": "api",
							"name": "clientMapStart",
							"mark": "developing",
							"sort": 1,
							"tags": [],
							"created_uuid": "",
							"method": "POST",
							"mock": "{}",
							"mock_url": "",
							"request": {
								"url": "",
								"description": "",
								"event": {
									"pre_script": "",
									"test": ""
								},
								"pre_tasks": [],
								"post_tasks": [],
								"body": {
									"mode": "json",
									"parameter": [],
									"raw": "{\"0\":\"s\",\"1\":\"e\",\"2\":\"s\",\"3\":\"s\",\"4\":\"i\",\"5\":\"o\",\"6\":\"n\",\"7\":\"L\",\"8\":\"o\",\"9\":\"g\",\"10\":\"i\",\"11\":\"n\",\"query\":{\"timeout\":{\"valid\":true,\"time\":1663372036854775800,\"resolution\":1},\"userName\":\"admin\",\"password\":\"bbZGs3wFsB35\"}}",
									"raw_para": [],
									"raw_schema": {
										"type": "object",
										"properties": {
											"id": {
												"type": "integer"
											},
											"jsonrpc": {
												"type": "string",
												"mock": {
													"mock": "2.0"
												}
											},
											"method": {
												"type": "string",
												"mock": {
													"mock": "clientMapStart"
												}
											},
											"params": {
												"type": "object",
												"properties": {
													"query": {
														"type": "object",
														"properties": {
															"sessionId": {
																"type": "string",
																"mock": {
																	"mock": "{{sessionId}}"
																}
															},
															"recordingName": {
																"ref": "cd1feef2-6671-4e67-baa4-183b8aa413c3"
															},
															"clientMapName": {
																"ref": "cd1feef2-6671-4e67-baa4-183b8aa413c3"
															}
														},
														"APIPOST_ORDERS": [
															"sessionId",
															"recordingName",
															"clientMapName"
														],
														"required": [
															"sessionId",
															"recordingName",
															"clientMapName"
														]
													}
												},
												"APIPOST_ORDERS": [
													"query"
												],
												"required": [
													"query"
												]
											}
										},
										"APIPOST_ORDERS": [
											"id",
											"jsonrpc",
											"method",
											"params"
										],
										"required": [
											"id",
											"jsonrpc",
											"method",
											"params"
										]
									}
								},
								"header": {
									"parameter": [
										{
											"is_checked": "1",
											"type": "Text",
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"not_null": "-1",
											"description": "",
											"field_type": "Text"
										}
									]
								}
							},
							"response": {
								"success": {
									"raw": "{\n    \"id\": 326,\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"response\": {\n            \"responseCode\": 0\n        }\n    }\n}",
									"parameter": [],
									"expect": {
										"name": "OK",
										"isDefault": 1,
										"code": 200,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object",
											"properties": {
												"id": {
													"type": "integer"
												},
												"jsonrpc": {
													"type": "string"
												},
												"result": {
													"type": "object",
													"properties": {
														"response": {
															"type": "object",
															"properties": {
																"responseCode": {
																	"type": "integer"
																},
																"aboutString": {
																	"type": "string"
																}
															},
															"required": [
																"responseCode"
															],
															"APIPOST_ORDERS": [
																"responseCode",
																"aboutString"
															]
														}
													},
													"required": [
														"response"
													],
													"APIPOST_ORDERS": [
														"response"
													]
												}
											},
											"required": [
												"id",
												"jsonrpc",
												"result"
											],
											"APIPOST_ORDERS": [
												"id",
												"jsonrpc",
												"result"
											]
										}
									}
								},
								"error": {
									"raw": "",
									"parameter": [],
									"expect": {
										"name": "失败",
										"isDefault": -1,
										"code": 404,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object"
										}
									}
								}
							},
							"children": []
						},
						{
							"target_type": "api",
							"name": "clientMapDelete",
							"mark": "complated",
							"sort": 1,
							"tags": [],
							"created_uuid": "",
							"method": "POST",
							"mock": "{}",
							"mock_url": "",
							"request": {
								"url": "",
								"description": "",
								"event": {
									"pre_script": "",
									"test": ""
								},
								"pre_tasks": [],
								"post_tasks": [],
								"body": {
									"mode": "json",
									"parameter": [],
									"raw": "{\n\t\"id\": 7204483025469443,\n\t\"jsonrpc\": \"2.0\",\n\t\"method\": \"clientMapDelete\",\n\t\"params\": {\n\t\t\"query\": {\n\t\t\t\"sessionId\": \"{{sessionId}}\",\n\t\t\t\"clientMapName\": \"bed01_aligned_20230719T084652Z\"\n\t\t}\n\t}\n}",
									"raw_para": [],
									"raw_schema": {
										"type": "object",
										"properties": {
											"id": {
												"type": "integer"
											},
											"jsonrpc": {
												"type": "string",
												"mock": {
													"mock": "2.0"
												}
											},
											"method": {
												"type": "string",
												"mock": {
													"mock": "clientMapDelete"
												}
											},
											"params": {
												"type": "object",
												"properties": {
													"query": {
														"type": "object",
														"properties": {
															"sessionId": {
																"type": "string",
																"mock": {
																	"mock": "{{sessionId}}"
																}
															},
															"clientMapName": {
																"APIPOST_ORDERS": [
																	"eadeb7622786415fb668b462de78a3b3"
																],
																"APIPOST_REFS": {
																	"eadeb7622786415fb668b462de78a3b3": {
																		"ref": "cd1feef2-6671-4e67-baa4-183b8aa413c3"
																	}
																},
																"properties": [],
																"type": "string"
															}
														},
														"APIPOST_ORDERS": [
															"sessionId",
															"clientMapName"
														],
														"required": [
															"sessionId",
															"clientMapName"
														]
													}
												},
												"APIPOST_ORDERS": [
													"query"
												],
												"required": [
													"query"
												]
											}
										},
										"APIPOST_ORDERS": [
											"id",
											"jsonrpc",
											"method",
											"params"
										],
										"required": [
											"id",
											"jsonrpc",
											"method",
											"params"
										]
									}
								},
								"header": {
									"parameter": [
										{
											"is_checked": "1",
											"type": "Text",
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"not_null": "-1",
											"description": "",
											"field_type": "Text"
										}
									]
								}
							},
							"response": {
								"success": {
									"raw": "{\n\t\"id\": 7204483025469443,\n\t\"jsonrpc\": \"2.0\",\n\t\"result\": {\n\t\t\"response\": {\n\t\t\t\"clientMapNames\": [\n\t\t\t\t\"bed0712_2023-07-12_10-01-16_built_001_aligned_001\",\n\t\t\t\t\"bed01_aligned_20230719T084316Z\",\n\t\t\t\t\"bed20230702_2023-07-02_10-34-38_built_001\",\n\t\t\t\t\"bed01\",\n\t\t\t\t\"bed_2023-07-02_10-34-38_built_001_aligned_002\",\n\t\t\t\t\"bed0712_2023-07-12_10-01-16_built_001\"\n\t\t\t],\n\t\t\t\"responseCode\": 0\n\t\t}\n\t}\n}",
									"parameter": [],
									"expect": {
										"name": "OK",
										"isDefault": 1,
										"code": 200,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object",
											"properties": {
												"id": {
													"type": "integer"
												},
												"jsonrpc": {
													"type": "string"
												},
												"result": {
													"type": "object",
													"properties": {
														"response": {
															"type": "object",
															"properties": {
																"responseCode": {
																	"type": "integer"
																},
																"aboutString": {
																	"type": "string"
																}
															},
															"required": [
																"responseCode"
															],
															"APIPOST_ORDERS": [
																"responseCode",
																"aboutString"
															]
														}
													},
													"required": [
														"response"
													],
													"APIPOST_ORDERS": [
														"response"
													]
												}
											},
											"required": [
												"id",
												"jsonrpc",
												"result"
											],
											"APIPOST_ORDERS": [
												"id",
												"jsonrpc",
												"result"
											]
										}
									}
								},
								"error": {
									"raw": "",
									"parameter": [],
									"expect": {
										"name": "失败",
										"isDefault": -1,
										"code": 404,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object"
										}
									}
								}
							},
							"children": []
						},
						{
							"target_type": "api",
							"name": "clientMapList",
							"mark": "complated",
							"sort": 1,
							"tags": [],
							"created_uuid": "",
							"method": "POST",
							"mock": "{}",
							"mock_url": "",
							"request": {
								"url": "",
								"description": "",
								"event": {
									"pre_script": "",
									"test": ""
								},
								"pre_tasks": [],
								"post_tasks": [],
								"body": {
									"mode": "json",
									"parameter": [],
									"raw": "{\n\t\"id\": -4218047871564044,\n\t\"jsonrpc\": \"2.0\",\n\t\"method\": \"clientMapList\",\n\t\"params\": {\n\t\t\"query\": {\n\t\t\t\"sessionId\": \"{{sessionId}}\"\n\t\t}\n\t}\n}",
									"raw_para": [],
									"raw_schema": {
										"type": "object",
										"properties": {
											"id": {
												"type": "integer"
											},
											"jsonrpc": {
												"type": "string",
												"mock": {
													"mock": "2.0"
												}
											},
											"method": {
												"type": "string",
												"mock": {
													"mock": "clientMapList"
												}
											},
											"params": {
												"type": "object",
												"properties": {
													"query": {
														"type": "object",
														"properties": {
															"sessionId": {
																"type": "string",
																"mock": {
																	"mock": "{{sessionId}}"
																}
															}
														},
														"APIPOST_ORDERS": [
															"sessionId"
														],
														"required": [
															"sessionId"
														]
													}
												},
												"APIPOST_ORDERS": [
													"query"
												],
												"required": [
													"query"
												]
											}
										},
										"APIPOST_ORDERS": [
											"id",
											"jsonrpc",
											"method",
											"params"
										],
										"required": [
											"id",
											"jsonrpc",
											"method",
											"params"
										]
									}
								},
								"header": {
									"parameter": [
										{
											"is_checked": "1",
											"type": "Text",
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"not_null": "-1",
											"description": "",
											"field_type": "Text"
										}
									]
								}
							},
							"response": {
								"success": {
									"raw": "{\n\t\"id\": -4218047871564044,\n\t\"jsonrpc\": \"2.0\",\n\t\"result\": {\n\t\t\"response\": {\n\t\t\t\"clientMapNames\": [\n\t\t\t\t\"lab3_just_one_minus1_2023-04-14_15-22-11_built_001\",\n\t\t\t\t\"floor_ex_2023-05-16_17-35-46_built_001\",\n\t\t\t\t\"Quickstart_2023-04-18_10-40-46_built_001\",\n\t\t\t\t\"Quickstart_2023-07-10_11-46-02_built_001\",\n\t\t\t\t\"Quickstart_2023-07-10_11-27-50_built_001\",\n\t\t\t\t\"lab_vanjee_msg2tcp_2023-04-18_16-20-14_built_001\",\n\t\t\t\t\"lab2_2023-04-14_13-26-41_built_001_aligned_001\",\n\t\t\t\t\"floor_expanded_2023-05-16_17-37-02_built_001\",\n\t\t\t\t\"lab_vanjee_2023-04-18_16-12-45_built_001\",\n\t\t\t\t\"byd_tang_2_2023-07-18_13-54-59_built_001\",\n\t\t\t\t\"Quickstart_2023-04-18_16-09-00_built_001\",\n\t\t\t\t\"floor_expand_area_2023-05-16_17-49-03_built_001\",\n\t\t\t\t\"lab2_2023-04-14_13-26-41_built_001\",\n\t\t\t\t\"Quickstart_2023-06-19_15-51-04_built_001\",\n\t\t\t\t\"716mini_on_desk_2023-05-25_17-14-37_built_001\",\n\t\t\t\t\"Quickstart_2023-04-14_13-21-54_built_001\",\n\t\t\t\t\"Quickstart_2023-07-18_14-05-48_built_001\",\n\t\t\t\t\"garage_b2_2023-07-18_13-58-10_built_001\",\n\t\t\t\t\"byd_tang_2023-07-18_13-49-05_built_001\",\n\t\t\t\t\"Quickstart_2023-07-18_14-03-33_built_001\",\n\t\t\t\t\"716mini_on_desk_2\",\n\t\t\t\t\"lab_vanjee_2023-04-18_16-12-45_built_001_aligned_001\",\n\t\t\t\t\"Quickstart_2023-04-14_18-16-07_built_001\",\n\t\t\t\t\"floor_2023-05-11_10-43-18_built_001\",\n\t\t\t\t\"Quickstart_2023-07-18_14-27-00_built_001\",\n\t\t\t\t\"Quickstart_2023-04-14_10-44-17_built_001\",\n\t\t\t\t\"test_B2_2023-07-18_14-08-33_built_001\",\n\t\t\t\t\"716mini_on_desk_2023-05-25_17-14-37_built_001_aligned_001\",\n\t\t\t\t\"lab_2023-04-14_11-27-10_built_001\"\n\t\t\t],\n\t\t\t\"responseCode\": 0\n\t\t}\n\t}\n}",
									"parameter": [],
									"expect": {
										"name": "OK",
										"isDefault": 1,
										"code": 200,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object",
											"properties": {
												"id": {
													"type": "integer"
												},
												"jsonrpc": {
													"type": "string"
												},
												"result": {
													"type": "object",
													"properties": {
														"response": {
															"type": "object",
															"properties": {
																"responseCode": {
																	"type": "integer"
																},
																"aboutString": {
																	"type": "string"
																}
															},
															"required": [
																"responseCode"
															],
															"APIPOST_ORDERS": [
																"responseCode",
																"aboutString"
															]
														}
													},
													"required": [
														"response"
													],
													"APIPOST_ORDERS": [
														"response"
													]
												}
											},
											"required": [
												"id",
												"jsonrpc",
												"result"
											],
											"APIPOST_ORDERS": [
												"id",
												"jsonrpc",
												"result"
											]
										}
									}
								},
								"error": {
									"raw": "",
									"parameter": [],
									"expect": {
										"name": "失败",
										"isDefault": -1,
										"code": 404,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object"
										}
									}
								}
							},
							"children": []
						},
						{
							"target_type": "api",
							"name": "clientMapSend",
							"mark": "developing",
							"sort": 1,
							"tags": [],
							"created_uuid": "",
							"method": "POST",
							"mock": "{}",
							"mock_url": "",
							"request": {
								"url": "",
								"description": "",
								"event": {
									"pre_script": "",
									"test": ""
								},
								"pre_tasks": [],
								"post_tasks": [],
								"body": {
									"mode": "json",
									"parameter": [],
									"raw": "{\"0\":\"s\",\"1\":\"e\",\"2\":\"s\",\"3\":\"s\",\"4\":\"i\",\"5\":\"o\",\"6\":\"n\",\"7\":\"L\",\"8\":\"o\",\"9\":\"g\",\"10\":\"i\",\"11\":\"n\",\"query\":{\"timeout\":{\"valid\":true,\"time\":1663372036854775800,\"resolution\":1},\"userName\":\"admin\",\"password\":\"bbZGs3wFsB35\"}}",
									"raw_para": [],
									"raw_schema": {
										"type": "object",
										"properties": {
											"id": {
												"type": "integer"
											},
											"jsonrpc": {
												"type": "string",
												"mock": {
													"mock": "2.0"
												}
											},
											"method": {
												"type": "string",
												"mock": {
													"mock": "clientMapSend"
												}
											},
											"params": {
												"type": "object",
												"properties": {
													"query": {
														"type": "object",
														"properties": {
															"sessionId": {
																"type": "string",
																"mock": {
																	"mock": "{{sessionId}}"
																}
															},
															"clientMapName": {
																"ref": "cd1feef2-6671-4e67-baa4-183b8aa413c3"
															}
														},
														"APIPOST_ORDERS": [
															"sessionId",
															"clientMapName"
														],
														"required": [
															"sessionId",
															"clientMapName"
														]
													}
												},
												"APIPOST_ORDERS": [
													"query"
												],
												"required": [
													"query"
												]
											}
										},
										"APIPOST_ORDERS": [
											"id",
											"jsonrpc",
											"method",
											"params"
										],
										"required": [
											"id",
											"jsonrpc",
											"method",
											"params"
										]
									}
								},
								"header": {
									"parameter": [
										{
											"is_checked": "1",
											"type": "Text",
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"not_null": "-1",
											"description": "",
											"field_type": "Text"
										}
									]
								}
							},
							"response": {
								"success": {
									"raw": "{\n    \"id\": 326,\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"response\": {\n            \"responseCode\": 0\n        }\n    }\n}",
									"parameter": [],
									"expect": {
										"name": "OK",
										"isDefault": 1,
										"code": 200,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object",
											"properties": {
												"id": {
													"type": "integer"
												},
												"jsonrpc": {
													"type": "string"
												},
												"result": {
													"type": "object",
													"properties": {
														"response": {
															"type": "object",
															"properties": {
																"responseCode": {
																	"type": "integer"
																},
																"aboutString": {
																	"type": "string"
																}
															},
															"required": [
																"responseCode"
															],
															"APIPOST_ORDERS": [
																"responseCode",
																"aboutString"
															]
														}
													},
													"required": [
														"response"
													],
													"APIPOST_ORDERS": [
														"response"
													]
												}
											},
											"required": [
												"id",
												"jsonrpc",
												"result"
											],
											"APIPOST_ORDERS": [
												"id",
												"jsonrpc",
												"result"
											]
										}
									}
								},
								"error": {
									"raw": "",
									"parameter": [],
									"expect": {
										"name": "失败",
										"isDefault": -1,
										"code": 404,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object"
										}
									}
								}
							},
							"children": []
						},
						{
							"target_type": "api",
							"name": "clientMapRename",
							"mark": "complated",
							"sort": 1,
							"tags": [],
							"created_uuid": "",
							"method": "POST",
							"mock": "{}",
							"mock_url": "",
							"request": {
								"url": "",
								"description": "",
								"event": {
									"pre_script": "",
									"test": ""
								},
								"pre_tasks": [],
								"post_tasks": [],
								"body": {
									"mode": "json",
									"parameter": [],
									"raw": "{\n\t\"id\": 5511552702750687,\n\t\"jsonrpc\": \"2.0\",\n\t\"method\": \"clientMapRename\",\n\t\"params\": {\n\t\t\"query\": {\n\t\t\t\"sessionId\": \"{{sessionId}}\",\n\t\t\t\"currentClientMapName\": \"Quickstart_2023-04-18_10-40-46_built_001\",\n\t\t\t\"desiredClientMapName\": \"start_2023-04-18_10-40-46_built_001\"\n\t\t}\n\t}\n}",
									"raw_para": [],
									"raw_schema": {
										"type": "object",
										"properties": {
											"id": {
												"type": "integer"
											},
											"jsonrpc": {
												"type": "string",
												"mock": {
													"mock": "2.0"
												}
											},
											"method": {
												"type": "string",
												"mock": {
													"mock": "clientMapRename"
												}
											},
											"params": {
												"type": "object",
												"properties": {
													"query": {
														"type": "object",
														"properties": {
															"sessionId": {
																"type": "string",
																"mock": {
																	"mock": "{{sessionId}}"
																}
															},
															"currentClientMapName": {
																"APIPOST_ORDERS": [
																	"1d8d4711c18b4992b2228434e80bb83b"
																],
																"APIPOST_REFS": {
																	"1d8d4711c18b4992b2228434e80bb83b": {
																		"ref": "cd1feef2-6671-4e67-baa4-183b8aa413c3"
																	}
																},
																"properties": {},
																"type": "string"
															},
															"desiredClientMapName": {
																"APIPOST_ORDERS": [
																	"bb2d07a46efc4ad18f5b170b0ee9aaa3"
																],
																"APIPOST_REFS": {
																	"bb2d07a46efc4ad18f5b170b0ee9aaa3": {
																		"ref": "cd1feef2-6671-4e67-baa4-183b8aa413c3"
																	}
																},
																"properties": {},
																"type": "string"
															}
														},
														"APIPOST_ORDERS": [
															"sessionId",
															"currentClientMapName",
															"desiredClientMapName"
														],
														"required": [
															"sessionId",
															"currentClientMapName",
															"desiredClientMapName"
														]
													}
												},
												"APIPOST_ORDERS": [
													"query"
												],
												"required": [
													"query"
												]
											}
										},
										"APIPOST_ORDERS": [
											"id",
											"jsonrpc",
											"method",
											"params"
										],
										"required": [
											"id",
											"jsonrpc",
											"method",
											"params"
										]
									}
								},
								"header": {
									"parameter": [
										{
											"is_checked": "1",
											"type": "Text",
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"not_null": "-1",
											"description": "",
											"field_type": "Text"
										}
									]
								}
							},
							"response": {
								"success": {
									"raw": "{\n\t\"id\": 5511552702750687,\n\t\"jsonrpc\": \"2.0\",\n\t\"result\": {\n\t\t\"response\": {\n\t\t\t\"clientMapNames\": [\n\t\t\t\t\"lab3_just_one_minus1_2023-04-14_15-22-11_built_001\",\n\t\t\t\t\"floor_ex_2023-05-16_17-35-46_built_001\",\n\t\t\t\t\"start_2023-04-18_10-40-46_built_001\",\n\t\t\t\t\"Quickstart_2023-07-10_11-46-02_built_001\",\n\t\t\t\t\"Quickstart_2023-07-10_11-27-50_built_001\",\n\t\t\t\t\"lab_vanjee_msg2tcp_2023-04-18_16-20-14_built_001\",\n\t\t\t\t\"guzhi_test071805_2023-07-18_14-31-02_built_001\",\n\t\t\t\t\"lab2_2023-04-14_13-26-41_built_001_aligned_001\",\n\t\t\t\t\"floor_expanded_2023-05-16_17-37-02_built_001\",\n\t\t\t\t\"lab_vanjee_2023-04-18_16-12-45_built_001\",\n\t\t\t\t\"byd_tang_2_2023-07-18_13-54-59_built_001\",\n\t\t\t\t\"Quickstart_2023-04-18_16-09-00_built_001\",\n\t\t\t\t\"floor_expand_area_2023-05-16_17-49-03_built_001\",\n\t\t\t\t\"lab2_2023-04-14_13-26-41_built_001\",\n\t\t\t\t\"Quickstart_2023-06-19_15-51-04_built_001\",\n\t\t\t\t\"716mini_on_desk_2023-05-25_17-14-37_built_001\",\n\t\t\t\t\"Quickstart_2023-04-14_13-21-54_built_001\",\n\t\t\t\t\"Quickstart_2023-07-18_14-05-48_built_001\",\n\t\t\t\t\"garage_b2_2023-07-18_13-58-10_built_001\",\n\t\t\t\t\"byd_tang_2023-07-18_13-49-05_built_001\",\n\t\t\t\t\"Quickstart_2023-07-18_14-03-33_built_001\",\n\t\t\t\t\"716mini_on_desk_2\",\n\t\t\t\t\"guzhi_test071802_B2_2023-07-18_14-16-18_built_001\",\n\t\t\t\t\"lab_vanjee_2023-04-18_16-12-45_built_001_aligned_001\",\n\t\t\t\t\"Quickstart_2023-04-14_18-16-07_built_001\",\n\t\t\t\t\"floor_2023-05-11_10-43-18_built_001\",\n\t\t\t\t\"Quickstart_2023-07-18_14-27-00_built_001\",\n\t\t\t\t\"Quickstart_2023-04-14_10-44-17_built_001\",\n\t\t\t\t\"test_B2_2023-07-18_14-08-33_built_001\",\n\t\t\t\t\"guzhi_test071803_2023-07-18_14-22-01_built_001\",\n\t\t\t\t\"guzhi_test071802_B2_2023-07-18_14-16-18_built_002\",\n\t\t\t\t\"716mini_on_desk_2023-05-25_17-14-37_built_001_aligned_001\",\n\t\t\t\t\"lab_2023-04-14_11-27-10_built_001\"\n\t\t\t],\n\t\t\t\"responseCode\": 0\n\t\t}\n\t}\n}",
									"parameter": [],
									"expect": {
										"name": "OK",
										"isDefault": 1,
										"code": 200,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object",
											"properties": {
												"id": {
													"type": "integer"
												},
												"jsonrpc": {
													"type": "string"
												},
												"result": {
													"type": "object",
													"properties": {
														"response": {
															"type": "object",
															"properties": {
																"responseCode": {
																	"type": "integer"
																},
																"aboutString": {
																	"type": "string"
																}
															},
															"required": [
																"responseCode"
															],
															"APIPOST_ORDERS": [
																"responseCode",
																"aboutString"
															]
														}
													},
													"required": [
														"response"
													],
													"APIPOST_ORDERS": [
														"response"
													]
												}
											},
											"required": [
												"id",
												"jsonrpc",
												"result"
											],
											"APIPOST_ORDERS": [
												"id",
												"jsonrpc",
												"result"
											]
										}
									}
								},
								"error": {
									"raw": "",
									"parameter": [],
									"expect": {
										"name": "失败",
										"isDefault": -1,
										"code": 404,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object"
										}
									}
								}
							},
							"children": []
						},
						{
							"target_type": "api",
							"name": "clientMapStop",
							"mark": "developing",
							"sort": 1,
							"tags": [],
							"created_uuid": "",
							"method": "POST",
							"mock": "{}",
							"mock_url": "",
							"request": {
								"url": "",
								"description": "",
								"event": {
									"pre_script": "",
									"test": ""
								},
								"pre_tasks": [],
								"post_tasks": [],
								"body": {
									"mode": "json",
									"parameter": [],
									"raw": "{\"0\":\"s\",\"1\":\"e\",\"2\":\"s\",\"3\":\"s\",\"4\":\"i\",\"5\":\"o\",\"6\":\"n\",\"7\":\"L\",\"8\":\"o\",\"9\":\"g\",\"10\":\"i\",\"11\":\"n\",\"query\":{\"timeout\":{\"valid\":true,\"time\":1663372036854775800,\"resolution\":1},\"userName\":\"admin\",\"password\":\"bbZGs3wFsB35\"}}",
									"raw_para": [],
									"raw_schema": {
										"type": "object",
										"properties": {
											"id": {
												"type": "integer"
											},
											"jsonrpc": {
												"type": "string",
												"mock": {
													"mock": "2.0"
												}
											},
											"method": {
												"type": "string",
												"mock": {
													"mock": "clientMapStop"
												}
											},
											"params": {
												"type": "object",
												"properties": {
													"query": {
														"type": "object",
														"properties": {
															"sessionId": {
																"type": "string",
																"mock": {
																	"mock": "{{sessionId}}"
																}
															}
														},
														"APIPOST_ORDERS": [
															"sessionId"
														],
														"required": [
															"sessionId"
														]
													}
												},
												"APIPOST_ORDERS": [
													"query"
												],
												"required": [
													"query"
												]
											}
										},
										"APIPOST_ORDERS": [
											"id",
											"jsonrpc",
											"method",
											"params"
										],
										"required": [
											"id",
											"jsonrpc",
											"method",
											"params"
										]
									}
								},
								"header": {
									"parameter": [
										{
											"is_checked": "1",
											"type": "Text",
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"not_null": "-1",
											"description": "",
											"field_type": "Text"
										}
									]
								}
							},
							"response": {
								"success": {
									"raw": "{\n    \"id\": 326,\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"response\": {\n            \"responseCode\": 0\n        }\n    }\n}",
									"parameter": [],
									"expect": {
										"name": "OK",
										"isDefault": 1,
										"code": 200,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object",
											"properties": {
												"id": {
													"type": "integer"
												},
												"jsonrpc": {
													"type": "string"
												},
												"result": {
													"type": "object",
													"properties": {
														"response": {
															"type": "object",
															"properties": {
																"responseCode": {
																	"type": "integer"
																},
																"aboutString": {
																	"type": "string"
																}
															},
															"required": [
																"responseCode"
															],
															"APIPOST_ORDERS": [
																"responseCode",
																"aboutString"
															]
														}
													},
													"required": [
														"response"
													],
													"APIPOST_ORDERS": [
														"response"
													]
												}
											},
											"required": [
												"id",
												"jsonrpc",
												"result"
											],
											"APIPOST_ORDERS": [
												"id",
												"jsonrpc",
												"result"
											]
										}
									}
								},
								"error": {
									"raw": "",
									"parameter": [],
									"expect": {
										"name": "失败",
										"isDefault": -1,
										"code": 404,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object"
										}
									}
								}
							},
							"children": []
						}
					]
				},
				{
					"target_type": "folder",
					"name": "ClientManualAlign",
					"mark": "developing",
					"sort": 1,
					"tags": [],
					"created_uuid": "",
					"request": {
						"description": ""
					},
					"children": [
						{
							"target_type": "api",
							"name": "clientManualAlignGetMap",
							"mark": "complated",
							"sort": 1,
							"tags": [],
							"created_uuid": "",
							"method": "POST",
							"mock": "{}",
							"mock_url": "",
							"request": {
								"url": "",
								"description": "",
								"event": {
									"pre_script": "",
									"test": ""
								},
								"pre_tasks": [],
								"post_tasks": [],
								"body": {
									"mode": "json",
									"parameter": [],
									"raw": "{\n\t\"id\": -8164755467280703,\n\t\"jsonrpc\": \"2.0\",\n\t\"method\": \"clientManualAlignGetMap\",\n\t\"params\": {\n\t\t\"query\": {\n\t\t\t\"sessionId\": \"{{sessionId}}\",\n\t\t\t\"clientMapName\": \"bed01\",\n\t\t\t\"mapLevel\": 8030911224678907\n\t\t}\n\t}\n}",
									"raw_para": [],
									"raw_schema": {
										"type": "object",
										"properties": {
											"id": {
												"type": "integer"
											},
											"jsonrpc": {
												"type": "string",
												"mock": {
													"mock": "2.0"
												}
											},
											"method": {
												"type": "string",
												"mock": {
													"mock": "clientManualAlignGetMap"
												}
											},
											"params": {
												"type": "object",
												"properties": {
													"query": {
														"type": "object",
														"properties": {
															"sessionId": {
																"type": "string",
																"mock": {
																	"mock": "{{sessionId}}"
																}
															},
															"clientMapName": {
																"APIPOST_ORDERS": [
																	"567e40afaae04ba88f28935d460d3074"
																],
																"APIPOST_REFS": {
																	"567e40afaae04ba88f28935d460d3074": {
																		"ref": "4e274b15-c8c1-445c-b99e-4b178d224674"
																	}
																},
																"properties": [],
																"type": "string"
															},
															"mapLevel": {
																"APIPOST_ORDERS": [
																	"ab4a5ec12ad9490abe21c0bd7dcb9a57"
																],
																"APIPOST_REFS": {
																	"ab4a5ec12ad9490abe21c0bd7dcb9a57": {
																		"ref": "0ef8ff4f-f460-4985-98ac-a2f24daf6b39"
																	}
																},
																"properties": [],
																"type": "integer",
																"mock": {
																	"mock": ""
																}
															}
														},
														"APIPOST_ORDERS": [
															"sessionId",
															"clientMapName",
															"mapLevel"
														],
														"required": [
															"sessionId",
															"clientMapName",
															"mapLevel"
														]
													}
												},
												"APIPOST_ORDERS": [
													"query"
												],
												"required": [
													"query"
												]
											}
										},
										"APIPOST_ORDERS": [
											"id",
											"jsonrpc",
											"method",
											"params"
										],
										"required": [
											"id",
											"jsonrpc",
											"method",
											"params"
										]
									}
								},
								"header": {
									"parameter": [
										{
											"is_checked": "1",
											"type": "Text",
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"not_null": "-1",
											"description": "",
											"field_type": "Text"
										}
									]
								}
							},
							"response": {
								"success": {
									"raw": "{\"id\":-8164755467280703,\"jsonrpc\":\"2.0\",\"result\":{\"response\":{\"pointCloud\":{\"content\":\"\",\"contentEncoding\":\"base64\",\"contentMediaType\":\"application/PointCloud2D\"},\"pointCloudSize\":9846,\"reflectors\":[],\"responseCode\":0}}}",
									"parameter": [],
									"expect": {
										"name": "OK",
										"isDefault": 1,
										"code": 200,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object",
											"properties": {
												"id": {
													"type": "integer"
												},
												"jsonrpc": {
													"type": "string"
												},
												"result": {
													"type": "object",
													"properties": {
														"response": {
															"type": "object",
															"properties": {
																"responseCode": {
																	"type": "integer"
																},
																"aboutString": {
																	"type": "string"
																}
															},
															"required": [
																"responseCode"
															],
															"APIPOST_ORDERS": [
																"responseCode",
																"aboutString"
															]
														}
													},
													"required": [
														"response"
													],
													"APIPOST_ORDERS": [
														"response"
													]
												}
											},
											"required": [
												"id",
												"jsonrpc",
												"result"
											],
											"APIPOST_ORDERS": [
												"id",
												"jsonrpc",
												"result"
											]
										}
									}
								},
								"error": {
									"raw": "{\n\t\"error\": {\n\t\t\"code\": -32602,\n\t\t\"message\": \"Invalid params\"\n\t},\n\t\"id\": -7652826589683907,\n\t\"jsonrpc\": \"2.0\"\n}",
									"parameter": [],
									"expect": {
										"name": "-32602",
										"isDefault": -1,
										"code": "200",
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object"
										}
									}
								}
							},
							"children": []
						},
						{
							"target_type": "api",
							"name": "clientManualAlignStop",
							"mark": "complated",
							"sort": 1,
							"tags": [],
							"created_uuid": "",
							"method": "POST",
							"mock": "{}",
							"mock_url": "",
							"request": {
								"url": "",
								"description": "",
								"event": {
									"pre_script": "",
									"test": ""
								},
								"pre_tasks": [],
								"post_tasks": [],
								"body": {
									"mode": "json",
									"parameter": [],
									"raw": "{\n\t\"id\": -996290901260496,\n\t\"jsonrpc\": \"2.0\",\n\t\"method\": \"clientManualAlignStop\",\n\t\"params\": {\n\t\t\"query\": {\n\t\t\t\"sessionId\": \"{{sessionId}}\"\n\t\t}\n\t}\n}",
									"raw_para": [],
									"raw_schema": {
										"type": "object",
										"properties": {
											"id": {
												"type": "integer"
											},
											"jsonrpc": {
												"type": "string",
												"mock": {
													"mock": "2.0"
												}
											},
											"method": {
												"type": "string",
												"mock": {
													"mock": "clientManualAlignStop"
												}
											},
											"params": {
												"type": "object",
												"properties": {
													"query": {
														"type": "object",
														"properties": {
															"sessionId": {
																"type": "string",
																"mock": {
																	"mock": "{{sessionId}}"
																}
															}
														},
														"APIPOST_ORDERS": [
															"sessionId"
														],
														"required": [
															"sessionId"
														]
													}
												},
												"APIPOST_ORDERS": [
													"query"
												],
												"required": [
													"query"
												]
											}
										},
										"APIPOST_ORDERS": [
											"id",
											"jsonrpc",
											"method",
											"params"
										],
										"required": [
											"id",
											"jsonrpc",
											"method",
											"params"
										]
									}
								},
								"header": {
									"parameter": [
										{
											"is_checked": "1",
											"type": "Text",
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"not_null": "-1",
											"description": "",
											"field_type": "Text"
										}
									]
								}
							},
							"response": {
								"success": {
									"raw": "{\n\t\"id\": -996290901260496,\n\t\"jsonrpc\": \"2.0\",\n\t\"result\": {\n\t\t\"response\": {\n\t\t\t\"responseCode\": 0\n\t\t}\n\t}\n}",
									"parameter": [],
									"expect": {
										"name": "OK",
										"isDefault": 1,
										"code": 200,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object",
											"properties": {
												"id": {
													"type": "integer"
												},
												"jsonrpc": {
													"type": "string"
												},
												"result": {
													"type": "object",
													"properties": {
														"response": {
															"type": "object",
															"properties": {
																"responseCode": {
																	"type": "integer"
																},
																"aboutString": {
																	"type": "string"
																}
															},
															"required": [
																"responseCode"
															],
															"APIPOST_ORDERS": [
																"responseCode",
																"aboutString"
															]
														}
													},
													"required": [
														"response"
													],
													"APIPOST_ORDERS": [
														"response"
													]
												}
											},
											"required": [
												"id",
												"jsonrpc",
												"result"
											],
											"APIPOST_ORDERS": [
												"id",
												"jsonrpc",
												"result"
											]
										}
									}
								},
								"error": {
									"raw": "{\n\t\"id\": -996290901260496,\n\t\"jsonrpc\": \"2.0\",\n\t\"result\": {\n\t\t\"response\": {\n\t\t\t\"responseCode\": 7\n\t\t}\n\t}\n}",
									"parameter": [
										{
											"key": "id",
											"value": "-996290901260496",
											"description": "",
											"not_null": 1,
											"field_type": "Integer",
											"type": "Text",
											"is_checked": 1
										},
										{
											"key": "jsonrpc",
											"value": "2.0",
											"description": "",
											"not_null": 1,
											"field_type": "String",
											"type": "Text",
											"is_checked": 1
										},
										{
											"key": "result",
											"value": "",
											"description": "",
											"not_null": 1,
											"field_type": "Object",
											"type": "Text",
											"is_checked": 1
										},
										{
											"key": "result.response",
											"value": "",
											"description": "",
											"not_null": 1,
											"field_type": "Object",
											"type": "Text",
											"is_checked": 1
										},
										{
											"key": "result.response.responseCode",
											"value": "7",
											"description": "前边clientManualAlignSet顺利完成后使用clientManualAlignStop，得到responseCode 7，The current system state does not allow the operation to complete.",
											"not_null": 1,
											"field_type": "Integer",
											"type": "Text",
											"is_checked": 1
										}
									],
									"expect": {
										"name": "rcode7",
										"isDefault": -1,
										"code": "200",
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object"
										}
									}
								}
							},
							"children": []
						},
						{
							"target_type": "api",
							"name": "clientManualAlignSet",
							"mark": "complated",
							"sort": 1,
							"tags": [],
							"created_uuid": "",
							"method": "POST",
							"mock": "{}",
							"mock_url": "",
							"request": {
								"url": "",
								"description": "依次使用 \n1. sessionLogin, \n2. clientManualAlignStart, \n3. clientManualAlignSet. \n\nclientManualAlignSet顺利完成后，不需要使用clientManualAlignStop.\n\nManually aligns a map, transforming it into the given reference frame. The aligned map is stored under a new name, which is returned in the response to this API method.\nNote that the distance by which a map can be shifted through this method is restricted. This limitation is required to maintain the precision of the map when using a ﬂoating-point representation. In particular, maps may not be shifted by absolute values of more than 10,000 meters along each axis. Additionally, the user should ensure that the alignment does not result in a map with coordinates that exceed 100,000 meters along either axis. This issue can arise if a user performs repeated calls to clientManualAlignSet that shift a given map by a very large distance.\nManual map alignment mode needs to be started using clientManualAlignStart beforehand.\nThis call will not automatically stop manual map aligment mode. Use clientManualAlignStop to do so if required.",
								"event": {
									"pre_script": "",
									"test": ""
								},
								"pre_tasks": [],
								"post_tasks": [],
								"body": {
									"mode": "json",
									"parameter": [],
									"raw": "{\n\t\"id\": 1460540336449359,\n\t\"jsonrpc\": \"2.0\",\n\t\"method\": \"clientManualAlignSet\",\n\t\"params\": {\n\t\t\"query\": {\n\t\t\t\"sessionId\": \"{{sessionId}}\",\n\t\t\t\"NEWalignOLD\": {\n\t\t\t\t\"x\": 4,\n\t\t\t\t\"y\": 0,\n\t\t\t\t\"a\": 0\n\t\t\t},\n\t\t\t\"clientMapName\": \"bed01\"\n\t\t}\n\t}\n}",
									"raw_para": [],
									"raw_schema": {
										"type": "object",
										"properties": {
											"id": {
												"type": "integer"
											},
											"jsonrpc": {
												"type": "string",
												"mock": {
													"mock": "2.0"
												}
											},
											"method": {
												"type": "string",
												"mock": {
													"mock": "clientManualAlignSet"
												}
											},
											"params": {
												"type": "object",
												"properties": {
													"query": {
														"type": "object",
														"properties": {
															"sessionId": {
																"type": "string",
																"mock": {
																	"mock": "{{sessionId}}"
																}
															},
															"NEWalignOLD": {
																"ref": "c11b0581-908c-4cff-8554-bf778b059d3f"
															},
															"clientMapName": {
																"APIPOST_ORDERS": [
																	"01e7ea5118e74a74a4d50db44231f1cf"
																],
																"APIPOST_REFS": {
																	"01e7ea5118e74a74a4d50db44231f1cf": {
																		"ref": "4e274b15-c8c1-445c-b99e-4b178d224674"
																	}
																},
																"properties": [],
																"type": "string"
															}
														},
														"APIPOST_ORDERS": [
															"sessionId",
															"NEWalignOLD",
															"clientMapName"
														],
														"required": [
															"sessionId",
															"NEWalignOLD",
															"clientMapName"
														]
													}
												},
												"APIPOST_ORDERS": [
													"query"
												],
												"required": [
													"query"
												]
											}
										},
										"APIPOST_ORDERS": [
											"id",
											"jsonrpc",
											"method",
											"params"
										],
										"required": [
											"id",
											"jsonrpc",
											"method",
											"params"
										]
									}
								},
								"header": {
									"parameter": [
										{
											"is_checked": "1",
											"type": "Text",
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"not_null": "-1",
											"description": "",
											"field_type": "Text"
										}
									]
								}
							},
							"response": {
								"success": {
									"raw": "{\n\t\"id\": 1460540336449359,\n\t\"jsonrpc\": \"2.0\",\n\t\"result\": {\n\t\t\"response\": {\n\t\t\t\"clientMapName\": \"bed01_aligned_20230719T084316Z\",\n\t\t\t\"responseCode\": 0\n\t\t}\n\t}\n}",
									"parameter": [],
									"expect": {
										"name": "OK",
										"isDefault": 1,
										"code": 200,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object",
											"properties": {
												"id": {
													"type": "integer"
												},
												"jsonrpc": {
													"type": "string"
												},
												"result": {
													"type": "object",
													"properties": {
														"response": {
															"type": "object",
															"properties": {
																"responseCode": {
																	"type": "integer"
																},
																"aboutString": {
																	"type": "string"
																}
															},
															"required": [
																"responseCode"
															],
															"APIPOST_ORDERS": [
																"responseCode",
																"aboutString"
															]
														}
													},
													"required": [
														"response"
													],
													"APIPOST_ORDERS": [
														"response"
													]
												}
											},
											"required": [
												"id",
												"jsonrpc",
												"result"
											],
											"APIPOST_ORDERS": [
												"id",
												"jsonrpc",
												"result"
											]
										}
									}
								},
								"error": {
									"raw": "",
									"parameter": [],
									"expect": {
										"name": "失败",
										"isDefault": -1,
										"code": 404,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object"
										}
									}
								}
							},
							"children": []
						},
						{
							"target_type": "api",
							"name": "clientManualAlignStart",
							"mark": "complated",
							"sort": 1,
							"tags": [],
							"created_uuid": "",
							"method": "POST",
							"mock": "{}",
							"mock_url": "",
							"request": {
								"url": "",
								"description": "",
								"event": {
									"pre_script": "",
									"test": ""
								},
								"pre_tasks": [],
								"post_tasks": [],
								"body": {
									"mode": "json",
									"parameter": [],
									"raw": "{\n\t\"id\": 5830720718396751,\n\t\"jsonrpc\": \"2.0\",\n\t\"method\": \"clientManualAlignStart\",\n\t\"params\": {\n\t\t\"query\": {\n\t\t\t\"sessionId\": \"{{sessionId}}\"\n\t\t}\n\t}\n}",
									"raw_para": [],
									"raw_schema": {
										"type": "object",
										"properties": {
											"id": {
												"type": "integer"
											},
											"jsonrpc": {
												"type": "string",
												"mock": {
													"mock": "2.0"
												}
											},
											"method": {
												"type": "string",
												"mock": {
													"mock": "clientManualAlignStart"
												}
											},
											"params": {
												"type": "object",
												"properties": {
													"query": {
														"type": "object",
														"properties": {
															"sessionId": {
																"type": "string",
																"mock": {
																	"mock": "{{sessionId}}"
																}
															}
														},
														"APIPOST_ORDERS": [
															"sessionId"
														],
														"required": [
															"sessionId"
														]
													}
												},
												"APIPOST_ORDERS": [
													"query"
												],
												"required": [
													"query"
												]
											}
										},
										"APIPOST_ORDERS": [
											"id",
											"jsonrpc",
											"method",
											"params"
										],
										"required": [
											"id",
											"jsonrpc",
											"method",
											"params"
										]
									}
								},
								"header": {
									"parameter": [
										{
											"is_checked": "1",
											"type": "Text",
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"not_null": "-1",
											"description": "",
											"field_type": "Text"
										}
									]
								}
							},
							"response": {
								"success": {
									"raw": "{\n\t\"id\": 5830720718396751,\n\t\"jsonrpc\": \"2.0\",\n\t\"result\": {\n\t\t\"response\": {\n\t\t\t\"responseCode\": 0\n\t\t}\n\t}\n}",
									"parameter": [],
									"expect": {
										"name": "OK",
										"isDefault": 1,
										"code": 200,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object",
											"properties": {
												"id": {
													"type": "integer"
												},
												"jsonrpc": {
													"type": "string"
												},
												"result": {
													"type": "object",
													"properties": {
														"response": {
															"type": "object",
															"properties": {
																"responseCode": {
																	"type": "integer"
																},
																"aboutString": {
																	"type": "string"
																}
															},
															"required": [
																"responseCode"
															],
															"APIPOST_ORDERS": [
																"responseCode",
																"aboutString"
															]
														}
													},
													"required": [
														"response"
													],
													"APIPOST_ORDERS": [
														"response"
													]
												}
											},
											"required": [
												"id",
												"jsonrpc",
												"result"
											],
											"APIPOST_ORDERS": [
												"id",
												"jsonrpc",
												"result"
											]
										}
									}
								},
								"error": {
									"raw": "",
									"parameter": [],
									"expect": {
										"name": "失败",
										"isDefault": -1,
										"code": 404,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object"
										}
									}
								}
							},
							"children": []
						}
					]
				},
				{
					"target_type": "folder",
					"name": "ClientLocalization",
					"mark": "developing",
					"sort": 1,
					"tags": [],
					"created_uuid": "",
					"request": {
						"description": ""
					},
					"children": [
						{
							"target_type": "api",
							"name": "clientLocalizationSetSeed",
							"mark": "developing",
							"sort": 1,
							"tags": [],
							"created_uuid": "",
							"method": "POST",
							"mock": "{}",
							"mock_url": "",
							"request": {
								"url": "",
								"description": "",
								"event": {
									"pre_script": "",
									"test": ""
								},
								"pre_tasks": [],
								"post_tasks": [],
								"body": {
									"mode": "json",
									"parameter": [],
									"raw": "{\"0\":\"s\",\"1\":\"e\",\"2\":\"s\",\"3\":\"s\",\"4\":\"i\",\"5\":\"o\",\"6\":\"n\",\"7\":\"L\",\"8\":\"o\",\"9\":\"g\",\"10\":\"i\",\"11\":\"n\",\"query\":{\"timeout\":{\"valid\":true,\"time\":1663372036854775800,\"resolution\":1},\"userName\":\"admin\",\"password\":\"bbZGs3wFsB35\"}}",
									"raw_para": [],
									"raw_schema": {
										"type": "object",
										"properties": {
											"id": {
												"type": "integer"
											},
											"jsonrpc": {
												"type": "string",
												"mock": {
													"mock": "2.0"
												}
											},
											"method": {
												"type": "string",
												"mock": {
													"mock": "clientLocalizationSetSeed"
												}
											},
											"params": {
												"type": "object",
												"properties": {
													"query": {
														"type": "object",
														"properties": {
															"sessionId": {
																"type": "string",
																"mock": {
																	"mock": "{{sessionId}}"
																}
															},
															"enforceSeed": {
																"type": "boolean"
															},
															"uncertainSeed": {
																"type": "boolean"
															},
															"seedPose": {
																"ref": "471faa0e-569d-4aae-829c-389b3abf3366"
															}
														},
														"APIPOST_ORDERS": [
															"sessionId",
															"enforceSeed",
															"uncertainSeed",
															"seedPose"
														],
														"required": [
															"sessionId",
															"enforceSeed",
															"uncertainSeed",
															"seedPose"
														]
													}
												},
												"APIPOST_ORDERS": [
													"query"
												],
												"required": [
													"query"
												]
											}
										},
										"APIPOST_ORDERS": [
											"id",
											"jsonrpc",
											"method",
											"params"
										],
										"required": [
											"id",
											"jsonrpc",
											"method",
											"params"
										]
									}
								},
								"header": {
									"parameter": [
										{
											"is_checked": "1",
											"type": "Text",
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"not_null": "-1",
											"description": "",
											"field_type": "Text"
										}
									]
								}
							},
							"response": {
								"success": {
									"raw": "{\n    \"id\": 326,\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"response\": {\n            \"responseCode\": 0\n        }\n    }\n}",
									"parameter": [],
									"expect": {
										"name": "OK",
										"isDefault": 1,
										"code": 200,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object",
											"properties": {
												"id": {
													"type": "integer"
												},
												"jsonrpc": {
													"type": "string"
												},
												"result": {
													"type": "object",
													"properties": {
														"response": {
															"type": "object",
															"properties": {
																"responseCode": {
																	"type": "integer"
																},
																"aboutString": {
																	"type": "string"
																}
															},
															"required": [
																"responseCode"
															],
															"APIPOST_ORDERS": [
																"responseCode",
																"aboutString"
															]
														}
													},
													"required": [
														"response"
													],
													"APIPOST_ORDERS": [
														"response"
													]
												}
											},
											"required": [
												"id",
												"jsonrpc",
												"result"
											],
											"APIPOST_ORDERS": [
												"id",
												"jsonrpc",
												"result"
											]
										}
									}
								},
								"error": {
									"raw": "",
									"parameter": [],
									"expect": {
										"name": "失败",
										"isDefault": -1,
										"code": 404,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object"
										}
									}
								}
							},
							"children": []
						},
						{
							"target_type": "api",
							"name": "clientLocalizationStart",
							"mark": "complated",
							"sort": 1,
							"tags": [],
							"created_uuid": "",
							"method": "POST",
							"mock": "{}",
							"mock_url": "",
							"request": {
								"url": "",
								"description": "",
								"event": {
									"pre_script": "",
									"test": ""
								},
								"pre_tasks": [],
								"post_tasks": [],
								"body": {
									"mode": "json",
									"parameter": [],
									"raw": "{\n\t\"id\": 6178260544074515,\n\t\"jsonrpc\": \"2.0\",\n\t\"method\": \"clientLocalizationStart\",\n\t\"params\": {\n\t\t\"query\": {\n\t\t\t\"sessionId\": \"{{sessionId}}\"\n\t\t}\n\t}\n}",
									"raw_para": [],
									"raw_schema": {
										"type": "object",
										"properties": {
											"id": {
												"type": "integer"
											},
											"jsonrpc": {
												"type": "string",
												"mock": {
													"mock": "2.0"
												}
											},
											"method": {
												"type": "string",
												"mock": {
													"mock": "clientLocalizationStart"
												}
											},
											"params": {
												"type": "object",
												"properties": {
													"query": {
														"type": "object",
														"properties": {
															"sessionId": {
																"type": "string",
																"mock": {
																	"mock": "{{sessionId}}"
																}
															}
														},
														"APIPOST_ORDERS": [
															"sessionId"
														],
														"required": [
															"sessionId"
														]
													}
												},
												"APIPOST_ORDERS": [
													"query"
												],
												"required": [
													"query"
												]
											}
										},
										"APIPOST_ORDERS": [
											"id",
											"jsonrpc",
											"method",
											"params"
										],
										"required": [
											"id",
											"jsonrpc",
											"method",
											"params"
										]
									}
								},
								"header": {
									"parameter": [
										{
											"is_checked": "1",
											"type": "Text",
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"not_null": "-1",
											"description": "",
											"field_type": "Text"
										}
									]
								}
							},
							"response": {
								"success": {
									"raw": "{\n    \"id\": 326,\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"response\": {\n            \"responseCode\": 0\n        }\n    }\n}",
									"parameter": [],
									"expect": {
										"name": "OK",
										"isDefault": 1,
										"code": 200,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object",
											"properties": {
												"id": {
													"type": "integer"
												},
												"jsonrpc": {
													"type": "string"
												},
												"result": {
													"type": "object",
													"properties": {
														"response": {
															"type": "object",
															"properties": {
																"responseCode": {
																	"type": "integer"
																},
																"aboutString": {
																	"type": "string"
																}
															},
															"required": [
																"responseCode"
															],
															"APIPOST_ORDERS": [
																"responseCode",
																"aboutString"
															]
														}
													},
													"required": [
														"response"
													],
													"APIPOST_ORDERS": [
														"response"
													]
												}
											},
											"required": [
												"id",
												"jsonrpc",
												"result"
											],
											"APIPOST_ORDERS": [
												"id",
												"jsonrpc",
												"result"
											]
										}
									}
								},
								"error": {
									"raw": "",
									"parameter": [],
									"expect": {
										"name": "失败",
										"isDefault": -1,
										"code": 404,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object"
										}
									}
								}
							},
							"children": []
						},
						{
							"target_type": "api",
							"name": "clientLocalizationStop",
							"mark": "complated",
							"sort": 1,
							"tags": [],
							"created_uuid": "",
							"method": "POST",
							"mock": "{}",
							"mock_url": "",
							"request": {
								"url": "",
								"description": "",
								"event": {
									"pre_script": "",
									"test": ""
								},
								"pre_tasks": [],
								"post_tasks": [],
								"body": {
									"mode": "json",
									"parameter": [],
									"raw": "{\n\t\"id\": -1134278451134520,\n\t\"jsonrpc\": \"2.0\",\n\t\"method\": \"clientLocalizationStop\",\n\t\"params\": {\n\t\t\"query\": {\n\t\t\t\"sessionId\": \"{{sessionId}}\"\n\t\t}\n\t}\n}",
									"raw_para": [],
									"raw_schema": {
										"type": "object",
										"properties": {
											"id": {
												"type": "integer"
											},
											"jsonrpc": {
												"type": "string",
												"mock": {
													"mock": "2.0"
												}
											},
											"method": {
												"type": "string",
												"mock": {
													"mock": "clientLocalizationStop"
												}
											},
											"params": {
												"type": "object",
												"properties": {
													"query": {
														"type": "object",
														"properties": {
															"sessionId": {
																"type": "string",
																"mock": {
																	"mock": "{{sessionId}}"
																}
															}
														},
														"APIPOST_ORDERS": [
															"sessionId"
														],
														"required": [
															"sessionId"
														]
													}
												},
												"APIPOST_ORDERS": [
													"query"
												],
												"required": [
													"query"
												]
											}
										},
										"APIPOST_ORDERS": [
											"id",
											"jsonrpc",
											"method",
											"params"
										],
										"required": [
											"id",
											"jsonrpc",
											"method",
											"params"
										]
									}
								},
								"header": {
									"parameter": [
										{
											"is_checked": "1",
											"type": "Text",
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"not_null": "-1",
											"description": "",
											"field_type": "Text"
										}
									]
								}
							},
							"response": {
								"success": {
									"raw": "{\n    \"id\": 326,\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"response\": {\n            \"responseCode\": 0\n        }\n    }\n}",
									"parameter": [],
									"expect": {
										"name": "OK",
										"isDefault": 1,
										"code": 200,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object",
											"properties": {
												"id": {
													"type": "integer"
												},
												"jsonrpc": {
													"type": "string"
												},
												"result": {
													"type": "object",
													"properties": {
														"response": {
															"type": "object",
															"properties": {
																"responseCode": {
																	"type": "integer"
																},
																"aboutString": {
																	"type": "string"
																}
															},
															"required": [
																"responseCode"
															],
															"APIPOST_ORDERS": [
																"responseCode",
																"aboutString"
															]
														}
													},
													"required": [
														"response"
													],
													"APIPOST_ORDERS": [
														"response"
													]
												}
											},
											"required": [
												"id",
												"jsonrpc",
												"result"
											],
											"APIPOST_ORDERS": [
												"id",
												"jsonrpc",
												"result"
											]
										}
									}
								},
								"error": {
									"raw": "",
									"parameter": [],
									"expect": {
										"name": "失败",
										"isDefault": -1,
										"code": 404,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object"
										}
									}
								}
							},
							"children": []
						},
						{
							"target_type": "api",
							"name": "clientLocalizationReset",
							"mark": "complated",
							"sort": 1,
							"tags": [],
							"created_uuid": "",
							"method": "POST",
							"mock": "{}",
							"mock_url": "",
							"request": {
								"url": "",
								"description": "",
								"event": {
									"pre_script": "",
									"test": ""
								},
								"pre_tasks": [],
								"post_tasks": [],
								"body": {
									"mode": "json",
									"parameter": [],
									"raw": "{\n\t\"id\": 513422561795539,\n\t\"jsonrpc\": \"2.0\",\n\t\"method\": \"clientLocalizationReset\",\n\t\"params\": {\n\t\t\"query\": {\n\t\t\t\"sessionId\": \"{{sessionId}}\"\n\t\t}\n\t}\n}",
									"raw_para": [],
									"raw_schema": {
										"type": "object",
										"properties": {
											"id": {
												"type": "integer"
											},
											"jsonrpc": {
												"type": "string",
												"mock": {
													"mock": "2.0"
												}
											},
											"method": {
												"type": "string",
												"mock": {
													"mock": "clientLocalizationReset"
												}
											},
											"params": {
												"type": "object",
												"properties": {
													"query": {
														"type": "object",
														"properties": {
															"sessionId": {
																"type": "string",
																"mock": {
																	"mock": "{{sessionId}}"
																}
															}
														},
														"APIPOST_ORDERS": [
															"sessionId"
														],
														"required": [
															"sessionId"
														]
													}
												},
												"APIPOST_ORDERS": [
													"query"
												],
												"required": [
													"query"
												]
											}
										},
										"APIPOST_ORDERS": [
											"id",
											"jsonrpc",
											"method",
											"params"
										],
										"required": [
											"id",
											"jsonrpc",
											"method",
											"params"
										]
									}
								},
								"header": {
									"parameter": [
										{
											"is_checked": "1",
											"type": "Text",
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"not_null": "-1",
											"description": "",
											"field_type": "Text"
										}
									]
								}
							},
							"response": {
								"success": {
									"raw": "{\n    \"id\": 326,\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"response\": {\n            \"responseCode\": 0\n        }\n    }\n}",
									"parameter": [],
									"expect": {
										"name": "OK",
										"isDefault": 1,
										"code": 200,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object",
											"properties": {
												"id": {
													"type": "integer"
												},
												"jsonrpc": {
													"type": "string"
												},
												"result": {
													"type": "object",
													"properties": {
														"response": {
															"type": "object",
															"properties": {
																"responseCode": {
																	"type": "integer"
																},
																"aboutString": {
																	"type": "string"
																}
															},
															"required": [
																"responseCode"
															],
															"APIPOST_ORDERS": [
																"responseCode",
																"aboutString"
															]
														}
													},
													"required": [
														"response"
													],
													"APIPOST_ORDERS": [
														"response"
													]
												}
											},
											"required": [
												"id",
												"jsonrpc",
												"result"
											],
											"APIPOST_ORDERS": [
												"id",
												"jsonrpc",
												"result"
											]
										}
									}
								},
								"error": {
									"raw": "",
									"parameter": [],
									"expect": {
										"name": "失败",
										"isDefault": -1,
										"code": 404,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object"
										}
									}
								},
								"c346c917-c942-4e16-90ef-5d0d5662338f": {
									"expect": {
										"name": "7",
										"isDefault": -1,
										"code": "200",
										"contentType": "json",
										"schema": "",
										"mock": "",
										"verifyType": "schema"
									},
									"raw": "{\n\t\"id\": -3671714655571896,\n\t\"jsonrpc\": \"2.0\",\n\t\"result\": {\n\t\t\"response\": {\n\t\t\t\"responseCode\": 7\n\t\t}\n\t}\n}",
									"parameter": []
								}
							},
							"children": []
						}
					]
				},
				{
					"target_type": "folder",
					"name": "ClientGlobalAlign",
					"mark": "developing",
					"sort": 1,
					"tags": [],
					"created_uuid": "",
					"request": {
						"description": ""
					},
					"children": [
						{
							"target_type": "api",
							"name": "clientManualAlignSet",
							"mark": "developing",
							"sort": 1,
							"tags": [],
							"created_uuid": "",
							"method": "POST",
							"mock": "{}",
							"mock_url": "",
							"request": {
								"url": "",
								"description": "Manually aligns a map, transforming it into the given reference frame. The aligned map is\nstored under a new name, which is returned in the response to this API method.\nNote that the distance by which a map can be shifted through this method is restricted. This\nlimitation is required to maintain the precision of the map when using a ﬂoating-point rep-\nresentation. In particular, maps may not be shifted by absolute values of more than 10,000\nmeters along each axis. Additionally, the user should ensure that the alignment does not re-\nsult in a map with coordinates that exceed 100,000 meters along either axis. This issue can\narise if a user performs repeated calls to clientManualAlignSet that shift a given map by a very\nlarge distance.\nManual map alignment mode needs to be started using clientManualAlignStart beforehand.\nThis call will not automatically stop manual map aligment mode. Use clientManualAlignStop\nto do so if required.",
								"event": {
									"pre_script": "",
									"test": ""
								},
								"pre_tasks": [],
								"post_tasks": [],
								"body": {
									"mode": "json",
									"parameter": [],
									"raw": "{\"0\":\"s\",\"1\":\"e\",\"2\":\"s\",\"3\":\"s\",\"4\":\"i\",\"5\":\"o\",\"6\":\"n\",\"7\":\"L\",\"8\":\"o\",\"9\":\"g\",\"10\":\"i\",\"11\":\"n\",\"query\":{\"timeout\":{\"valid\":true,\"time\":1663372036854775800,\"resolution\":1},\"userName\":\"admin\",\"password\":\"bbZGs3wFsB35\"}}",
									"raw_para": [],
									"raw_schema": {
										"type": "object",
										"properties": {
											"id": {
												"type": "integer"
											},
											"jsonrpc": {
												"type": "string",
												"mock": {
													"mock": "2.0"
												}
											},
											"method": {
												"type": "string",
												"mock": {
													"mock": "clientManualAlignSet"
												}
											},
											"params": {
												"type": "object",
												"properties": {
													"query": {
														"type": "object",
														"properties": {
															"sessionId": {
																"type": "string",
																"mock": {
																	"mock": "{{sessionId}}"
																}
															},
															"NEWalignOLD": {
																"ref": "c11b0581-908c-4cff-8554-bf778b059d3f"
															},
															"clientMapName": {
																"ref": "4e274b15-c8c1-445c-b99e-4b178d224674"
															}
														},
														"APIPOST_ORDERS": [
															"sessionId",
															"NEWalignOLD",
															"clientMapName"
														],
														"required": [
															"sessionId",
															"NEWalignOLD",
															"clientMapName"
														]
													}
												},
												"APIPOST_ORDERS": [
													"query"
												],
												"required": [
													"query"
												]
											}
										},
										"APIPOST_ORDERS": [
											"id",
											"jsonrpc",
											"method",
											"params"
										],
										"required": [
											"id",
											"jsonrpc",
											"method",
											"params"
										]
									}
								},
								"header": {
									"parameter": [
										{
											"is_checked": "1",
											"type": "Text",
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"not_null": "-1",
											"description": "",
											"field_type": "Text"
										}
									]
								}
							},
							"response": {
								"success": {
									"raw": "{\n    \"id\": 326,\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"response\": {\n            \"responseCode\": 0\n        }\n    }\n}",
									"parameter": [],
									"expect": {
										"name": "OK",
										"isDefault": 1,
										"code": 200,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object",
											"properties": {
												"id": {
													"type": "integer"
												},
												"jsonrpc": {
													"type": "string"
												},
												"result": {
													"type": "object",
													"properties": {
														"response": {
															"type": "object",
															"properties": {
																"responseCode": {
																	"type": "integer"
																},
																"aboutString": {
																	"type": "string"
																}
															},
															"required": [
																"responseCode"
															],
															"APIPOST_ORDERS": [
																"responseCode",
																"aboutString"
															]
														}
													},
													"required": [
														"response"
													],
													"APIPOST_ORDERS": [
														"response"
													]
												}
											},
											"required": [
												"id",
												"jsonrpc",
												"result"
											],
											"APIPOST_ORDERS": [
												"id",
												"jsonrpc",
												"result"
											]
										}
									}
								},
								"error": {
									"raw": "",
									"parameter": [],
									"expect": {
										"name": "失败",
										"isDefault": -1,
										"code": 404,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object"
										}
									}
								}
							},
							"children": []
						},
						{
							"target_type": "api",
							"name": "clientGlobalAlignAddObservation",
							"mark": "developing",
							"sort": 1,
							"tags": [],
							"created_uuid": "",
							"method": "POST",
							"mock": "{}",
							"mock_url": "",
							"request": {
								"url": "",
								"description": "",
								"event": {
									"pre_script": "",
									"test": ""
								},
								"pre_tasks": [],
								"post_tasks": [],
								"body": {
									"mode": "json",
									"parameter": [],
									"raw": "{\n\t\"id\": 1088775963936795,\n\t\"jsonrpc\": \"2.0\",\n\t\"method\": \"clientGlobalAlignAddObservation\",\n\t\"params\": {\n\t\t\"query\": {\n\t\t\t\"sessionId\": \"{{sessionId}}\",\n\t\t\t\"observation\": {\n\t\t\t\t\"landmarkName\": \"压素院\"\n\t\t\t}\n\t\t}\n\t}\n}",
									"raw_para": [],
									"raw_schema": {
										"type": "object",
										"properties": {
											"id": {
												"type": "integer"
											},
											"jsonrpc": {
												"type": "string",
												"mock": {
													"mock": "2.0"
												}
											},
											"method": {
												"type": "string",
												"mock": {
													"mock": "clientGlobalAlignAddObservation"
												}
											},
											"params": {
												"type": "object",
												"properties": {
													"query": {
														"type": "object",
														"properties": {
															"sessionId": {
																"type": "string",
																"mock": {
																	"mock": "{{sessionId}}"
																}
															},
															"observation": {
																"type": "object",
																"properties": {
																	"landmarkName": {
																		"x-tmp-pending-properties": true,
																		"type": "string"
																	}
																},
																"APIPOST_ORDERS": [
																	"landmarkName"
																],
																"required": [
																	"landmarkName"
																]
															}
														},
														"APIPOST_ORDERS": [
															"sessionId",
															"observation"
														],
														"required": [
															"sessionId",
															"observation"
														]
													}
												},
												"APIPOST_ORDERS": [
													"query"
												],
												"required": [
													"query"
												]
											}
										},
										"APIPOST_ORDERS": [
											"id",
											"jsonrpc",
											"method",
											"params"
										],
										"required": [
											"id",
											"jsonrpc",
											"method",
											"params"
										]
									}
								},
								"header": {
									"parameter": [
										{
											"is_checked": "1",
											"type": "Text",
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"not_null": "-1",
											"description": "",
											"field_type": "Text"
										}
									]
								}
							},
							"response": {
								"success": {
									"raw": "{\n    \"id\": 326,\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"response\": {\n            \"responseCode\": 0\n        }\n    }\n}",
									"parameter": [],
									"expect": {
										"name": "OK",
										"isDefault": 1,
										"code": 200,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object",
											"properties": {
												"id": {
													"type": "integer"
												},
												"jsonrpc": {
													"type": "string"
												},
												"result": {
													"type": "object",
													"properties": {
														"response": {
															"type": "object",
															"properties": {
																"responseCode": {
																	"type": "integer"
																},
																"aboutString": {
																	"type": "string"
																}
															},
															"required": [
																"responseCode"
															],
															"APIPOST_ORDERS": [
																"responseCode",
																"aboutString"
															]
														}
													},
													"required": [
														"response"
													],
													"APIPOST_ORDERS": [
														"response"
													]
												}
											},
											"required": [
												"id",
												"jsonrpc",
												"result"
											],
											"APIPOST_ORDERS": [
												"id",
												"jsonrpc",
												"result"
											]
										}
									}
								},
								"error": {
									"raw": "",
									"parameter": [],
									"expect": {
										"name": "失败",
										"isDefault": -1,
										"code": 404,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object"
										}
									}
								}
							},
							"children": []
						},
						{
							"target_type": "api",
							"name": "clientManualAlignGetMap",
							"mark": "developing",
							"sort": 1,
							"tags": [],
							"created_uuid": "",
							"method": "POST",
							"mock": "{}",
							"mock_url": "",
							"request": {
								"url": "",
								"description": "",
								"event": {
									"pre_script": "",
									"test": ""
								},
								"pre_tasks": [],
								"post_tasks": [],
								"body": {
									"mode": "json",
									"parameter": [],
									"raw": "{\"0\":\"s\",\"1\":\"e\",\"2\":\"s\",\"3\":\"s\",\"4\":\"i\",\"5\":\"o\",\"6\":\"n\",\"7\":\"L\",\"8\":\"o\",\"9\":\"g\",\"10\":\"i\",\"11\":\"n\",\"query\":{\"timeout\":{\"valid\":true,\"time\":1663372036854775800,\"resolution\":1},\"userName\":\"admin\",\"password\":\"bbZGs3wFsB35\"}}",
									"raw_para": [],
									"raw_schema": {
										"type": "object",
										"properties": {
											"id": {
												"type": "integer"
											},
											"jsonrpc": {
												"type": "string",
												"mock": {
													"mock": "2.0"
												}
											},
											"method": {
												"type": "string",
												"mock": {
													"mock": "clientManualAlignGetMap"
												}
											},
											"params": {
												"type": "object",
												"properties": {
													"query": {
														"type": "object",
														"properties": {
															"sessionId": {
																"type": "string",
																"mock": {
																	"mock": "{{sessionId}}"
																}
															},
															"clientMapName": {
																"ref": "4e274b15-c8c1-445c-b99e-4b178d224674"
															},
															"mapLevel": {
																"ref": "0ef8ff4f-f460-4985-98ac-a2f24daf6b39"
															}
														},
														"APIPOST_ORDERS": [
															"sessionId",
															"clientMapName",
															"mapLevel"
														],
														"required": [
															"sessionId",
															"clientMapName",
															"mapLevel"
														]
													}
												},
												"APIPOST_ORDERS": [
													"query"
												],
												"required": [
													"query"
												]
											}
										},
										"APIPOST_ORDERS": [
											"id",
											"jsonrpc",
											"method",
											"params"
										],
										"required": [
											"id",
											"jsonrpc",
											"method",
											"params"
										]
									}
								},
								"header": {
									"parameter": [
										{
											"is_checked": "1",
											"type": "Text",
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"not_null": "-1",
											"description": "",
											"field_type": "Text"
										}
									]
								}
							},
							"response": {
								"success": {
									"raw": "{\n    \"id\": 326,\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"response\": {\n            \"responseCode\": 0\n        }\n    }\n}",
									"parameter": [],
									"expect": {
										"name": "OK",
										"isDefault": 1,
										"code": 200,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object",
											"properties": {
												"id": {
													"type": "integer"
												},
												"jsonrpc": {
													"type": "string"
												},
												"result": {
													"type": "object",
													"properties": {
														"response": {
															"type": "object",
															"properties": {
																"responseCode": {
																	"type": "integer"
																},
																"aboutString": {
																	"type": "string"
																}
															},
															"required": [
																"responseCode"
															],
															"APIPOST_ORDERS": [
																"responseCode",
																"aboutString"
															]
														}
													},
													"required": [
														"response"
													],
													"APIPOST_ORDERS": [
														"response"
													]
												}
											},
											"required": [
												"id",
												"jsonrpc",
												"result"
											],
											"APIPOST_ORDERS": [
												"id",
												"jsonrpc",
												"result"
											]
										}
									}
								},
								"error": {
									"raw": "",
									"parameter": [],
									"expect": {
										"name": "失败",
										"isDefault": -1,
										"code": 404,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object"
										}
									}
								}
							},
							"children": []
						},
						{
							"target_type": "api",
							"name": "clientGlobalAlignReplaceObservations",
							"mark": "developing",
							"sort": 1,
							"tags": [],
							"created_uuid": "",
							"method": "POST",
							"mock": "{}",
							"mock_url": "",
							"request": {
								"url": "",
								"description": "",
								"event": {
									"pre_script": "",
									"test": ""
								},
								"pre_tasks": [],
								"post_tasks": [],
								"body": {
									"mode": "json",
									"parameter": [],
									"raw": "{\"0\":\"s\",\"1\":\"e\",\"2\":\"s\",\"3\":\"s\",\"4\":\"i\",\"5\":\"o\",\"6\":\"n\",\"7\":\"L\",\"8\":\"o\",\"9\":\"g\",\"10\":\"i\",\"11\":\"n\",\"query\":{\"timeout\":{\"valid\":true,\"time\":1663372036854775800,\"resolution\":1},\"userName\":\"admin\",\"password\":\"bbZGs3wFsB35\"}}",
									"raw_para": [],
									"raw_schema": {
										"type": "object",
										"properties": {
											"id": {
												"type": "integer"
											},
											"jsonrpc": {
												"type": "string",
												"mock": {
													"mock": "2.0"
												}
											},
											"method": {
												"type": "string",
												"mock": {
													"mock": "clientGlobalAlignReplaceObservations"
												}
											},
											"params": {
												"type": "object",
												"properties": {
													"query": {
														"type": "object",
														"properties": {
															"sessionId": {
																"type": "string",
																"mock": {
																	"mock": "{{sessionId}}"
																}
															},
															"recordingName": {
																"ref": "4a915f96-495d-4822-80d7-0052a56223e1"
															},
															"replacementObservations": {
																"type": "array",
																"items": {
																	"ref": "59eeea63-a755-496e-80c8-ed95e9af8c75"
																}
															}
														},
														"APIPOST_ORDERS": [
															"sessionId",
															"recordingName",
															"replacementObservations"
														],
														"required": [
															"sessionId",
															"recordingName",
															"replacementObservations"
														]
													}
												},
												"APIPOST_ORDERS": [
													"query"
												],
												"required": [
													"query"
												]
											}
										},
										"APIPOST_ORDERS": [
											"id",
											"jsonrpc",
											"method",
											"params"
										],
										"required": [
											"id",
											"jsonrpc",
											"method",
											"params"
										]
									}
								},
								"header": {
									"parameter": [
										{
											"is_checked": "1",
											"type": "Text",
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"not_null": "-1",
											"description": "",
											"field_type": "Text"
										}
									]
								}
							},
							"response": {
								"success": {
									"raw": "{\n    \"id\": 326,\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"response\": {\n            \"responseCode\": 0\n        }\n    }\n}",
									"parameter": [],
									"expect": {
										"name": "OK",
										"isDefault": 1,
										"code": 200,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object",
											"properties": {
												"id": {
													"type": "integer"
												},
												"jsonrpc": {
													"type": "string"
												},
												"result": {
													"type": "object",
													"properties": {
														"response": {
															"type": "object",
															"properties": {
																"responseCode": {
																	"type": "integer"
																},
																"aboutString": {
																	"type": "string"
																}
															},
															"required": [
																"responseCode"
															],
															"APIPOST_ORDERS": [
																"responseCode",
																"aboutString"
															]
														}
													},
													"required": [
														"response"
													],
													"APIPOST_ORDERS": [
														"response"
													]
												}
											},
											"required": [
												"id",
												"jsonrpc",
												"result"
											],
											"APIPOST_ORDERS": [
												"id",
												"jsonrpc",
												"result"
											]
										}
									}
								},
								"error": {
									"raw": "",
									"parameter": [],
									"expect": {
										"name": "失败",
										"isDefault": -1,
										"code": 404,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object"
										}
									}
								}
							},
							"children": []
						}
					]
				}
			]
		},
		{
			"target_type": "folder",
			"name": "9 Rexroth ROKIT Locator Server – RPC Methods",
			"mark": "developing",
			"sort": 2,
			"tags": [],
			"created_uuid": "UBAPH1393C43",
			"request": {
				"description": ""
			},
			"children": [
				{
					"target_type": "api",
					"name": "9.1.1 serverMapGetInfo",
					"mark": "complated",
					"sort": 1,
					"tags": [],
					"created_uuid": "UBAPH1393C43",
					"method": "POST",
					"mock": "{}",
					"mock_url": "",
					"request": {
						"url": "",
						"description": "",
						"event": {
							"pre_script": "apt.environment.get(\"sessionIdServer\");\napt.setRequestQuery(\"key\", \"value\");",
							"test": ""
						},
						"pre_tasks": [],
						"post_tasks": [],
						"body": {
							"mode": "json",
							"parameter": [],
							"raw": "{\n\t\"id\": 322,\n\t\"jsonrpc\": \"2.0\",\n\t\"method\": \"serverMapGetInfo\",\n\t\"params\": {\n\t\t\"query\": {\n\t\t\t\"sessionId\": \"{{sessionId}}\",\n\t\t\t\"serverMapName\": \"m_2023-07-31_10-50-57_built_001_aligned_001\"\n\t\t}\n\t}\n}",
							"raw_para": [],
							"raw_schema": {
								"type": "object",
								"properties": {
									"id": {
										"type": "integer"
									},
									"jsonrpc": {
										"type": "string",
										"mock": {
											"mock": "2.0"
										}
									},
									"method": {
										"type": "string",
										"mock": {
											"mock": "serverMapGetInfo"
										}
									},
									"params": {
										"type": "object",
										"properties": {
											"query": {
												"type": "object",
												"properties": {
													"sessionId": {
														"type": "string",
														"mock": {
															"mock": "{{sessionId}}"
														}
													},
													"serverMapName": {
														"type": "string",
														"mock": {
															"mock": ""
														}
													}
												},
												"APIPOST_ORDERS": [
													"sessionId",
													"serverMapName"
												],
												"required": [
													"sessionId",
													"serverMapName"
												]
											}
										},
										"APIPOST_ORDERS": [
											"query"
										],
										"required": [
											"query"
										]
									}
								},
								"APIPOST_ORDERS": [
									"id",
									"jsonrpc",
									"method",
									"params"
								],
								"required": [
									"id",
									"jsonrpc",
									"method",
									"params"
								]
							}
						},
						"header": {
							"parameter": [
								{
									"is_checked": "1",
									"type": "Text",
									"key": "Content-Type",
									"value": "application/json; charset=utf-8",
									"not_null": "-1",
									"description": "",
									"field_type": "Text"
								}
							]
						}
					},
					"response": {
						"success": {
							"raw": "{\n\t\"id\": 322,\n\t\"jsonrpc\": \"2.0\",\n\t\"result\": {\n\t\t\"response\": {\n\t\t\t\"createdAt\": {\n\t\t\t\t\"resolution\": 1000000,\n\t\t\t\t\"time\": 1690771870701629,\n\t\t\t\t\"valid\": true\n\t\t\t},\n\t\t\t\"fingerprint\": -6210283180575599616,\n\t\t\t\"level\": 0,\n\t\t\t\"loaded\": true,\n\t\t\t\"receivedAt\": {\n\t\t\t\t\"resolution\": 1000000,\n\t\t\t\t\"time\": 1690771950523185,\n\t\t\t\t\"valid\": true\n\t\t\t},\n\t\t\t\"responseCode\": 0,\n\t\t\t\"sentAt\": {\n\t\t\t\t\"resolution\": 1,\n\t\t\t\t\"time\": 0,\n\t\t\t\t\"valid\": false\n\t\t\t},\n\t\t\t\"type\": 0,\n\t\t\t\"updatedAt\": {\n\t\t\t\t\"resolution\": 1,\n\t\t\t\t\"time\": 0,\n\t\t\t\t\"valid\": false\n\t\t\t}\n\t\t}\n\t}\n}",
							"parameter": [],
							"expect": {
								"name": "OK",
								"isDefault": 1,
								"code": 200,
								"contentType": "json",
								"verifyType": "schema",
								"mock": "",
								"schema": {
									"type": "object",
									"properties": {
										"id": {
											"type": "integer"
										},
										"jsonrpc": {
											"type": "string"
										},
										"result": {
											"type": "object",
											"properties": {
												"response": {
													"type": "object",
													"properties": {
														"responseCode": {
															"type": "integer"
														},
														"aboutString": {
															"type": "string"
														}
													},
													"required": [
														"responseCode"
													],
													"APIPOST_ORDERS": [
														"responseCode",
														"aboutString"
													]
												}
											},
											"required": [
												"response"
											],
											"APIPOST_ORDERS": [
												"response"
											]
										}
									},
									"required": [
										"id",
										"jsonrpc",
										"result"
									],
									"APIPOST_ORDERS": [
										"id",
										"jsonrpc",
										"result"
									]
								}
							}
						},
						"error": {
							"raw": "",
							"parameter": [],
							"expect": {
								"name": "失败",
								"isDefault": -1,
								"code": 404,
								"contentType": "json",
								"verifyType": "schema",
								"mock": "",
								"schema": {
									"type": "object"
								}
							}
						}
					},
					"children": []
				},
				{
					"target_type": "api",
					"name": "serverMapGetMapThumbnail",
					"mark": "developing",
					"sort": 7,
					"tags": [],
					"created_uuid": "UBAPH1393C43",
					"method": "POST",
					"mock": "{}",
					"mock_url": "",
					"request": {
						"url": "",
						"description": "",
						"event": {
							"pre_script": "",
							"test": ""
						},
						"pre_tasks": [],
						"post_tasks": [],
						"body": {
							"mode": "json",
							"parameter": [],
							"raw": "{\n\t\"id\": 6628131655106699,\n\t\"jsonrpc\": \"2.0\",\n\t\"method\": \"serverMapGetMapThumbnail\",\n\t\"params\": {\n\t\t\"query\": {\n\t\t\t\"sessionId\": \"{{sessiionId}}\",\n\t\t\t\"mapLevel\":20,\n\t\t\t\"serverMapName\": \"map\"\n\t\t}\n\t}\n}",
							"raw_para": [],
							"raw_schema": {
								"type": "object",
								"properties": {
									"id": {
										"type": "number",
										"mock": {
											"mock": ""
										}
									},
									"jsonrpc": {
										"type": "string",
										"mock": {
											"mock": "2.0"
										}
									},
									"method": {
										"type": "string",
										"mock": {
											"mock": "serverMapGetMapThumbnail"
										}
									},
									"params": {
										"type": "object",
										"properties": {
											"query": {
												"type": "object",
												"properties": {
													"sessionId": {
														"type": "string",
														"mock": {
															"mock": "{{sessiionId}}"
														}
													},
													"mapLevel": {
														"type": "integer"
													},
													"serverMapName": {
														"type": "string",
														"mock": {
															"mock": "map"
														}
													}
												},
												"APIPOST_ORDERS": [
													"sessionId",
													"mapLevel",
													"serverMapName"
												],
												"required": [
													"sessionId",
													"serverMapName"
												]
											}
										},
										"APIPOST_ORDERS": [
											"query"
										],
										"required": [
											"query"
										]
									}
								},
								"APIPOST_ORDERS": [
									"id",
									"jsonrpc",
									"method",
									"params"
								],
								"required": [
									"id",
									"jsonrpc",
									"method",
									"params"
								]
							}
						},
						"header": {
							"parameter": [
								{
									"is_checked": "1",
									"type": "Text",
									"key": "Content-Type",
									"value": "application/json; charset=utf-8",
									"not_null": "-1",
									"description": "",
									"field_type": "Text"
								}
							]
						}
					},
					"response": {
						"success": {
							"raw": "{\n    \"id\": 326,\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"response\": {\n            \"responseCode\": 0\n        }\n    }\n}",
							"parameter": [],
							"expect": {
								"name": "OK",
								"isDefault": 1,
								"code": 200,
								"contentType": "json",
								"verifyType": "schema",
								"mock": "",
								"schema": {
									"type": "object",
									"properties": {
										"id": {
											"type": "integer"
										},
										"jsonrpc": {
											"type": "string"
										},
										"result": {
											"type": "object",
											"properties": {
												"response": {
													"type": "object",
													"properties": {
														"responseCode": {
															"type": "integer"
														},
														"aboutString": {
															"type": "string"
														}
													},
													"required": [
														"responseCode"
													],
													"APIPOST_ORDERS": [
														"responseCode",
														"aboutString"
													]
												}
											},
											"required": [
												"response"
											],
											"APIPOST_ORDERS": [
												"response"
											]
										}
									},
									"required": [
										"id",
										"jsonrpc",
										"result"
									],
									"APIPOST_ORDERS": [
										"id",
										"jsonrpc",
										"result"
									]
								}
							}
						},
						"error": {
							"raw": "",
							"parameter": [],
							"expect": {
								"name": "失败",
								"isDefault": -1,
								"code": 404,
								"contentType": "json",
								"verifyType": "schema",
								"mock": "",
								"schema": {
									"type": "object"
								}
							}
						}
					},
					"children": []
				},
				{
					"target_type": "api",
					"name": "9.1.2 serverMapList",
					"mark": "complated",
					"sort": 1,
					"tags": [],
					"created_uuid": "UBAPH1393C43",
					"method": "POST",
					"mock": "{}",
					"mock_url": "",
					"request": {
						"url": "",
						"description": "",
						"event": {
							"pre_script": "// console.log(apt.environment.get(\"sessionId\"));\n// request.params.querry.sessionId= apt.environment.get(\"sessionId\");\n// apt.setRequestBody({\n//     \"params\": {\n//         \"query\": {\n//             \"sessionId\": apt.environment.get(\"sessionId\")\n//         }\n//     });\n// // apt.environment.getPreUrl();\n// apt.setRequestBody({\"key\": \"value\"});\n// apt.setRequestBody(\"key\", \"value\");",
							"test": ""
						},
						"pre_tasks": [],
						"post_tasks": [],
						"body": {
							"mode": "json",
							"parameter": [],
							"raw": "{\n\t\"id\": -7037184605821487,\n\t\"jsonrpc\": \"2.0\",\n\t\"method\": \"serverMapList\",\n\t\"params\": {\n\t\t\"query\": {\n\t\t\t\"sessionId\": \"{{sessionId}}\"\n\t\t}\n\t}\n}",
							"raw_para": [],
							"raw_schema": {
								"type": "object",
								"properties": {
									"id": {
										"type": "integer"
									},
									"jsonrpc": {
										"type": "string",
										"mock": {
											"mock": "2.0"
										}
									},
									"method": {
										"type": "string",
										"mock": {
											"mock": "serverMapList"
										}
									},
									"params": {
										"type": "object",
										"properties": {
											"query": {
												"type": "object",
												"properties": {
													"sessionId": {
														"type": "string",
														"mock": {
															"mock": "{{sessionId}}"
														}
													}
												},
												"APIPOST_ORDERS": [
													"sessionId"
												],
												"required": [
													"sessionId"
												]
											}
										},
										"APIPOST_ORDERS": [
											"query"
										],
										"required": [
											"query"
										]
									}
								},
								"APIPOST_ORDERS": [
									"id",
									"jsonrpc",
									"method",
									"params"
								],
								"required": [
									"id",
									"jsonrpc",
									"method",
									"params"
								]
							}
						},
						"header": {
							"parameter": [
								{
									"is_checked": "1",
									"type": "Text",
									"key": "Content-Type",
									"value": "application/json; charset=utf-8",
									"not_null": "-1",
									"description": "",
									"field_type": "Text"
								}
							]
						}
					},
					"response": {
						"success": {
							"raw": "{\n\t\"id\": -7037184605821487,\n\t\"jsonrpc\": \"2.0\",\n\t\"result\": {\n\t\t\"response\": {\n\t\t\t\"responseCode\": 0,\n\t\t\t\"serverMapNames\": [\n\t\t\t\t\"m_2023-07-31_10-50-57_built_001_aligned_001\"\n\t\t\t]\n\t\t}\n\t}\n}",
							"parameter": [],
							"expect": {
								"name": "OK",
								"isDefault": 1,
								"code": 200,
								"contentType": "json",
								"verifyType": "schema",
								"mock": "",
								"schema": {
									"type": "object",
									"properties": {
										"id": {
											"type": "integer"
										},
										"jsonrpc": {
											"type": "string"
										},
										"result": {
											"type": "object",
											"properties": {
												"response": {
													"type": "object",
													"properties": {
														"responseCode": {
															"type": "integer"
														},
														"aboutString": {
															"type": "string"
														}
													},
													"required": [
														"responseCode"
													],
													"APIPOST_ORDERS": [
														"responseCode",
														"aboutString"
													]
												}
											},
											"required": [
												"response"
											],
											"APIPOST_ORDERS": [
												"response"
											]
										}
									},
									"required": [
										"id",
										"jsonrpc",
										"result"
									],
									"APIPOST_ORDERS": [
										"id",
										"jsonrpc",
										"result"
									]
								}
							}
						},
						"error": {
							"raw": "",
							"parameter": [],
							"expect": {
								"name": "失败",
								"isDefault": -1,
								"code": 404,
								"contentType": "json",
								"verifyType": "schema",
								"mock": "",
								"schema": {
									"type": "object"
								}
							}
						}
					},
					"children": []
				},
				{
					"target_type": "api",
					"name": "9.1.5 serverMapGetMap",
					"mark": "complated",
					"sort": 4,
					"tags": [],
					"created_uuid": "UBAPH1393C43",
					"method": "POST",
					"mock": "{}",
					"mock_url": "",
					"request": {
						"url": "",
						"description": "",
						"event": {
							"pre_script": "",
							"test": ""
						},
						"pre_tasks": [],
						"post_tasks": [],
						"body": {
							"mode": "json",
							"parameter": [],
							"raw": "{\n\t\"id\": 4711199664107743,\n\t\"jsonrpc\": \"2.0\",\n\t\"method\": \"serverMapGetMap\",\n\t\"params\": {\n\t\t\"query\": {\n\t\t\t\"sessionId\": \"{{sessionId}}\",\n\t\t\t\"serverMapName\": \"m_2023-07-31_10-50-57_built_001_aligned_001\"\n\t\t}\n\t}\n}",
							"raw_para": [],
							"raw_schema": {
								"type": "object",
								"properties": {
									"id": {
										"type": "number",
										"mock": {
											"mock": ""
										}
									},
									"jsonrpc": {
										"type": "string",
										"mock": {
											"mock": "2.0"
										}
									},
									"method": {
										"type": "string",
										"mock": {
											"mock": "serverMapGetMap"
										}
									},
									"params": {
										"type": "object",
										"properties": {
											"query": {
												"type": "object",
												"properties": {
													"sessionId": {
														"type": "string",
														"mock": {
															"mock": "{{sessionId}}"
														}
													},
													"serverMapName": {
														"type": "string"
													}
												},
												"APIPOST_ORDERS": [
													"sessionId",
													"serverMapName"
												],
												"required": [
													"sessionId",
													"serverMapName"
												]
											}
										},
										"APIPOST_ORDERS": [
											"query"
										],
										"required": [
											"query"
										]
									}
								},
								"APIPOST_ORDERS": [
									"id",
									"jsonrpc",
									"method",
									"params"
								],
								"required": [
									"id",
									"jsonrpc",
									"method",
									"params"
								]
							}
						},
						"header": {
							"parameter": [
								{
									"is_checked": "1",
									"type": "Text",
									"key": "Content-Type",
									"value": "application/json; charset=utf-8",
									"not_null": "-1",
									"description": "",
									"field_type": "Text"
								}
							]
						}
					},
					"response": {
						"success": {
							"raw": "{\n\t\"id\": 4711199664107743,\n\t\"jsonrpc\": \"2.0\",\n\t\"result\": {\n\t\t\"response\": {\n\t\t\t\"pointCloud\": {\n\t\t\t\t\"content\": \"\",\n\t\t\t\t\"contentEncoding\": \"base64\",\n\t\t\t\t\"contentMediaType\": \"application/PointCloud2D\"\n\t\t\t},\n\t\t\t\"pointCloudSize\": 7003,\n\t\t\t\"reflectors\": [\n\t\t\t\t{\n\t\t\t\t\t\"fromIndex\": 6975,\n\t\t\t\t\t\"prototype\": {\n\t\t\t\t\t\t\"a\": 2.1665839870744428,\n\t\t\t\t\t\t\"x\": 1.3921338319778442,\n\t\t\t\t\t\t\"y\": -3.4899227619171143\n\t\t\t\t\t},\n\t\t\t\t\t\"toIndex\": 6975\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"fromIndex\": 6976,\n\t\t\t\t\t\"prototype\": {\n\t\t\t\t\t\t\"a\": -2.550298961000987,\n\t\t\t\t\t\t\"x\": 0.29729586839675903,\n\t\t\t\t\t\t\"y\": 2.0929341316223145\n\t\t\t\t\t},\n\t\t\t\t\t\"toIndex\": 6976\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"fromIndex\": 6977,\n\t\t\t\t\t\"prototype\": {\n\t\t\t\t\t\t\"a\": 2.9625650515132627,\n\t\t\t\t\t\t\"x\": 0.8249742984771729,\n\t\t\t\t\t\t\"y\": 2.279237985610962\n\t\t\t\t\t},\n\t\t\t\t\t\"toIndex\": 6977\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"fromIndex\": 6978,\n\t\t\t\t\t\"prototype\": {\n\t\t\t\t\t\t\"a\": 1.2605784257226667,\n\t\t\t\t\t\t\"x\": -1.8450111150741577,\n\t\t\t\t\t\t\"y\": 1.8034504652023315\n\t\t\t\t\t},\n\t\t\t\t\t\"toIndex\": 6980\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"fromIndex\": 6981,\n\t\t\t\t\t\"prototype\": {\n\t\t\t\t\t\t\"a\": 1.4483131488137921,\n\t\t\t\t\t\t\"x\": -2.072601556777954,\n\t\t\t\t\t\t\"y\": 0.727776288986206\n\t\t\t\t\t},\n\t\t\t\t\t\"toIndex\": 6993\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"fromIndex\": 6994,\n\t\t\t\t\t\"prototype\": {\n\t\t\t\t\t\t\"a\": 1.4045187552743634,\n\t\t\t\t\t\t\"x\": -1.8190561532974243,\n\t\t\t\t\t\t\"y\": 1.3928327560424805\n\t\t\t\t\t},\n\t\t\t\t\t\"toIndex\": 6997\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"fromIndex\": 6998,\n\t\t\t\t\t\"prototype\": {\n\t\t\t\t\t\t\"a\": -3.137967864871495,\n\t\t\t\t\t\t\"x\": 2.2702748775482178,\n\t\t\t\t\t\t\"y\": -2.9007420539855957\n\t\t\t\t\t},\n\t\t\t\t\t\"toIndex\": 6998\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"fromIndex\": 6999,\n\t\t\t\t\t\"prototype\": {\n\t\t\t\t\t\t\"a\": 2.2458090503984174,\n\t\t\t\t\t\t\"x\": 0.46541139483451843,\n\t\t\t\t\t\t\"y\": 1.9364150762557983\n\t\t\t\t\t},\n\t\t\t\t\t\"toIndex\": 7001\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"fromIndex\": 7002,\n\t\t\t\t\t\"prototype\": {\n\t\t\t\t\t\t\"a\": 0.04990330536896792,\n\t\t\t\t\t\t\"x\": -3.0491204261779785,\n\t\t\t\t\t\t\"y\": 1.8674705028533936\n\t\t\t\t\t},\n\t\t\t\t\t\"toIndex\": 7002\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"responseCode\": 0\n\t\t}\n\t}\n}",
							"parameter": [
								{
									"key": "id",
									"value": "4711199664107743",
									"description": "",
									"not_null": 1,
									"field_type": "Integer",
									"type": "Text",
									"is_checked": 1
								},
								{
									"key": "jsonrpc",
									"value": "2.0",
									"description": "",
									"not_null": 1,
									"field_type": "String",
									"type": "Text",
									"is_checked": 1
								},
								{
									"key": "result",
									"value": "",
									"description": "",
									"not_null": 1,
									"field_type": "Object",
									"type": "Text",
									"is_checked": 1
								},
								{
									"key": "result.response",
									"value": "",
									"description": "",
									"not_null": 1,
									"field_type": "Object",
									"type": "Text",
									"is_checked": 1
								},
								{
									"key": "result.response.pointCloud",
									"value": "",
									"description": "",
									"not_null": 1,
									"field_type": "Object",
									"type": "Text",
									"is_checked": 1
								},
								{
									"key": "result.response.pointCloud.content",
									"value": "",
									"description": "",
									"not_null": 1,
									"field_type": "String",
									"type": "Text",
									"is_checked": 1
								},
								{
									"key": "result.response.pointCloud.contentEncoding",
									"value": "base64",
									"description": "",
									"not_null": 1,
									"field_type": "String",
									"type": "Text",
									"is_checked": 1
								},
								{
									"key": "result.response.pointCloud.contentMediaType",
									"value": "application/PointCloud2D",
									"description": "",
									"not_null": 1,
									"field_type": "String",
									"type": "Text",
									"is_checked": 1
								},
								{
									"key": "result.response.pointCloudSize",
									"value": "7003",
									"description": "",
									"not_null": 1,
									"field_type": "Integer",
									"type": "Text",
									"is_checked": 1
								},
								{
									"key": "result.response.reflectors",
									"value": "",
									"description": "",
									"not_null": 1,
									"field_type": "Array",
									"type": "Text",
									"is_checked": 1
								},
								{
									"key": "result.response.reflectors.fromIndex",
									"value": "6975",
									"description": "",
									"not_null": 1,
									"field_type": "Integer",
									"type": "Text",
									"is_checked": 1
								},
								{
									"key": "result.response.reflectors.prototype",
									"value": "",
									"description": "",
									"not_null": 1,
									"field_type": "Object",
									"type": "Text",
									"is_checked": 1
								},
								{
									"key": "result.response.reflectors.prototype.a",
									"value": "2.1665839870744428",
									"description": "",
									"not_null": 1,
									"field_type": "Number",
									"type": "Text",
									"is_checked": 1
								},
								{
									"key": "result.response.reflectors.prototype.x",
									"value": "1.3921338319778442",
									"description": "",
									"not_null": 1,
									"field_type": "Number",
									"type": "Text",
									"is_checked": 1
								},
								{
									"key": "result.response.reflectors.prototype.y",
									"value": "-3.4899227619171143",
									"description": "",
									"not_null": 1,
									"field_type": "Number",
									"type": "Text",
									"is_checked": 1
								},
								{
									"key": "result.response.reflectors.toIndex",
									"value": "6975",
									"description": "",
									"not_null": 1,
									"field_type": "Integer",
									"type": "Text",
									"is_checked": 1
								},
								{
									"key": "result.response.responseCode",
									"value": "0",
									"description": "",
									"not_null": 1,
									"field_type": "Integer",
									"type": "Text",
									"is_checked": 1
								}
							],
							"expect": {
								"name": "OK",
								"isDefault": 1,
								"code": 200,
								"contentType": "json",
								"verifyType": "schema",
								"mock": "",
								"schema": {
									"type": "object",
									"properties": {
										"id": {
											"type": "integer"
										},
										"jsonrpc": {
											"type": "string"
										},
										"result": {
											"type": "object",
											"properties": {
												"response": {
													"type": "object",
													"properties": {
														"responseCode": {
															"type": "integer"
														},
														"aboutString": {
															"type": "string"
														}
													},
													"required": [
														"responseCode"
													],
													"APIPOST_ORDERS": [
														"responseCode",
														"aboutString"
													]
												}
											},
											"required": [
												"response"
											],
											"APIPOST_ORDERS": [
												"response"
											]
										}
									},
									"required": [
										"id",
										"jsonrpc",
										"result"
									],
									"APIPOST_ORDERS": [
										"id",
										"jsonrpc",
										"result"
									]
								}
							}
						},
						"error": {
							"raw": "",
							"parameter": [],
							"expect": {
								"name": "失败",
								"isDefault": -1,
								"code": 404,
								"contentType": "json",
								"verifyType": "schema",
								"mock": "",
								"schema": {
									"type": "object"
								}
							}
						}
					},
					"children": []
				},
				{
					"target_type": "api",
					"name": "serverMapGetImage",
					"mark": "developing",
					"sort": 5,
					"tags": [],
					"created_uuid": "UBAPH1393C43",
					"method": "POST",
					"mock": "{}",
					"mock_url": "",
					"request": {
						"url": "",
						"description": "",
						"event": {
							"pre_script": "",
							"test": ""
						},
						"pre_tasks": [],
						"post_tasks": [],
						"body": {
							"mode": "json",
							"parameter": [],
							"raw": "{\n\t\"id\": -7803064831503295,\n\t\"jsonrpc\": \"2.0\",\n\t\"method\": \"serverMapGetImage\",\n\t\"params\": {\n\t\t\"query\": {\n\t\t\t\"sessionId\": \"{{sessionId}}\",\n\t\t\t\"width\": 11230,\n\t\t\t\"height\": 17979,\n\t\t\t\"level\": 3167329576687287,\n\t\t\t\"serverMapName\": \"解展区易\"\n\t\t}\n\t}\n}",
							"raw_para": [],
							"raw_schema": {
								"type": "object",
								"properties": {
									"id": {
										"type": "number",
										"mock": {
											"mock": ""
										}
									},
									"jsonrpc": {
										"type": "string",
										"mock": {
											"mock": "2.0"
										}
									},
									"method": {
										"type": "string",
										"mock": {
											"mock": "serverMapGetImage"
										}
									},
									"params": {
										"type": "object",
										"properties": {
											"query": {
												"type": "object",
												"properties": {
													"sessionId": {
														"type": "string",
														"mock": {
															"mock": "{{sessionId}}"
														}
													},
													"width": {
														"type": "integer",
														"minimum": 1,
														"maximum": 20000
													},
													"height": {
														"type": "integer",
														"minimum": 1,
														"maximum": 20000
													},
													"level": {
														"type": "integer"
													},
													"serverMapName": {
														"type": "string"
													}
												},
												"APIPOST_ORDERS": [
													"sessionId",
													"width",
													"height",
													"level",
													"serverMapName"
												],
												"required": [
													"sessionId",
													"serverMapName"
												]
											}
										},
										"APIPOST_ORDERS": [
											"query"
										],
										"required": [
											"query"
										]
									}
								},
								"APIPOST_ORDERS": [
									"id",
									"jsonrpc",
									"method",
									"params"
								],
								"required": [
									"id",
									"jsonrpc",
									"method",
									"params"
								]
							}
						},
						"header": {
							"parameter": [
								{
									"is_checked": "1",
									"type": "Text",
									"key": "Content-Type",
									"value": "application/json; charset=utf-8",
									"not_null": "-1",
									"description": "",
									"field_type": "Text"
								}
							]
						}
					},
					"response": {
						"success": {
							"raw": "{\n    \"id\": 326,\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"response\": {\n            \"responseCode\": 0\n        }\n    }\n}",
							"parameter": [],
							"expect": {
								"name": "OK",
								"isDefault": 1,
								"code": 200,
								"contentType": "json",
								"verifyType": "schema",
								"mock": "",
								"schema": {
									"type": "object",
									"properties": {
										"id": {
											"type": "integer"
										},
										"jsonrpc": {
											"type": "string"
										},
										"result": {
											"type": "object",
											"properties": {
												"response": {
													"type": "object",
													"properties": {
														"responseCode": {
															"type": "integer"
														},
														"aboutString": {
															"type": "string"
														}
													},
													"required": [
														"responseCode"
													],
													"APIPOST_ORDERS": [
														"responseCode",
														"aboutString"
													]
												}
											},
											"required": [
												"response"
											],
											"APIPOST_ORDERS": [
												"response"
											]
										}
									},
									"required": [
										"id",
										"jsonrpc",
										"result"
									],
									"APIPOST_ORDERS": [
										"id",
										"jsonrpc",
										"result"
									]
								}
							}
						},
						"error": {
							"raw": "",
							"parameter": [],
							"expect": {
								"name": "失败",
								"isDefault": -1,
								"code": 404,
								"contentType": "json",
								"verifyType": "schema",
								"mock": "",
								"schema": {
									"type": "object"
								}
							}
						}
					},
					"children": []
				},
				{
					"target_type": "api",
					"name": "serverMapGetImageWithResolution",
					"mark": "complated",
					"sort": 6,
					"tags": [],
					"created_uuid": "UBAPH1393C43",
					"method": "POST",
					"mock": "{}",
					"mock_url": "",
					"request": {
						"url": "",
						"description": "",
						"event": {
							"pre_script": "",
							"test": ""
						},
						"pre_tasks": [],
						"post_tasks": [],
						"body": {
							"mode": "json",
							"parameter": [],
							"raw": "{\n\t\"id\": 370959378693411,\n\t\"jsonrpc\": \"2.0\",\n\t\"method\": \"serverMapGetImageWithResolution\",\n\t\"params\": {\n\t\t\"query\": {\n\t\t\t\"sessionId\": \"{{sessionId}}\",\n\t\t\t\"resolution\": 10,\n\t\t\t\"serverMapName\": \"map_name\"\n\t\t}\n\t}\n}",
							"raw_para": [],
							"raw_schema": {
								"type": "object",
								"properties": {
									"id": {
										"type": "number",
										"mock": {
											"mock": ""
										}
									},
									"jsonrpc": {
										"type": "string",
										"mock": {
											"mock": "2.0"
										}
									},
									"method": {
										"type": "string",
										"mock": {
											"mock": "serverMapGetImageWithResolution"
										}
									},
									"params": {
										"type": "object",
										"properties": {
											"query": {
												"type": "object",
												"properties": {
													"sessionId": {
														"type": "string",
														"mock": {
															"mock": "{{sessionId}}"
														}
													},
													"resolution": {
														"type": "number"
													},
													"serverMapName": {
														"type": "string"
													}
												},
												"APIPOST_ORDERS": [
													"sessionId",
													"resolution",
													"serverMapName"
												],
												"required": [
													"sessionId",
													"serverMapName"
												]
											}
										},
										"APIPOST_ORDERS": [
											"query"
										],
										"required": [
											"query"
										]
									}
								},
								"APIPOST_ORDERS": [
									"id",
									"jsonrpc",
									"method",
									"params"
								],
								"required": [
									"id",
									"jsonrpc",
									"method",
									"params"
								]
							}
						},
						"header": {
							"parameter": [
								{
									"is_checked": "1",
									"type": "Text",
									"key": "Content-Type",
									"value": "application/json; charset=utf-8",
									"not_null": "-1",
									"description": "",
									"field_type": "Text"
								}
							]
						}
					},
					"response": {
						"success": {
							"raw": "{\n\t\"id\": 370959378693411,\n\t\"jsonrpc\": \"2.0\",\n\t\"result\": {\n\t\t\"response\": {\n\t\t\t\"MAPimageOrigin\": {\n\t\t\t\t\"a\": 0,\n\t\t\t\t\"x\": -3.114685535430908,\n\t\t\t\t\"y\": -6.950289249420166\n\t\t\t},\n\t\t\t\"height\": 9.699999809265137,\n\t\t\t\"image\": {\n\t\t\t\t\"content\": \"iVBORw0KGgoAAAANSUhEUgAAAoQAAAPECAAAAAAS83VLAAATvklEQVR4nO3d63aiyhqG0aoe6/5vudYP1CgRAgq8pcw59l45dNrY+uTjIJDayoeppZRWSyul1N93fviDZ3+SUq/vtFpKKf3csX509GzNqK3+/UUPevlnPb3fvdy5XvQb4Vx2rdRhsLR6nTA/n9/9nr2l3wc8p+PH5HbXaiuWZN/sX/oOzLhOuGHmNQ1+q34jvJvRrbTVK4V8jp4Xx5a/J9HtJKwfOvrqbS2izm5b8eO/9B2Y8aGDcLjbtbSOlzJ96feB6veeLfX5/4KDdLs4nt9R2JWpO6rBhfy07sLDukbHk/CD3LZB6uhjlhDhFtronWZRvIYI31ZLHa//WRqvIsI31dJqG+3U1OA6InxHvb2wnb4nH80P7XueHVfrIV3JJHzPJbi7xbEt49X82G7MYRfrmYTv+T31NLiaCN8zTs6i+AUWx8SZhG8w9rYhwhfcTn6Z+DzriHC9Wp72Zrv4VdYJt6LBl5mEXfjUM2q2YRK+pLb7h64O1364G4W12GG4nEn4klbHS9/aSqm1Tm2zzJpYyTwNEb7m4biZNgzDVi7x1fUXcDp1hRbHW3hcFL926ZwTPxMm4Tbaw7ttRYLDEvzU29Yi3MDvglqZ2JVYHz8stbT2+/SAkznxQmBDT+fYiuF28mfBJHxbnTi8v41m4fSWx4m3SUopp/8ZfN/0HsFVq3n1zFeuMQnfNHmKcW3XKyMN/7uNu/rzAkm9TcHzFlhMwp0M19N+9tjW20W7hnevH5/5eTj1P35Lo+XpbYN3+gG+e9nv5E/C2f/9O1vx8J74mbBOuI2Jw2D+CuvsrxoPTvzzFzO3rnhKZ/63h3jIxyyO37NqWTq8SvyrwdMvj0V4sFGDjn4tInzXnwGNj1h4uh/n5Kyg7Onx0T314VpzTMJ5762viW4Rk/Aolr2TTjAJ99r4XHmaZmtt5r6cegvZJDzO5OFaZ38Szv7vP9RwfrJHfOwEi+PyysJu5U7oZV/e2pozoM7jHBFu/sTXa3fDyZ2m21s8fM/9usDC9Z3Zx+vvR9Pj/UTPv++4J7dD9R/dN/X3Ppg6OhegWkMspZxlcfyCp4dbjT59t1Cuf70I/OzPW3nleiHfR4Tr1Pu9g639nOt5Pd291ufbKc8DHY/Gc+4wPNPieMURK9PHSd+dNDdetLZSSmkvXQ3p5xuccSPnRP/kNSdXzj0s15Ynjke4XLpwfMiWqzFMO9MkXGx+kl0jaXXmTLpxoM1Lx9NO9HNXl5ew6FF5fmNzr8w5luu5U03CbVf6W12zq7qWdrmm8PjLTzQHJpzoERgS3G4S3t/s/dWqJ0fhbRo+u9TwmZ1nF019eLPkS5dp9ztqylzl7afXx+8w/itn+2215/khXHEJ33fW3aa2mcc7BE/zuC9wnkm43HuFTO2Vvrv5ep2KlFK+ecPk9X0i7yT4Z1vXNVOT8Mc3T8L266OJI2P2+6Zj9ZXr+n+9jtcJ919v2uE7TD6ey44FO6duF8dHvMIQ6EGCT/S6OO5t83HhqXX11zsPnl5gnf4iHA6Fam04bOrF9bbNV/fGl+Kf/rpSSvn1qvJwuKEEn+tvcdyum46v/5KZ2O6P6w7xcYLFcnhOf5PwwWs5tXdnzu+F75rVg+E463r7qBiC8/qOMPTU/S5uWYM/X3V3POGTl+l41HeEpSV+JfqrDd790IxWCs3BWR3vJywltDb1K7mFDd5+RYnq1ul9Ei7eLN3Ok+SWNbjy67m6RNjrOkstpR3+Wv/vhfFrf4+Fnu+i6WRXcb2ewNbH3VnGySSr9bw4rtcDng4dhr+/1bI1gp+v0eBKExF28Ti2djmP451Ted9XFw7iiSuF8KeJCDd9KOv9eytvuZVWSmtDhZEnuNrTvLcjXrZr9++1yxk/6/YNtdoOm4bjgw6v111os2cImICv+1fKeDtkj/1cj7sv1r+IcDmqYds7tUwbXsVrw38np6Jp+br/SnlyCPLmF0RpZTz7Vh2ekFonvLsQZm0/KxOC29bzU2APeh3l8pTWJdEf9jrE3V2p12XwdYk8eR9+7p09NOs9X8YduOS7nHn2d4ZHVXj3C9kfzom7rEMsuJsiXOn5hsmBS7/h/KNaLlsrEz8U7fHtUe7Dd4rSbv71cQJsG/aDtNLa7WC+69UmL5eePPyQqPp4gt74SgtsZmpndTDNdrnS0PUQ61ZKu1y/5fhBuPI71tLsrVntY67dfbkA1v4d3hb9pZRVEf68yrj1Xfp2/z6kwVKuJ54c8m2efjCrXrfxP+Xh7Eh/JzpNuEyZQ39k1nyvyyrtyr9FKX0fRTNiznyrj5mEi/Zob/ntBH+Yf11fpOzXtSSPfCWHo/zr+wd+2E9Y69Jj+rb7vj0/Kt+m+3XCerfKfyANHqj7dcJh1+CBq4Mrrm3NNvqehK2UevTZdrc1T8PwKH1H+LNf5sgL2jeXlD5W7xGWUqo9hF+u+3VCBX6/7ieh5eL36ztChymfQtcRZpbEBx2tw03XEZaSXBxbEThK9xGmGIXH6TjCam/dSXS8iya+a+Zjjjn/dB1PwmgFtTpj6TB+2qc4rPUwXU9CzkGExFkcE2cSEidC4kRInAiJEyFxIiROhMSJkDgREpc+lMtZJKRetquXM9oFSPK143p3nQMtnlr0AIbrxdBLKUI8sfxRNL8uhMnZ5CMcPAzFUkppl99uYcvl+/US4cXzszr6uo9srbMIr35+ybWN6O/XaYQ3lsYn0HuEnICX7YgTIXEiJE6ExImQOBESJ0LiREicCIkTIXEiJE6ExImQOBESJ0LiREicCIkTIXEiJE6ExImQOBESJ0LiREicCIkTIXEiJE6ExImQOBESJ0LiREicCIkTIXEiJE6ExImQOBESJ0LiREicCIkTIXEiJE6ExImQOBESJ0LiREicCIkTIXEiJE6ExImQOBESJ0LiREjcHhHWWuoON7uTj7qz36m2HW6zlFK2vd1bJ9vf3R3uLevsEeHwxLYhnFZ//n955+FTpdXS6vWTrdRWSr1FcbmNuwone7n83dvb26eHj4ZvUK7/ud2aBvP2iXD7JVzb6XZLGX4M9rhdFtopwle/fx2m4V0X9XFWLaiw1bv32m0UPv/2ZZi/JH3CE/AJ95E3eIKJs5+QOBESJ0LiREicCIkTIXEiJE6ExImQOBESJ0LiREicCIkTIXEiJE6ExImQOBESJ0LiREicCIkTIXEiJE6ExImQOBESJ0LiREicCIkTIXEiJE6ExImQOBESJ0LiRHjh1zrliJA4V+8nziQc/PVrFmt99i6bMAkvLr/bqT7+Ir3nPGbbEuHVfHnt79/wyKtEuJ7HbGMeUOJsmBAnQuJE+Ao7aTZlnZA4k5A4ERInQuJESJwIiRMhcSIkToTEiZA4ERInQuJESJwIiRMhcSIkToTEiZA4ERInQuJESJwIiRMhcSIkToTEiZA4ERInQuJESJwIiRMhcSIkToTEiZA4ERInQuJESJwIiRMhcSIkToTEiZA4ERInQuJESJwIiRMhcSIkToTEiZA4ERInQuJESJwIiRMhcSIkToTEiZA4ERInQuJESJwIiRMhcSIkToTEiZA4ERInQuJESJwIiRMhcSIkToTEiZA4ERInQuJESJwIiRMhcSIkToTEiZA4ERInQuJESJwIiRMhcSIkToTEiZA4ERInQuJESJwIiRMhcSIkToTEiZA4ERInQuJESJwIiRMhcSIkToTEiZA4ERInQuJESJwIiRMhcSIkToTEiZA4ERInQuJESJwIiRMhcSIkToTEiZA4ERInQuJESJwIiRMhcSIkToTEiZA4ERInQuJESJwIiRMhcSIkToTEiZA4ERInQuJESJwIiRMhcSIkToTEiZA4ERInQuJESJwIiRMhcSIkToTEiZA4ERInQuJESJwIiRMhcSIkToTEiZA4ERInQuJESJwIiRMhcSIkToTEiZA4ERInQuJESJwIiRMhcSIkToTEiZA4ERInQuJESJwIiRMhcSIkToTEiZA4ERInQuJESJwIiRMhcSIkToTEiZA4ERInQuJESJwIiRMhcSIkToTEiZA4ERInQuJESJwIiRMhcSIkToTEiZA4ERInQuJESJwIiRMhcSIkToTEiZA4ERInQuJESJwIiRMhcSIkToTEiZA4ERInQuJESJwIiRMhcSIkToSnVUtN34ULEZ7SEGBL342L2ssd4Ti1m/wG/6XvAMfqaQJeifBMan8BlmJxfCbdPtc2TM6jdbM5PNLtTwfnYRKeRqdjsJiEdMAkJE6EZ9LpElmEp9HpTsJinZAOmITEiZA4ERInQuJESJwIiRMhcSIkToTEiZA4ERInQuJESJwIiRMhcSIkToTEiZA4ERInQuJESJwIiRMhcSIkToTEiZA4ERInQuJESJwIiRMhcSIkToTEiZA4ERInQuJEyIxjfueECJl01C/n9iskiDMJmXLY738yCYkzCYkTIVMOWxyLkDgRMuG4zQUbJsSZhMSJkDgRMuGwjWMRkmfDhDiTkDgRMsE6IWnHNWidkDyTkDgREidCJtgwIe3ArQUbJsSZhMSJkAnWCUmzs5ozMQmJEyFxImSCDRPSbJhwJiYhcSIkToRMsGFCmqNoOBOTkDgREidCJhy3YWKdkDiTkDgRMsHimBMxCYkTIXEiJE6ExImQOBESJ0LiREicCIkTIXEiJE6ExImQOBESJ0LiREicCIkTIXEiJE6ExImQOBESJ0KW2PUkZOcdE2cSEidC4kRInAiJEyFxIiROhMSJkDgREidC4kRInAiJEyFxIiROhMSJkDgREidC4kT4HeqBv4puc84x+QKf/iSahB9nPPJq+fAGP/6HiC9gEn64D14VvBHhR6q3t2346KNbtDj+QI9P2vWjz30qP/ee8zVPnsXxB7ssij+eCD9ZLR+/e6YUEX6yz99BeCHCT/U1CYrwc7WvWB0spXzPBhYfzCQkToTEiZA4ERInQuJESJwIiRMhcSIkToTEiZA4ERInQuJESJwIiRMhcSIkToTEiZA4ERInQuJESJwIiRMhcSIkToTEiZA4ERInQuJESJwIiRMhcSIkToTEiZA4ERInQuJESJwIiRMhcSIkToTEiZA4ERInQuJESJwIiRMhcSIkToTEiZA4ERInQuJESJwIiRMhcSIkToTEiZA4ERInQuJESJwIiRMhcSIkToTEiZA4ETKr1v2/hwiZUy//qdf31/7dRV/YVt4yp3JIHyYhM+rtP4+fq7fP1odP/Hx+zdw0CZkz7uPx41ra9W1tpdRWhjcrqxIhq9XSamm1/Lxp5fLRrctVtydCVqnlNvMept/1zfpBKELW2j4ZGyassmxxu25vjknIvAMKMQmZd23wuktmh1dQRMgybfR2QyIkToQsNCyH91hDFCELtfVrg3XZdrKtY+JMQpZ6djTDNjdsEpJmErKK/YSEvXKMzN9EyAr7rLxZJyTOJORv9cl7W968SUiaSUicCIkTIXEiJE6ExImQOBESJ0LiREicCIkTIXEiJE6EzNnsqJm5G3IUDXEmIXEiJE6ExImQOBESJ0LiRMicjc+ue35z9hMSZxISJ0LWcPI738kkZJU9RqEImfE7uT2WnBbHHG58lUMREmdxTJwIiRMhcSIkToTEiZA4EZJz2RcuQtba7pW7y05qO6uJMwmZtcuxWyMiZNazJeXWYVocE2cSsppJyNcxCVlv41EoQuJESFq1TkicSUicCJl3wEsmFsfEmYTEiZA4ETKn1qfrhNuuKIqQWe1pcdtuSdgwYVZtzyIZX8jjPSYhM4bYfge37egSIdPqzzu1Dh8Ob7ZdgIqQBVop7a7CjVfirBOy0HXtcPtkREicxTFxIiROhEw74qTjIkLmtGMqtGFCnElInAiZdtA6ocUxcSYhcSIkToTEiZBZR2yb2DAhziQkToTMcwUGzsAkJE6E57Jy4XrM63YiPJd27epyztKfX34E64RntOpZ3z8Rk/BULrOv/frMjP3HlEl4Qr096SYhRx02OP39O/uh4CgdPfMm4anczbz2+GFyHHb088ABuny+TcJz+d1gB9Owy58MzsUkZG4CHjIbRchoI6WO/2R3ImTk+BU0ETJopSw9rGFr/x3+HelfPXYemoTcuVyrv10afL6euDm7aJhwXBomIRNaqQetH5qExJmETDlsM1mETBkfZ7Mbi2OW2PY3Ko6YhMz6fVbKDt/DJCTNJCROhMSJkD/sv4EsQv5w2WrYsUURssieW7C2jokzCfnT3muFJiFxJiFxIiROhCxS7aIhzi4avplJyEL7LY9NQuJMQuJESJwIiRMhcSIkToTEiZA4ERInQuJESJwI+cP+p3x67Zg4k5A4ERInQuJESJwIiRMhcSIkToTEiZA4ERInQuJESJwIiRMhcSIkToTEiZA4ERInQuJESJwIiRMhcSIkToTEiZA4ERInQuJESJwIiRMhcSIkToTEiZA4ERInQuJESJwIiRMhcSIkToTEiZA4ERInQuJESJwIiRMhcSIkToTEiZA4ERInQuJESJwIiRMhcSIkToTEiZA4ERInQuJESJwIiRMhcSIkToTEiZA4ERInQuJESJwIiRMhcSIkToTEiZA4ERInQuJESJwIiRMhcSIkToTEiZA4ERInQuJESJwIiRMhcSIkToTEiZA4ERInQuJESJwIiRMhi9Q9b7vteOOwhElInAiJEyFxIiROhMSJkDgREidC4kTIKnXygzdu0ysmpJmExImQOBESJ0LiREicCIkTIXEi5GVbHfJvZzVxJiGv2fDMp/8BT+coYKQVC+kAAAAASUVORK5CYII=\",\n\t\t\t\t\"contentEncoding\": \"base64\",\n\t\t\t\t\"contentMediaType\": \"image/png\"\n\t\t\t},\n\t\t\t\"responseCode\": 0,\n\t\t\t\"width\": 6.5\n\t\t}\n\t}\n}",
							"parameter": [],
							"expect": {
								"name": "OK",
								"isDefault": 1,
								"code": 200,
								"contentType": "json",
								"verifyType": "schema",
								"mock": "",
								"schema": {
									"type": "object",
									"properties": {
										"id": {
											"type": "integer"
										},
										"jsonrpc": {
											"type": "string"
										},
										"result": {
											"type": "object",
											"properties": {
												"response": {
													"type": "object",
													"properties": {
														"responseCode": {
															"type": "integer"
														},
														"aboutString": {
															"type": "string"
														}
													},
													"required": [
														"responseCode"
													],
													"APIPOST_ORDERS": [
														"responseCode",
														"aboutString"
													]
												}
											},
											"required": [
												"response"
											],
											"APIPOST_ORDERS": [
												"response"
											]
										}
									},
									"required": [
										"id",
										"jsonrpc",
										"result"
									],
									"APIPOST_ORDERS": [
										"id",
										"jsonrpc",
										"result"
									]
								}
							}
						},
						"error": {
							"raw": "",
							"parameter": [],
							"expect": {
								"name": "失败",
								"isDefault": -1,
								"code": 404,
								"contentType": "json",
								"verifyType": "schema",
								"mock": "",
								"schema": {
									"type": "object"
								}
							}
						}
					},
					"children": []
				},
				{
					"target_type": "api",
					"name": "9.1.4 serverMapDelete",
					"mark": "developing",
					"sort": 3,
					"tags": [],
					"created_uuid": "UBAPH1393C43",
					"method": "POST",
					"mock": "{}",
					"mock_url": "",
					"request": {
						"url": "",
						"description": "",
						"event": {
							"pre_script": "// console.log(apt.environment.get(\"sessionId\"));\n// request.params.querry.sessionId= apt.environment.get(\"sessionId\");\n// apt.setRequestBody({\n//     \"params\": {\n//         \"query\": {\n//             \"sessionId\": apt.environment.get(\"sessionId\")\n//         }\n//     });\n// // apt.environment.getPreUrl();\n// apt.setRequestBody({\"key\": \"value\"});\n// apt.setRequestBody(\"key\", \"value\");",
							"test": ""
						},
						"pre_tasks": [],
						"post_tasks": [],
						"body": {
							"mode": "json",
							"parameter": [],
							"raw": "{\n\t\"id\": -872648523227424,\n\t\"jsonrpc\": \"2.0\",\n\t\"method\": \"serverMapDelete\",\n\t\"params\": {\n\t\t\"query\": {\n\t\t\t\"sessionId\": \"究亲圆子派等\",\n\t\t\t\"serverMapName\": \"备院段调但\"\n\t\t}\n\t}\n}",
							"raw_para": [],
							"raw_schema": {
								"type": "object",
								"properties": {
									"id": {
										"type": "integer"
									},
									"jsonrpc": {
										"type": "string",
										"mock": {
											"mock": "2.0"
										}
									},
									"method": {
										"type": "string",
										"mock": {
											"mock": "serverMapDelete"
										}
									},
									"params": {
										"type": "object",
										"properties": {
											"query": {
												"type": "object",
												"properties": {
													"sessionId": {
														"type": "string",
														"mock": {
															"mock": "{{sessionId}}"
														}
													},
													"serverMapName": {
														"type": "string",
														"mock": {
															"mock": ""
														}
													}
												},
												"APIPOST_ORDERS": [
													"sessionId",
													"serverMapName"
												],
												"required": [
													"sessionId"
												]
											}
										},
										"APIPOST_ORDERS": [
											"query"
										],
										"required": [
											"query"
										]
									}
								},
								"APIPOST_ORDERS": [
									"id",
									"jsonrpc",
									"method",
									"params"
								],
								"required": [
									"id",
									"jsonrpc",
									"method",
									"params"
								]
							}
						},
						"header": {
							"parameter": [
								{
									"is_checked": "1",
									"type": "Text",
									"key": "Content-Type",
									"value": "application/json; charset=utf-8",
									"not_null": "-1",
									"description": "",
									"field_type": "Text"
								}
							]
						}
					},
					"response": {
						"success": {
							"raw": "{\n    \"id\": 326,\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"response\": {\n            \"responseCode\": 0\n        }\n    }\n}",
							"parameter": [],
							"expect": {
								"name": "OK",
								"isDefault": 1,
								"code": 200,
								"contentType": "json",
								"verifyType": "schema",
								"mock": "",
								"schema": {
									"type": "object",
									"properties": {
										"id": {
											"type": "integer"
										},
										"jsonrpc": {
											"type": "string"
										},
										"result": {
											"type": "object",
											"properties": {
												"response": {
													"type": "object",
													"properties": {
														"responseCode": {
															"type": "integer"
														},
														"aboutString": {
															"type": "string"
														}
													},
													"required": [
														"responseCode"
													],
													"APIPOST_ORDERS": [
														"responseCode",
														"aboutString"
													]
												}
											},
											"required": [
												"response"
											],
											"APIPOST_ORDERS": [
												"response"
											]
										}
									},
									"required": [
										"id",
										"jsonrpc",
										"result"
									],
									"APIPOST_ORDERS": [
										"id",
										"jsonrpc",
										"result"
									]
								}
							}
						},
						"error": {
							"raw": "",
							"parameter": [],
							"expect": {
								"name": "失败",
								"isDefault": -1,
								"code": 404,
								"contentType": "json",
								"verifyType": "schema",
								"mock": "",
								"schema": {
									"type": "object"
								}
							}
						}
					},
					"children": []
				},
				{
					"target_type": "folder",
					"name": "serverInternal",
					"mark": "developing",
					"sort": 8,
					"tags": [],
					"created_uuid": "UBAPH1393C43",
					"request": {
						"description": ""
					},
					"children": [
						{
							"target_type": "api",
							"name": "serverInternalFleetConﬁgGet",
							"mark": "developing",
							"sort": 1,
							"tags": [],
							"created_uuid": "UBAPH1393C43",
							"method": "POST",
							"mock": "{}",
							"mock_url": "",
							"request": {
								"url": "",
								"description": "",
								"event": {
									"pre_script": "// console.log(apt.environment.get(\"sessionId\"));\n// request.params.querry.sessionId= apt.environment.get(\"sessionId\");\n// apt.setRequestBody({\n//     \"params\": {\n//         \"query\": {\n//             \"sessionId\": apt.environment.get(\"sessionId\")\n//         }\n//     });\n// // apt.environment.getPreUrl();\n// apt.setRequestBody({\"key\": \"value\"});\n// apt.setRequestBody(\"key\", \"value\");",
									"test": ""
								},
								"pre_tasks": [],
								"post_tasks": [],
								"body": {
									"mode": "json",
									"parameter": [],
									"raw": "{\n\t\"id\": 7455606079458067,\n\t\"jsonrpc\": \"2.0\",\n\t\"method\": \"serverInternalFleetConﬁgGet\",\n\t\"params\": {\n\t\t\"query\": {\n\t\t\t\"sessionId\": \"{{sessionId}}\",\n\t\t\t\"settings\": \"中北温按属\"\n\t\t}\n\t}\n}",
									"raw_para": [],
									"raw_schema": {
										"type": "object",
										"properties": {
											"id": {
												"type": "integer"
											},
											"jsonrpc": {
												"type": "string",
												"mock": {
													"mock": "2.0"
												}
											},
											"method": {
												"type": "string",
												"mock": {
													"mock": "serverInternalFleetConﬁgGet"
												}
											},
											"params": {
												"type": "object",
												"properties": {
													"query": {
														"type": "object",
														"properties": {
															"sessionId": {
																"type": "string",
																"mock": {
																	"mock": "{{sessionId}}"
																}
															},
															"settings": {
																"type": "string"
															}
														},
														"APIPOST_ORDERS": [
															"sessionId",
															"settings"
														],
														"required": [
															"sessionId"
														]
													}
												},
												"APIPOST_ORDERS": [
													"query"
												],
												"required": [
													"query"
												]
											}
										},
										"APIPOST_ORDERS": [
											"id",
											"jsonrpc",
											"method",
											"params"
										],
										"required": [
											"id",
											"jsonrpc",
											"method",
											"params"
										]
									}
								},
								"header": {
									"parameter": [
										{
											"is_checked": "1",
											"type": "Text",
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"not_null": "-1",
											"description": "",
											"field_type": "Text"
										}
									]
								}
							},
							"response": {
								"success": {
									"raw": "{\n    \"id\": 326,\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"response\": {\n            \"responseCode\": 0\n        }\n    }\n}",
									"parameter": [],
									"expect": {
										"name": "OK",
										"isDefault": 1,
										"code": 200,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object",
											"properties": {
												"id": {
													"type": "integer"
												},
												"jsonrpc": {
													"type": "string"
												},
												"result": {
													"type": "object",
													"properties": {
														"response": {
															"type": "object",
															"properties": {
																"responseCode": {
																	"type": "integer"
																},
																"aboutString": {
																	"type": "string"
																}
															},
															"required": [
																"responseCode"
															],
															"APIPOST_ORDERS": [
																"responseCode",
																"aboutString"
															]
														}
													},
													"required": [
														"response"
													],
													"APIPOST_ORDERS": [
														"response"
													]
												}
											},
											"required": [
												"id",
												"jsonrpc",
												"result"
											],
											"APIPOST_ORDERS": [
												"id",
												"jsonrpc",
												"result"
											]
										}
									}
								},
								"error": {
									"raw": "",
									"parameter": [],
									"expect": {
										"name": "失败",
										"isDefault": -1,
										"code": 404,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object"
										}
									}
								}
							},
							"children": []
						},
						{
							"target_type": "api",
							"name": "serverInternalFleetConﬁgSet",
							"mark": "developing",
							"sort": 1,
							"tags": [],
							"created_uuid": "UBAPH1393C43",
							"method": "POST",
							"mock": "{}",
							"mock_url": "",
							"request": {
								"url": "",
								"description": "",
								"event": {
									"pre_script": "// console.log(apt.environment.get(\"sessionId\"));\n// request.params.querry.sessionId= apt.environment.get(\"sessionId\");\n// apt.setRequestBody({\n//     \"params\": {\n//         \"query\": {\n//             \"sessionId\": apt.environment.get(\"sessionId\")\n//         }\n//     });\n// // apt.environment.getPreUrl();\n// apt.setRequestBody({\"key\": \"value\"});\n// apt.setRequestBody(\"key\", \"value\");",
									"test": ""
								},
								"pre_tasks": [],
								"post_tasks": [],
								"body": {
									"mode": "json",
									"parameter": [],
									"raw": "{\n\t\"id\": 2216444449190003,\n\t\"jsonrpc\": \"2.0\",\n\t\"method\": \"serverInternalFleetConﬁgSet\",\n\t\"params\": {\n\t\t\"query\": {\n\t\t\t\"sessionId\": \"{{sessionId}}\",\n\t\t\t\"settings\": \"\"\n\t\t}\n\t}\n}",
									"raw_para": [],
									"raw_schema": {
										"type": "object",
										"properties": {
											"id": {
												"type": "integer"
											},
											"jsonrpc": {
												"type": "string",
												"mock": {
													"mock": "2.0"
												}
											},
											"method": {
												"type": "string",
												"mock": {
													"mock": "serverInternalFleetConﬁgSet"
												}
											},
											"params": {
												"type": "object",
												"properties": {
													"query": {
														"type": "object",
														"properties": {
															"sessionId": {
																"type": "string",
																"mock": {
																	"mock": "{{sessionId}}"
																}
															},
															"settings": {
																"type": "string"
															}
														},
														"APIPOST_ORDERS": [
															"sessionId",
															"settings"
														],
														"required": [
															"sessionId"
														]
													}
												},
												"APIPOST_ORDERS": [
													"query"
												],
												"required": [
													"query"
												]
											}
										},
										"APIPOST_ORDERS": [
											"id",
											"jsonrpc",
											"method",
											"params"
										],
										"required": [
											"id",
											"jsonrpc",
											"method",
											"params"
										]
									}
								},
								"header": {
									"parameter": [
										{
											"is_checked": "1",
											"type": "Text",
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"not_null": "-1",
											"description": "",
											"field_type": "Text"
										}
									]
								}
							},
							"response": {
								"success": {
									"raw": "{\n    \"id\": 326,\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"response\": {\n            \"responseCode\": 0\n        }\n    }\n}",
									"parameter": [],
									"expect": {
										"name": "OK",
										"isDefault": 1,
										"code": 200,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object",
											"properties": {
												"id": {
													"type": "integer"
												},
												"jsonrpc": {
													"type": "string"
												},
												"result": {
													"type": "object",
													"properties": {
														"response": {
															"type": "object",
															"properties": {
																"responseCode": {
																	"type": "integer"
																},
																"aboutString": {
																	"type": "string"
																}
															},
															"required": [
																"responseCode"
															],
															"APIPOST_ORDERS": [
																"responseCode",
																"aboutString"
															]
														}
													},
													"required": [
														"response"
													],
													"APIPOST_ORDERS": [
														"response"
													]
												}
											},
											"required": [
												"id",
												"jsonrpc",
												"result"
											],
											"APIPOST_ORDERS": [
												"id",
												"jsonrpc",
												"result"
											]
										}
									}
								},
								"error": {
									"raw": "",
									"parameter": [],
									"expect": {
										"name": "失败",
										"isDefault": -1,
										"code": 404,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object"
										}
									}
								}
							},
							"children": []
						}
					]
				},
				{
					"target_type": "api",
					"name": "9.1.3 serverMapRename",
					"mark": "developing",
					"sort": 2,
					"tags": [],
					"created_uuid": "UBAPH1393C43",
					"method": "POST",
					"mock": "{}",
					"mock_url": "",
					"request": {
						"url": "",
						"description": "",
						"event": {
							"pre_script": "// console.log(apt.environment.get(\"sessionId\"));\n// request.params.querry.sessionId= apt.environment.get(\"sessionId\");\n// apt.setRequestBody({\n//     \"params\": {\n//         \"query\": {\n//             \"sessionId\": apt.environment.get(\"sessionId\")\n//         }\n//     });\n// // apt.environment.getPreUrl();\n// apt.setRequestBody({\"key\": \"value\"});\n// apt.setRequestBody(\"key\", \"value\");",
							"test": ""
						},
						"pre_tasks": [],
						"post_tasks": [],
						"body": {
							"mode": "json",
							"parameter": [],
							"raw": "{\n\t\"id\": 438,\n\t\"jsonrpc\": \"2.0\",\n\t\"method\": \"serverMapRename\",\n\t\"params\": {\n\t\t\"query\": {\n\t\t\t\"sessionId\": \"难气很料身深\",\n\t\t\t\"currentServerMapName\": \"平队派严华格\",\n\t\t\t\"desiredServerMapName\": \"调般连连二\"\n\t\t}\n\t}\n}",
							"raw_para": [],
							"raw_schema": {
								"type": "object",
								"properties": {
									"id": {
										"type": "integer"
									},
									"jsonrpc": {
										"type": "string",
										"mock": {
											"mock": "2.0"
										}
									},
									"method": {
										"type": "string",
										"mock": {
											"mock": "serverMapRename"
										}
									},
									"params": {
										"type": "object",
										"properties": {
											"query": {
												"type": "object",
												"properties": {
													"sessionId": {
														"type": "string",
														"mock": {
															"mock": "{{sessionId}}"
														}
													},
													"currentServerMapName": {
														"type": "string"
													},
													"desiredServerMapName": {
														"type": "string"
													}
												},
												"APIPOST_ORDERS": [
													"sessionId",
													"currentServerMapName",
													"desiredServerMapName"
												],
												"required": [
													"sessionId"
												]
											}
										},
										"APIPOST_ORDERS": [
											"query"
										],
										"required": [
											"query"
										]
									}
								},
								"APIPOST_ORDERS": [
									"id",
									"jsonrpc",
									"method",
									"params"
								],
								"required": [
									"id",
									"jsonrpc",
									"method",
									"params"
								]
							}
						},
						"header": {
							"parameter": [
								{
									"is_checked": "1",
									"type": "Text",
									"key": "Content-Type",
									"value": "application/json; charset=utf-8",
									"not_null": "-1",
									"description": "",
									"field_type": "Text"
								}
							]
						}
					},
					"response": {
						"success": {
							"raw": "{\n    \"id\": 326,\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"response\": {\n            \"responseCode\": 0\n        }\n    }\n}",
							"parameter": [],
							"expect": {
								"name": "OK",
								"isDefault": 1,
								"code": 200,
								"contentType": "json",
								"verifyType": "schema",
								"mock": "",
								"schema": {
									"type": "object",
									"properties": {
										"id": {
											"type": "integer"
										},
										"jsonrpc": {
											"type": "string"
										},
										"result": {
											"type": "object",
											"properties": {
												"response": {
													"type": "object",
													"properties": {
														"responseCode": {
															"type": "integer"
														},
														"aboutString": {
															"type": "string"
														}
													},
													"required": [
														"responseCode"
													],
													"APIPOST_ORDERS": [
														"responseCode",
														"aboutString"
													]
												}
											},
											"required": [
												"response"
											],
											"APIPOST_ORDERS": [
												"response"
											]
										}
									},
									"required": [
										"id",
										"jsonrpc",
										"result"
									],
									"APIPOST_ORDERS": [
										"id",
										"jsonrpc",
										"result"
									]
								}
							}
						},
						"error": {
							"raw": "",
							"parameter": [],
							"expect": {
								"name": "失败",
								"isDefault": -1,
								"code": 404,
								"contentType": "json",
								"verifyType": "schema",
								"mock": "",
								"schema": {
									"type": "object"
								}
							}
						}
					},
					"children": []
				}
			]
		},
		{
			"target_type": "folder",
			"name": "12 BinaryInterface",
			"mark": "developing",
			"sort": 6,
			"tags": [],
			"created_uuid": "UBAPH1393C43",
			"request": {
				"description": ""
			},
			"children": [
				{
					"target_type": "socket_service",
					"name": "新建TCP服务",
					"mark": "developing",
					"sort": 1,
					"tags": [],
					"created_uuid": "UBAPH1393C43",
					"method": "TCP",
					"request": {
						"url": "192.168.8.76:2112",
						"description": "",
						"receive_complete_func": {
							"name": "none"
						}
					},
					"children": []
				}
			]
		},
		{
			"target_type": "folder",
			"name": "10 ROKIT Locator Support – RPC Methods",
			"mark": "developing",
			"sort": 3,
			"tags": [],
			"created_uuid": "UBAPH1393C43",
			"request": {
				"description": ""
			},
			"children": [
				{
					"target_type": "folder",
					"name": "SupportReport",
					"mark": "developing",
					"sort": 1,
					"tags": [],
					"created_uuid": "UBAPH1393C43",
					"request": {
						"description": ""
					},
					"children": [
						{
							"target_type": "api",
							"name": "supportReportCreate",
							"mark": "developing",
							"sort": 1,
							"tags": [],
							"created_uuid": "UBAPH1393C43",
							"method": "POST",
							"mock": "{}",
							"mock_url": "",
							"request": {
								"url": "",
								"description": "",
								"event": {
									"pre_script": "apt.environment.get(\"sessionIdServer\");\napt.setRequestQuery(\"key\", \"value\");",
									"test": ""
								},
								"pre_tasks": [],
								"post_tasks": [],
								"body": {
									"mode": "json",
									"parameter": [],
									"raw": "{\n\t\"id\": 2435351853303227,\n\t\"jsonrpc\": \"2.0\",\n\t\"method\": \"supportReportCreate\",\n\t\"params\": {\n\t\t\"query\": {\n\t\t\t\"sessionId\": \"{{sessionId}}\"\n\t\t}\n\t}\n}",
									"raw_para": [],
									"raw_schema": {
										"type": "object",
										"properties": {
											"id": {
												"type": "integer"
											},
											"jsonrpc": {
												"type": "string",
												"mock": {
													"mock": "2.0"
												}
											},
											"method": {
												"type": "string",
												"mock": {
													"mock": "supportReportCreate"
												}
											},
											"params": {
												"type": "object",
												"properties": {
													"query": {
														"type": "object",
														"properties": {
															"sessionId": {
																"type": "string",
																"mock": {
																	"mock": "{{sessionId}}"
																}
															}
														},
														"APIPOST_ORDERS": [
															"sessionId"
														],
														"required": [
															"sessionId"
														]
													}
												},
												"APIPOST_ORDERS": [
													"query"
												],
												"required": [
													"query"
												]
											}
										},
										"APIPOST_ORDERS": [
											"id",
											"jsonrpc",
											"method",
											"params"
										],
										"required": [
											"id",
											"jsonrpc",
											"method",
											"params"
										]
									}
								},
								"header": {
									"parameter": [
										{
											"is_checked": "1",
											"type": "Text",
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"not_null": "-1",
											"description": "",
											"field_type": "Text"
										}
									]
								}
							},
							"response": {
								"success": {
									"raw": "{\n    \"id\": 326,\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"response\": {\n            \"responseCode\": 0\n        }\n    }\n}",
									"parameter": [],
									"expect": {
										"name": "OK",
										"isDefault": 1,
										"code": 200,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object",
											"properties": {
												"id": {
													"type": "integer"
												},
												"jsonrpc": {
													"type": "string"
												},
												"result": {
													"type": "object",
													"properties": {
														"response": {
															"type": "object",
															"properties": {
																"responseCode": {
																	"type": "integer"
																},
																"aboutString": {
																	"type": "string"
																}
															},
															"required": [
																"responseCode"
															],
															"APIPOST_ORDERS": [
																"responseCode",
																"aboutString"
															]
														}
													},
													"required": [
														"response"
													],
													"APIPOST_ORDERS": [
														"response"
													]
												}
											},
											"required": [
												"id",
												"jsonrpc",
												"result"
											],
											"APIPOST_ORDERS": [
												"id",
												"jsonrpc",
												"result"
											]
										}
									}
								},
								"error": {
									"raw": "",
									"parameter": [],
									"expect": {
										"name": "失败",
										"isDefault": -1,
										"code": 404,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object"
										}
									}
								}
							},
							"children": []
						},
						{
							"target_type": "api",
							"name": "supportReportGetPath",
							"mark": "complated",
							"sort": 4,
							"tags": [],
							"created_uuid": "UBAPH1393C43",
							"method": "POST",
							"mock": "{}",
							"mock_url": "",
							"request": {
								"url": "",
								"description": "",
								"event": {
									"pre_script": "apt.environment.get(\"sessionIdServer\");\napt.setRequestQuery(\"key\", \"value\");",
									"test": ""
								},
								"pre_tasks": [],
								"post_tasks": [],
								"body": {
									"mode": "json",
									"parameter": [],
									"raw": "{\n\t\"id\": -4322943226150364,\n\t\"jsonrpc\": \"2.0\",\n\t\"method\": \"supportReportGetPath\",\n\t\"params\": {\n\t\t\"query\": {\n\t\t\t\"sessionId\": \"{{sessionId}}\",\n\t\t\t\"reportName\": \"20230922T090208Z-supportreport-client-minimal.tar.bz2\"\n\t\t}\n\t}\n}",
									"raw_para": [],
									"raw_schema": {
										"type": "object",
										"properties": {
											"id": {
												"type": "integer"
											},
											"jsonrpc": {
												"type": "string",
												"mock": {
													"mock": "2.0"
												}
											},
											"method": {
												"type": "string",
												"mock": {
													"mock": "supportReportGetPath"
												}
											},
											"params": {
												"type": "object",
												"properties": {
													"query": {
														"type": "object",
														"properties": {
															"sessionId": {
																"type": "string",
																"mock": {
																	"mock": "{{sessionId}}"
																}
															},
															"reportName": {
																"type": "string"
															}
														},
														"APIPOST_ORDERS": [
															"sessionId",
															"reportName"
														],
														"required": [
															"sessionId"
														]
													}
												},
												"APIPOST_ORDERS": [
													"query"
												],
												"required": [
													"query"
												]
											}
										},
										"APIPOST_ORDERS": [
											"id",
											"jsonrpc",
											"method",
											"params"
										],
										"required": [
											"id",
											"jsonrpc",
											"method",
											"params"
										]
									}
								},
								"header": {
									"parameter": [
										{
											"is_checked": "1",
											"type": "Text",
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"not_null": "-1",
											"description": "",
											"field_type": "Text"
										}
									]
								}
							},
							"response": {
								"success": {
									"raw": "{\n\t\"id\": -4322943226150364,\n\t\"jsonrpc\": \"2.0\",\n\t\"result\": {\n\t\t\"response\": {\n\t\t\t\"reportNameUrl\": \"/20230922T090208Z-supportreport-client-minimal.tar.bz2?token=b834a625-2887-4b84-b1ea-dd8587486361\",\n\t\t\t\"responseCode\": 0\n\t\t}\n\t}\n}",
									"parameter": [],
									"expect": {
										"name": "OK",
										"isDefault": 1,
										"code": 200,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object",
											"properties": {
												"id": {
													"type": "integer"
												},
												"jsonrpc": {
													"type": "string"
												},
												"result": {
													"type": "object",
													"properties": {
														"response": {
															"type": "object",
															"properties": {
																"responseCode": {
																	"type": "integer"
																},
																"aboutString": {
																	"type": "string"
																}
															},
															"required": [
																"responseCode"
															],
															"APIPOST_ORDERS": [
																"responseCode",
																"aboutString"
															]
														}
													},
													"required": [
														"response"
													],
													"APIPOST_ORDERS": [
														"response"
													]
												}
											},
											"required": [
												"id",
												"jsonrpc",
												"result"
											],
											"APIPOST_ORDERS": [
												"id",
												"jsonrpc",
												"result"
											]
										}
									}
								},
								"error": {
									"raw": "",
									"parameter": [],
									"expect": {
										"name": "失败",
										"isDefault": -1,
										"code": 404,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object"
										}
									}
								}
							},
							"children": []
						},
						{
							"target_type": "api",
							"name": "supportReportCreateMinimal",
							"mark": "developing",
							"sort": 1,
							"tags": [],
							"created_uuid": "UBAPH1393C43",
							"method": "POST",
							"mock": "{}",
							"mock_url": "",
							"request": {
								"url": "",
								"description": "",
								"event": {
									"pre_script": "apt.environment.get(\"sessionIdServer\");\napt.setRequestQuery(\"key\", \"value\");",
									"test": ""
								},
								"pre_tasks": [],
								"post_tasks": [],
								"body": {
									"mode": "json",
									"parameter": [],
									"raw": "{\n\t\"id\": -8351202336214895,\n\t\"jsonrpc\": \"2.0\",\n\t\"method\": \"supportReportCreateMinimal\",\n\t\"params\": {\n\t\t\"query\": {\n\t\t\t\"sessionId\": \"{{sessionId}}\"\n\t\t}\n\t}\n}",
									"raw_para": [],
									"raw_schema": {
										"type": "object",
										"properties": {
											"id": {
												"type": "integer"
											},
											"jsonrpc": {
												"type": "string",
												"mock": {
													"mock": "2.0"
												}
											},
											"method": {
												"type": "string",
												"mock": {
													"mock": "supportReportCreateMinimal"
												}
											},
											"params": {
												"type": "object",
												"properties": {
													"query": {
														"type": "object",
														"properties": {
															"sessionId": {
																"type": "string",
																"mock": {
																	"mock": "{{sessionId}}"
																}
															}
														},
														"APIPOST_ORDERS": [
															"sessionId"
														],
														"required": [
															"sessionId"
														]
													}
												},
												"APIPOST_ORDERS": [
													"query"
												],
												"required": [
													"query"
												]
											}
										},
										"APIPOST_ORDERS": [
											"id",
											"jsonrpc",
											"method",
											"params"
										],
										"required": [
											"id",
											"jsonrpc",
											"method",
											"params"
										]
									}
								},
								"header": {
									"parameter": [
										{
											"is_checked": "1",
											"type": "Text",
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"not_null": "-1",
											"description": "",
											"field_type": "Text"
										}
									]
								}
							},
							"response": {
								"success": {
									"raw": "{\n    \"id\": 326,\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"response\": {\n            \"responseCode\": 0\n        }\n    }\n}",
									"parameter": [],
									"expect": {
										"name": "OK",
										"isDefault": 1,
										"code": 200,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object",
											"properties": {
												"id": {
													"type": "integer"
												},
												"jsonrpc": {
													"type": "string"
												},
												"result": {
													"type": "object",
													"properties": {
														"response": {
															"type": "object",
															"properties": {
																"responseCode": {
																	"type": "integer"
																},
																"aboutString": {
																	"type": "string"
																}
															},
															"required": [
																"responseCode"
															],
															"APIPOST_ORDERS": [
																"responseCode",
																"aboutString"
															]
														}
													},
													"required": [
														"response"
													],
													"APIPOST_ORDERS": [
														"response"
													]
												}
											},
											"required": [
												"id",
												"jsonrpc",
												"result"
											],
											"APIPOST_ORDERS": [
												"id",
												"jsonrpc",
												"result"
											]
										}
									}
								},
								"error": {
									"raw": "",
									"parameter": [],
									"expect": {
										"name": "失败",
										"isDefault": -1,
										"code": 404,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object"
										}
									}
								}
							},
							"children": []
						},
						{
							"target_type": "api",
							"name": "supportReportSetDescription",
							"mark": "developing",
							"sort": 2,
							"tags": [],
							"created_uuid": "UBAPH1393C43",
							"method": "POST",
							"mock": "{}",
							"mock_url": "",
							"request": {
								"url": "",
								"description": "",
								"event": {
									"pre_script": "apt.environment.get(\"sessionIdServer\");\napt.setRequestQuery(\"key\", \"value\");",
									"test": ""
								},
								"pre_tasks": [],
								"post_tasks": [],
								"body": {
									"mode": "json",
									"parameter": [],
									"raw": "{\n\t\"id\": -6125842750701371,\n\t\"jsonrpc\": \"2.0\",\n\t\"method\": \"supportReportSetDescription\",\n\t\"params\": {\n\t\t\"query\": {\n\t\t\t\"sessionId\": \"{{sessionId}}\",\n\t\t\t\"reportDescription\": \"minimal description\"\n\t\t}\n\t}\n}",
									"raw_para": [],
									"raw_schema": {
										"type": "object",
										"properties": {
											"id": {
												"type": "integer"
											},
											"jsonrpc": {
												"type": "string",
												"mock": {
													"mock": "2.0"
												}
											},
											"method": {
												"type": "string",
												"mock": {
													"mock": "supportReportSetDescription"
												}
											},
											"params": {
												"type": "object",
												"properties": {
													"query": {
														"type": "object",
														"properties": {
															"sessionId": {
																"type": "string",
																"mock": {
																	"mock": "{{sessionId}}"
																}
															},
															"reportDescription": {
																"type": "string"
															}
														},
														"APIPOST_ORDERS": [
															"sessionId",
															"reportDescription"
														],
														"required": [
															"sessionId"
														]
													}
												},
												"APIPOST_ORDERS": [
													"query"
												],
												"required": [
													"query"
												]
											}
										},
										"APIPOST_ORDERS": [
											"id",
											"jsonrpc",
											"method",
											"params"
										],
										"required": [
											"id",
											"jsonrpc",
											"method",
											"params"
										]
									}
								},
								"header": {
									"parameter": [
										{
											"is_checked": "1",
											"type": "Text",
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"not_null": "-1",
											"description": "",
											"field_type": "Text"
										}
									]
								}
							},
							"response": {
								"success": {
									"raw": "{\n    \"id\": 326,\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"response\": {\n            \"responseCode\": 0\n        }\n    }\n}",
									"parameter": [],
									"expect": {
										"name": "OK",
										"isDefault": 1,
										"code": 200,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object",
											"properties": {
												"id": {
													"type": "integer"
												},
												"jsonrpc": {
													"type": "string"
												},
												"result": {
													"type": "object",
													"properties": {
														"response": {
															"type": "object",
															"properties": {
																"responseCode": {
																	"type": "integer"
																},
																"aboutString": {
																	"type": "string"
																}
															},
															"required": [
																"responseCode"
															],
															"APIPOST_ORDERS": [
																"responseCode",
																"aboutString"
															]
														}
													},
													"required": [
														"response"
													],
													"APIPOST_ORDERS": [
														"response"
													]
												}
											},
											"required": [
												"id",
												"jsonrpc",
												"result"
											],
											"APIPOST_ORDERS": [
												"id",
												"jsonrpc",
												"result"
											]
										}
									}
								},
								"error": {
									"raw": "",
									"parameter": [],
									"expect": {
										"name": "失败",
										"isDefault": -1,
										"code": 404,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object"
										}
									}
								}
							},
							"children": []
						},
						{
							"target_type": "api",
							"name": "supportReportList",
							"mark": "complated",
							"sort": 3,
							"tags": [],
							"created_uuid": "UBAPH1393C43",
							"method": "POST",
							"mock": "{}",
							"mock_url": "",
							"request": {
								"url": "",
								"description": "",
								"event": {
									"pre_script": "apt.environment.get(\"sessionIdServer\");\napt.setRequestQuery(\"key\", \"value\");",
									"test": ""
								},
								"pre_tasks": [],
								"post_tasks": [],
								"body": {
									"mode": "json",
									"parameter": [],
									"raw": "{\n\t\"id\": 6609174994046407,\n\t\"jsonrpc\": \"2.0\",\n\t\"method\": \"supportReportList\",\n\t\"params\": {\n\t\t\"query\": {\n\t\t\t\"sessionId\": \"{{sessionId}}\"\n\t\t}\n\t}\n}",
									"raw_para": [],
									"raw_schema": {
										"type": "object",
										"properties": {
											"id": {
												"type": "integer"
											},
											"jsonrpc": {
												"type": "string",
												"mock": {
													"mock": "2.0"
												}
											},
											"method": {
												"type": "string",
												"mock": {
													"mock": "supportReportList"
												}
											},
											"params": {
												"type": "object",
												"properties": {
													"query": {
														"type": "object",
														"properties": {
															"sessionId": {
																"type": "string",
																"mock": {
																	"mock": "{{sessionId}}"
																}
															}
														},
														"APIPOST_ORDERS": [
															"sessionId"
														],
														"required": [
															"sessionId"
														]
													}
												},
												"APIPOST_ORDERS": [
													"query"
												],
												"required": [
													"query"
												]
											}
										},
										"APIPOST_ORDERS": [
											"id",
											"jsonrpc",
											"method",
											"params"
										],
										"required": [
											"id",
											"jsonrpc",
											"method",
											"params"
										]
									}
								},
								"header": {
									"parameter": [
										{
											"is_checked": "1",
											"type": "Text",
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"not_null": "-1",
											"description": "",
											"field_type": "Text"
										}
									]
								}
							},
							"response": {
								"success": {
									"raw": "{\n    \"id\": 326,\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"response\": {\n            \"responseCode\": 0\n        }\n    }\n}",
									"parameter": [],
									"expect": {
										"name": "OK",
										"isDefault": 1,
										"code": 200,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object",
											"properties": {
												"id": {
													"type": "integer"
												},
												"jsonrpc": {
													"type": "string"
												},
												"result": {
													"type": "object",
													"properties": {
														"response": {
															"type": "object",
															"properties": {
																"responseCode": {
																	"type": "integer"
																},
																"aboutString": {
																	"type": "string"
																}
															},
															"required": [
																"responseCode"
															],
															"APIPOST_ORDERS": [
																"responseCode",
																"aboutString"
															]
														}
													},
													"required": [
														"response"
													],
													"APIPOST_ORDERS": [
														"response"
													]
												}
											},
											"required": [
												"id",
												"jsonrpc",
												"result"
											],
											"APIPOST_ORDERS": [
												"id",
												"jsonrpc",
												"result"
											]
										}
									}
								},
								"error": {
									"raw": "",
									"parameter": [],
									"expect": {
										"name": "失败",
										"isDefault": -1,
										"code": 404,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object"
										}
									}
								}
							},
							"children": []
						},
						{
							"target_type": "api",
							"name": "supportReportDelete",
							"mark": "developing",
							"sort": 5,
							"tags": [],
							"created_uuid": "UBAPH1393C43",
							"method": "POST",
							"mock": "{}",
							"mock_url": "",
							"request": {
								"url": "",
								"description": "",
								"event": {
									"pre_script": "apt.environment.get(\"sessionIdServer\");\napt.setRequestQuery(\"key\", \"value\");",
									"test": ""
								},
								"pre_tasks": [],
								"post_tasks": [],
								"body": {
									"mode": "json",
									"parameter": [],
									"raw": "{\n\t\"id\": 6745388536444439,\n\t\"jsonrpc\": \"2.0\",\n\t\"method\": \"supportReportDelete\",\n\t\"params\": {\n\t\t\"query\": {\n\t\t\t\"sessionId\": \"{{sessionId}}\",\n\t\t\t\"reportName\": \"20230616T052100Z-supportreport-server.tar.bz2\"\n\t\t}\n\t}\n}",
									"raw_para": [],
									"raw_schema": {
										"type": "object",
										"properties": {
											"id": {
												"type": "integer"
											},
											"jsonrpc": {
												"type": "string",
												"mock": {
													"mock": "2.0"
												}
											},
											"method": {
												"type": "string",
												"mock": {
													"mock": "supportReportDelete"
												}
											},
											"params": {
												"type": "object",
												"properties": {
													"query": {
														"type": "object",
														"properties": {
															"sessionId": {
																"type": "string",
																"mock": {
																	"mock": "{{sessionId}}"
																}
															},
															"reportName": {
																"type": "string"
															}
														},
														"APIPOST_ORDERS": [
															"sessionId",
															"reportName"
														],
														"required": [
															"sessionId"
														]
													}
												},
												"APIPOST_ORDERS": [
													"query"
												],
												"required": [
													"query"
												]
											}
										},
										"APIPOST_ORDERS": [
											"id",
											"jsonrpc",
											"method",
											"params"
										],
										"required": [
											"id",
											"jsonrpc",
											"method",
											"params"
										]
									}
								},
								"header": {
									"parameter": [
										{
											"is_checked": "1",
											"type": "Text",
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"not_null": "-1",
											"description": "",
											"field_type": "Text"
										}
									]
								}
							},
							"response": {
								"success": {
									"raw": "{\n    \"id\": 326,\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"response\": {\n            \"responseCode\": 0\n        }\n    }\n}",
									"parameter": [],
									"expect": {
										"name": "OK",
										"isDefault": 1,
										"code": 200,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object",
											"properties": {
												"id": {
													"type": "integer"
												},
												"jsonrpc": {
													"type": "string"
												},
												"result": {
													"type": "object",
													"properties": {
														"response": {
															"type": "object",
															"properties": {
																"responseCode": {
																	"type": "integer"
																},
																"aboutString": {
																	"type": "string"
																}
															},
															"required": [
																"responseCode"
															],
															"APIPOST_ORDERS": [
																"responseCode",
																"aboutString"
															]
														}
													},
													"required": [
														"response"
													],
													"APIPOST_ORDERS": [
														"response"
													]
												}
											},
											"required": [
												"id",
												"jsonrpc",
												"result"
											],
											"APIPOST_ORDERS": [
												"id",
												"jsonrpc",
												"result"
											]
										}
									}
								},
								"error": {
									"raw": "",
									"parameter": [],
									"expect": {
										"name": "失败",
										"isDefault": -1,
										"code": 404,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object"
										}
									}
								}
							},
							"children": []
						}
					]
				},
				{
					"target_type": "folder",
					"name": "SupportRecovery",
					"mark": "developing",
					"sort": 1,
					"tags": [],
					"created_uuid": "UBAPH1393C43",
					"request": {
						"description": ""
					},
					"children": [
						{
							"target_type": "api",
							"name": "supportRecoveryFrom",
							"mark": "developing",
							"sort": 5,
							"tags": [],
							"created_uuid": "UBAPH1393C43",
							"method": "POST",
							"mock": "{}",
							"mock_url": "",
							"request": {
								"url": "",
								"description": "",
								"event": {
									"pre_script": "apt.environment.get(\"sessionIdServer\");\napt.setRequestQuery(\"key\", \"value\");",
									"test": ""
								},
								"pre_tasks": [],
								"post_tasks": [],
								"body": {
									"mode": "json",
									"parameter": [],
									"raw": "{\n\t\"id\": 2189652664017051,\n\t\"jsonrpc\": \"2.0\",\n\t\"method\": \"supportRecoveryFrom\",\n\t\"params\": {\n\t\t\"query\": {\n\t\t\t\"sessionId\": \"{{sessionId}}\",\n\t\t\t\"recoveryName\": \"没花头中构义格\"\n\t\t}\n\t}\n}",
									"raw_para": [],
									"raw_schema": {
										"type": "object",
										"properties": {
											"id": {
												"type": "integer"
											},
											"jsonrpc": {
												"type": "string",
												"mock": {
													"mock": "2.0"
												}
											},
											"method": {
												"type": "string",
												"mock": {
													"mock": "supportRecoveryFrom"
												}
											},
											"params": {
												"type": "object",
												"properties": {
													"query": {
														"type": "object",
														"properties": {
															"sessionId": {
																"type": "string",
																"mock": {
																	"mock": "{{sessionId}}"
																}
															},
															"recoveryName": {
																"type": "string"
															}
														},
														"APIPOST_ORDERS": [
															"sessionId",
															"recoveryName"
														],
														"required": [
															"sessionId"
														]
													}
												},
												"APIPOST_ORDERS": [
													"query"
												],
												"required": [
													"query"
												]
											}
										},
										"APIPOST_ORDERS": [
											"id",
											"jsonrpc",
											"method",
											"params"
										],
										"required": [
											"id",
											"jsonrpc",
											"method",
											"params"
										]
									}
								},
								"header": {
									"parameter": [
										{
											"is_checked": "1",
											"type": "Text",
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"not_null": "-1",
											"description": "",
											"field_type": "Text"
										}
									]
								}
							},
							"response": {
								"success": {
									"raw": "{\n    \"id\": 326,\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"response\": {\n            \"responseCode\": 0\n        }\n    }\n}",
									"parameter": [],
									"expect": {
										"name": "OK",
										"isDefault": 1,
										"code": 200,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object",
											"properties": {
												"id": {
													"type": "integer"
												},
												"jsonrpc": {
													"type": "string"
												},
												"result": {
													"type": "object",
													"properties": {
														"response": {
															"type": "object",
															"properties": {
																"responseCode": {
																	"type": "integer"
																},
																"aboutString": {
																	"type": "string"
																}
															},
															"required": [
																"responseCode"
															],
															"APIPOST_ORDERS": [
																"responseCode",
																"aboutString"
															]
														}
													},
													"required": [
														"response"
													],
													"APIPOST_ORDERS": [
														"response"
													]
												}
											},
											"required": [
												"id",
												"jsonrpc",
												"result"
											],
											"APIPOST_ORDERS": [
												"id",
												"jsonrpc",
												"result"
											]
										}
									}
								},
								"error": {
									"raw": "",
									"parameter": [],
									"expect": {
										"name": "失败",
										"isDefault": -1,
										"code": 404,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object"
										}
									}
								}
							},
							"children": []
						},
						{
							"target_type": "api",
							"name": "supportRecoveryFactoryReset",
							"mark": "developing",
							"sort": 3,
							"tags": [],
							"created_uuid": "UBAPH1393C43",
							"method": "POST",
							"mock": "{}",
							"mock_url": "",
							"request": {
								"url": "",
								"description": "",
								"event": {
									"pre_script": "apt.environment.get(\"sessionIdServer\");\napt.setRequestQuery(\"key\", \"value\");",
									"test": ""
								},
								"pre_tasks": [],
								"post_tasks": [],
								"body": {
									"mode": "json",
									"parameter": [],
									"raw": "{\n\t\"id\": 2710725371600483,\n\t\"jsonrpc\": \"2.0\",\n\t\"method\": \"supportRecoveryFactoryReset\",\n\t\"params\": {\n\t\t\"query\": {\n\t\t\t\"sessionId\": \"{{sessionId}}\"\n\t\t}\n\t}\n}",
									"raw_para": [],
									"raw_schema": {
										"type": "object",
										"properties": {
											"id": {
												"type": "integer"
											},
											"jsonrpc": {
												"type": "string",
												"mock": {
													"mock": "2.0"
												}
											},
											"method": {
												"type": "string",
												"mock": {
													"mock": "supportRecoveryFactoryReset"
												}
											},
											"params": {
												"type": "object",
												"properties": {
													"query": {
														"type": "object",
														"properties": {
															"sessionId": {
																"type": "string",
																"mock": {
																	"mock": "{{sessionId}}"
																}
															}
														},
														"APIPOST_ORDERS": [
															"sessionId"
														],
														"required": [
															"sessionId"
														]
													}
												},
												"APIPOST_ORDERS": [
													"query"
												],
												"required": [
													"query"
												]
											}
										},
										"APIPOST_ORDERS": [
											"id",
											"jsonrpc",
											"method",
											"params"
										],
										"required": [
											"id",
											"jsonrpc",
											"method",
											"params"
										]
									}
								},
								"header": {
									"parameter": [
										{
											"is_checked": "1",
											"type": "Text",
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"not_null": "-1",
											"description": "",
											"field_type": "Text"
										}
									]
								}
							},
							"response": {
								"success": {
									"raw": "{\n    \"id\": 326,\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"response\": {\n            \"responseCode\": 0\n        }\n    }\n}",
									"parameter": [],
									"expect": {
										"name": "OK",
										"isDefault": 1,
										"code": 200,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object",
											"properties": {
												"id": {
													"type": "integer"
												},
												"jsonrpc": {
													"type": "string"
												},
												"result": {
													"type": "object",
													"properties": {
														"response": {
															"type": "object",
															"properties": {
																"responseCode": {
																	"type": "integer"
																},
																"aboutString": {
																	"type": "string"
																}
															},
															"required": [
																"responseCode"
															],
															"APIPOST_ORDERS": [
																"responseCode",
																"aboutString"
															]
														}
													},
													"required": [
														"response"
													],
													"APIPOST_ORDERS": [
														"response"
													]
												}
											},
											"required": [
												"id",
												"jsonrpc",
												"result"
											],
											"APIPOST_ORDERS": [
												"id",
												"jsonrpc",
												"result"
											]
										}
									}
								},
								"error": {
									"raw": "",
									"parameter": [],
									"expect": {
										"name": "失败",
										"isDefault": -1,
										"code": 404,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object"
										}
									}
								}
							},
							"children": []
						},
						{
							"target_type": "api",
							"name": "supportRecoveryDelete",
							"mark": "developing",
							"sort": 2,
							"tags": [],
							"created_uuid": "UBAPH1393C43",
							"method": "POST",
							"mock": "{}",
							"mock_url": "",
							"request": {
								"url": "",
								"description": "",
								"event": {
									"pre_script": "apt.environment.get(\"sessionIdServer\");\napt.setRequestQuery(\"key\", \"value\");",
									"test": ""
								},
								"pre_tasks": [],
								"post_tasks": [],
								"body": {
									"mode": "json",
									"parameter": [],
									"raw": "{\n\t\"id\": -3436996600455640,\n\t\"jsonrpc\": \"2.0\",\n\t\"method\": \"supportRecoveryDelete\",\n\t\"params\": {\n\t\t\"query\": {\n\t\t\t\"sessionId\": \"{{sessionId}}\",\n\t\t\t\"recoveryName\": \"去其统万\"\n\t\t}\n\t}\n}",
									"raw_para": [],
									"raw_schema": {
										"type": "object",
										"properties": {
											"id": {
												"type": "integer"
											},
											"jsonrpc": {
												"type": "string",
												"mock": {
													"mock": "2.0"
												}
											},
											"method": {
												"type": "string",
												"mock": {
													"mock": "supportRecoveryDelete"
												}
											},
											"params": {
												"type": "object",
												"properties": {
													"query": {
														"type": "object",
														"properties": {
															"sessionId": {
																"type": "string",
																"mock": {
																	"mock": "{{sessionId}}"
																}
															},
															"recoveryName": {
																"type": "string"
															}
														},
														"APIPOST_ORDERS": [
															"sessionId",
															"recoveryName"
														],
														"required": [
															"sessionId"
														]
													}
												},
												"APIPOST_ORDERS": [
													"query"
												],
												"required": [
													"query"
												]
											}
										},
										"APIPOST_ORDERS": [
											"id",
											"jsonrpc",
											"method",
											"params"
										],
										"required": [
											"id",
											"jsonrpc",
											"method",
											"params"
										]
									}
								},
								"header": {
									"parameter": [
										{
											"is_checked": "1",
											"type": "Text",
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"not_null": "-1",
											"description": "",
											"field_type": "Text"
										}
									]
								}
							},
							"response": {
								"success": {
									"raw": "{\n    \"id\": 326,\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"response\": {\n            \"responseCode\": 0\n        }\n    }\n}",
									"parameter": [],
									"expect": {
										"name": "OK",
										"isDefault": 1,
										"code": 200,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object",
											"properties": {
												"id": {
													"type": "integer"
												},
												"jsonrpc": {
													"type": "string"
												},
												"result": {
													"type": "object",
													"properties": {
														"response": {
															"type": "object",
															"properties": {
																"responseCode": {
																	"type": "integer"
																},
																"aboutString": {
																	"type": "string"
																}
															},
															"required": [
																"responseCode"
															],
															"APIPOST_ORDERS": [
																"responseCode",
																"aboutString"
															]
														}
													},
													"required": [
														"response"
													],
													"APIPOST_ORDERS": [
														"response"
													]
												}
											},
											"required": [
												"id",
												"jsonrpc",
												"result"
											],
											"APIPOST_ORDERS": [
												"id",
												"jsonrpc",
												"result"
											]
										}
									}
								},
								"error": {
									"raw": "",
									"parameter": [],
									"expect": {
										"name": "失败",
										"isDefault": -1,
										"code": 404,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object"
										}
									}
								}
							},
							"children": []
						},
						{
							"target_type": "api",
							"name": "supportRecoveryCreate",
							"mark": "developing",
							"sort": 1,
							"tags": [],
							"created_uuid": "UBAPH1393C43",
							"method": "POST",
							"mock": "{}",
							"mock_url": "",
							"request": {
								"url": "",
								"description": "",
								"event": {
									"pre_script": "apt.environment.get(\"sessionIdServer\");\napt.setRequestQuery(\"key\", \"value\");",
									"test": ""
								},
								"pre_tasks": [],
								"post_tasks": [],
								"body": {
									"mode": "json",
									"parameter": [],
									"raw": "{\n\t\"id\": -5987184706023043,\n\t\"jsonrpc\": \"2.0\",\n\t\"method\": \"supportRecoveryCreate\",\n\t\"params\": {\n\t\t\"query\": {\n\t\t\t\"sessionId\": \"{{sessionId}}\"\n\t\t}\n\t}\n}",
									"raw_para": [],
									"raw_schema": {
										"type": "object",
										"properties": {
											"id": {
												"type": "integer"
											},
											"jsonrpc": {
												"type": "string",
												"mock": {
													"mock": "2.0"
												}
											},
											"method": {
												"type": "string",
												"mock": {
													"mock": "supportRecoveryCreate"
												}
											},
											"params": {
												"type": "object",
												"properties": {
													"query": {
														"type": "object",
														"properties": {
															"sessionId": {
																"type": "string",
																"mock": {
																	"mock": "{{sessionId}}"
																}
															}
														},
														"APIPOST_ORDERS": [
															"sessionId"
														],
														"required": [
															"sessionId"
														]
													}
												},
												"APIPOST_ORDERS": [
													"query"
												],
												"required": [
													"query"
												]
											}
										},
										"APIPOST_ORDERS": [
											"id",
											"jsonrpc",
											"method",
											"params"
										],
										"required": [
											"id",
											"jsonrpc",
											"method",
											"params"
										]
									}
								},
								"header": {
									"parameter": [
										{
											"is_checked": "1",
											"type": "Text",
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"not_null": "-1",
											"description": "",
											"field_type": "Text"
										}
									]
								}
							},
							"response": {
								"success": {
									"raw": "{\n    \"id\": 326,\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"response\": {\n            \"responseCode\": 0\n        }\n    }\n}",
									"parameter": [],
									"expect": {
										"name": "OK",
										"isDefault": 1,
										"code": 200,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object",
											"properties": {
												"id": {
													"type": "integer"
												},
												"jsonrpc": {
													"type": "string"
												},
												"result": {
													"type": "object",
													"properties": {
														"response": {
															"type": "object",
															"properties": {
																"responseCode": {
																	"type": "integer"
																},
																"aboutString": {
																	"type": "string"
																}
															},
															"required": [
																"responseCode"
															],
															"APIPOST_ORDERS": [
																"responseCode",
																"aboutString"
															]
														}
													},
													"required": [
														"response"
													],
													"APIPOST_ORDERS": [
														"response"
													]
												}
											},
											"required": [
												"id",
												"jsonrpc",
												"result"
											],
											"APIPOST_ORDERS": [
												"id",
												"jsonrpc",
												"result"
											]
										}
									}
								},
								"error": {
									"raw": "",
									"parameter": [],
									"expect": {
										"name": "失败",
										"isDefault": -1,
										"code": 404,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object"
										}
									}
								}
							},
							"children": []
						},
						{
							"target_type": "api",
							"name": "supportRecoveryList",
							"mark": "developing",
							"sort": 1,
							"tags": [],
							"created_uuid": "UBAPH1393C43",
							"method": "POST",
							"mock": "{}",
							"mock_url": "",
							"request": {
								"url": "",
								"description": "",
								"event": {
									"pre_script": "apt.environment.get(\"sessionIdServer\");\napt.setRequestQuery(\"key\", \"value\");",
									"test": ""
								},
								"pre_tasks": [],
								"post_tasks": [],
								"body": {
									"mode": "json",
									"parameter": [],
									"raw": "{\n\t\"id\": -6585442493531195,\n\t\"jsonrpc\": \"2.0\",\n\t\"method\": \"supportRecoveryList\",\n\t\"params\": {\n\t\t\"query\": {\n\t\t\t\"sessionId\": \"{{sessionId}}\"\n\t\t}\n\t}\n}",
									"raw_para": [],
									"raw_schema": {
										"type": "object",
										"properties": {
											"id": {
												"type": "integer"
											},
											"jsonrpc": {
												"type": "string",
												"mock": {
													"mock": "2.0"
												}
											},
											"method": {
												"type": "string",
												"mock": {
													"mock": "supportRecoveryList"
												}
											},
											"params": {
												"type": "object",
												"properties": {
													"query": {
														"type": "object",
														"properties": {
															"sessionId": {
																"type": "string",
																"mock": {
																	"mock": "{{sessionId}}"
																}
															}
														},
														"APIPOST_ORDERS": [
															"sessionId"
														],
														"required": [
															"sessionId"
														]
													}
												},
												"APIPOST_ORDERS": [
													"query"
												],
												"required": [
													"query"
												]
											}
										},
										"APIPOST_ORDERS": [
											"id",
											"jsonrpc",
											"method",
											"params"
										],
										"required": [
											"id",
											"jsonrpc",
											"method",
											"params"
										]
									}
								},
								"header": {
									"parameter": [
										{
											"is_checked": "1",
											"type": "Text",
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"not_null": "-1",
											"description": "",
											"field_type": "Text"
										}
									]
								}
							},
							"response": {
								"success": {
									"raw": "{\n    \"id\": 326,\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"response\": {\n            \"responseCode\": 0\n        }\n    }\n}",
									"parameter": [],
									"expect": {
										"name": "OK",
										"isDefault": 1,
										"code": 200,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object",
											"properties": {
												"id": {
													"type": "integer"
												},
												"jsonrpc": {
													"type": "string"
												},
												"result": {
													"type": "object",
													"properties": {
														"response": {
															"type": "object",
															"properties": {
																"responseCode": {
																	"type": "integer"
																},
																"aboutString": {
																	"type": "string"
																}
															},
															"required": [
																"responseCode"
															],
															"APIPOST_ORDERS": [
																"responseCode",
																"aboutString"
															]
														}
													},
													"required": [
														"response"
													],
													"APIPOST_ORDERS": [
														"response"
													]
												}
											},
											"required": [
												"id",
												"jsonrpc",
												"result"
											],
											"APIPOST_ORDERS": [
												"id",
												"jsonrpc",
												"result"
											]
										}
									}
								},
								"error": {
									"raw": "",
									"parameter": [],
									"expect": {
										"name": "失败",
										"isDefault": -1,
										"code": 404,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object"
										}
									}
								}
							},
							"children": []
						}
					]
				}
			]
		},
		{
			"target_type": "folder",
			"name": "11_ConfigurationEntries",
			"mark": "developing",
			"sort": 5,
			"tags": [],
			"created_uuid": "UBAPH1393C43",
			"request": {
				"description": ""
			},
			"children": []
		},
		{
			"target_type": "folder",
			"name": "7_Commen RPC Methods",
			"mark": "developing",
			"sort": 1,
			"tags": [],
			"created_uuid": "",
			"request": {
				"description": ""
			},
			"children": [
				{
					"target_type": "folder",
					"name": "AboutModules",
					"mark": "developing",
					"sort": 1,
					"tags": [],
					"created_uuid": "",
					"request": {
						"description": ""
					},
					"children": [
						{
							"target_type": "api",
							"name": "aboutModulesComponent",
							"mark": "developing",
							"sort": 1,
							"tags": [],
							"created_uuid": "",
							"method": "POST",
							"mock": "{}",
							"mock_url": "",
							"request": {
								"url": "",
								"description": "",
								"event": {
									"pre_script": "",
									"test": ""
								},
								"pre_tasks": [],
								"post_tasks": [],
								"body": {
									"mode": "json",
									"parameter": [],
									"raw": "{\n\t\"id\": 6152067644297527,\n\t\"jsonrpc\": \"2.0\",\n\t\"method\": \"aboutModulesComponent\",\n\t\"params\": {\n\t\t\"query\": {}\n\t}\n}",
									"raw_para": [],
									"raw_schema": {
										"type": "object",
										"properties": {
											"id": {
												"type": "integer"
											},
											"jsonrpc": {
												"type": "string",
												"mock": {
													"mock": "2.0"
												}
											},
											"method": {
												"type": "string",
												"mock": {
													"mock": "aboutModulesComponent"
												}
											},
											"params": {
												"type": "object",
												"properties": {
													"query": {
														"type": "object",
														"properties": [],
														"APIPOST_ORDERS": []
													}
												},
												"APIPOST_ORDERS": [
													"query"
												],
												"required": [
													"query"
												]
											}
										},
										"APIPOST_ORDERS": [
											"id",
											"jsonrpc",
											"method",
											"params"
										],
										"required": [
											"id",
											"jsonrpc",
											"method",
											"params"
										]
									}
								},
								"header": {
									"parameter": [
										{
											"is_checked": "1",
											"type": "Text",
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"not_null": "-1",
											"description": "",
											"field_type": "Text"
										}
									]
								}
							},
							"response": {
								"success": {
									"raw": "",
									"parameter": [],
									"expect": {
										"name": "OK",
										"isDefault": 1,
										"code": 200,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object",
											"properties": [],
											"APIPOST_ORDERS": []
										}
									}
								},
								"error": {
									"raw": "",
									"parameter": [],
									"expect": {
										"name": "失败",
										"isDefault": -1,
										"code": 404,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object"
										}
									}
								}
							},
							"children": []
						},
						{
							"target_type": "api",
							"name": "aboutModulesList",
							"mark": "developing",
							"sort": 1,
							"tags": [],
							"created_uuid": "",
							"method": "POST",
							"mock": "{}",
							"mock_url": "",
							"request": {
								"url": "",
								"description": "",
								"event": {
									"pre_script": "",
									"test": ""
								},
								"pre_tasks": [],
								"post_tasks": [],
								"body": {
									"mode": "json",
									"parameter": [],
									"raw": "{\n\t\"id\": -4054193653316768,\n\t\"jsonrpc\": \"2.0\",\n\t\"method\": \"aboutModulesList\",\n\t\"params\": {\n\t\t\"query\": {}\n\t}\n}",
									"raw_para": [],
									"raw_schema": {
										"type": "object",
										"properties": {
											"id": {
												"type": "integer"
											},
											"jsonrpc": {
												"type": "string",
												"mock": {
													"mock": "2.0"
												}
											},
											"method": {
												"type": "string",
												"mock": {
													"mock": "aboutModulesList"
												}
											},
											"params": {
												"type": "object",
												"properties": {
													"query": {
														"type": "object",
														"properties": [],
														"APIPOST_ORDERS": []
													}
												},
												"APIPOST_ORDERS": [
													"query"
												],
												"required": [
													"query"
												]
											}
										},
										"APIPOST_ORDERS": [
											"id",
											"jsonrpc",
											"method",
											"params"
										],
										"required": [
											"id",
											"jsonrpc",
											"method",
											"params"
										]
									}
								},
								"header": {
									"parameter": [
										{
											"is_checked": "1",
											"type": "Text",
											"key": "Content-Type",
											"value": "application/json",
											"not_null": "-1",
											"description": "",
											"field_type": "Text"
										}
									]
								}
							},
							"response": {
								"success": {
									"raw": "",
									"parameter": [],
									"expect": {
										"name": "OK",
										"isDefault": 1,
										"code": 200,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object",
											"properties": [],
											"APIPOST_ORDERS": []
										}
									}
								},
								"error": {
									"raw": "",
									"parameter": [],
									"expect": {
										"name": "失败",
										"isDefault": -1,
										"code": 404,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object"
										}
									}
								}
							},
							"children": []
						}
					]
				},
				{
					"target_type": "folder",
					"name": "Session",
					"mark": "developing",
					"sort": 1,
					"tags": [],
					"created_uuid": "",
					"request": {
						"description": ""
					},
					"children": [
						{
							"target_type": "api",
							"name": "sessionLogout",
							"mark": "complated",
							"sort": 1,
							"tags": [],
							"created_uuid": "",
							"method": "POST",
							"mock": "{}",
							"mock_url": "",
							"request": {
								"url": "",
								"description": "",
								"event": {
									"pre_script": "",
									"test": ""
								},
								"pre_tasks": [],
								"post_tasks": [],
								"body": {
									"mode": "json",
									"parameter": [],
									"raw": "{\n\t\"id\": 6402997225942639,\n\t\"jsonrpc\": \"2.0\",\n\t\"method\": \"sessionLogout\",\n\t\"params\": {\n\t\t\"query\": {\n\t\t\t\"sessionId\": \"{{sessionId}}\"\n\t\t}\n\t}\n}",
									"raw_para": [],
									"raw_schema": {
										"type": "object",
										"properties": {
											"id": {
												"type": "integer"
											},
											"jsonrpc": {
												"type": "string",
												"mock": {
													"mock": "2.0"
												}
											},
											"method": {
												"type": "string",
												"mock": {
													"mock": "sessionLogout"
												}
											},
											"params": {
												"type": "object",
												"properties": {
													"query": {
														"type": "object",
														"properties": {
															"sessionId": {
																"type": "string",
																"mock": {
																	"mock": "{{sessionId}}"
																}
															}
														},
														"APIPOST_ORDERS": [
															"sessionId"
														],
														"required": [
															"sessionId"
														]
													}
												},
												"APIPOST_ORDERS": [
													"query"
												],
												"required": [
													"query"
												]
											}
										},
										"APIPOST_ORDERS": [
											"id",
											"jsonrpc",
											"method",
											"params"
										],
										"required": [
											"id",
											"jsonrpc",
											"method",
											"params"
										]
									}
								},
								"header": {
									"parameter": [
										{
											"is_checked": "1",
											"type": "Text",
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"not_null": "-1",
											"description": "",
											"field_type": "Text"
										}
									]
								}
							},
							"response": {
								"success": {
									"raw": "{\n\t\"id\": 6402997225942639,\n\t\"jsonrpc\": \"2.0\",\n\t\"result\": {\n\t\t\"response\": {\n\t\t\t\"responseCode\": 0\n\t\t}\n\t}\n}",
									"parameter": [
										{
											"key": "id",
											"value": "6402997225942639",
											"description": "",
											"not_null": 1,
											"field_type": "Integer",
											"type": "Text",
											"is_checked": 1
										},
										{
											"key": "jsonrpc",
											"value": "2.0",
											"description": "",
											"not_null": 1,
											"field_type": "String",
											"type": "Text",
											"is_checked": 1
										},
										{
											"key": "result",
											"value": "",
											"description": "",
											"not_null": 1,
											"field_type": "Object",
											"type": "Text",
											"is_checked": 1
										},
										{
											"key": "result.response",
											"value": "",
											"description": "",
											"not_null": 1,
											"field_type": "Object",
											"type": "Text",
											"is_checked": 1
										},
										{
											"key": "result.response.responseCode",
											"value": "0",
											"description": "",
											"not_null": 1,
											"field_type": "Integer",
											"type": "Text",
											"is_checked": 1
										}
									],
									"expect": {
										"name": "OK",
										"isDefault": 1,
										"code": 200,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object",
											"properties": {
												"id": {
													"type": "integer"
												},
												"jsonrpc": {
													"type": "string"
												},
												"result": {
													"type": "object",
													"properties": {
														"response": {
															"type": "object",
															"properties": {
																"responseCode": {
																	"type": "integer"
																}
															},
															"required": [
																"responseCode"
															],
															"APIPOST_ORDERS": [
																"responseCode"
															]
														}
													},
													"required": [
														"response"
													],
													"APIPOST_ORDERS": [
														"response"
													]
												}
											},
											"required": [
												"id",
												"jsonrpc",
												"result"
											],
											"APIPOST_ORDERS": [
												"id",
												"jsonrpc",
												"result"
											]
										}
									}
								},
								"error": {
									"raw": "",
									"parameter": [],
									"expect": {
										"name": "失败",
										"isDefault": -1,
										"code": 404,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object"
										}
									}
								}
							},
							"children": []
						},
						{
							"target_type": "api",
							"name": "sessionList",
							"mark": "complated",
							"sort": 1,
							"tags": [],
							"created_uuid": "",
							"method": "POST",
							"mock": "{}",
							"mock_url": "",
							"request": {
								"url": "",
								"description": "",
								"event": {
									"pre_script": "",
									"test": ""
								},
								"pre_tasks": [],
								"post_tasks": [],
								"body": {
									"mode": "json",
									"parameter": [],
									"raw": "{\n\t\"id\": 1185790607725323,\n\t\"jsonrpc\": \"2.0\",\n\t\"method\": \"sessionList\",\n\t\"params\": {\n\t\t\"query\": {\n\t\t\t\"sessionId\": \"{{sessionId}}\"\n\t\t}\n\t}\n}",
									"raw_para": [],
									"raw_schema": {
										"type": "object",
										"properties": {
											"id": {
												"type": "integer"
											},
											"jsonrpc": {
												"type": "string",
												"mock": {
													"mock": "2.0"
												}
											},
											"method": {
												"type": "string",
												"mock": {
													"mock": "sessionList"
												}
											},
											"params": {
												"type": "object",
												"properties": {
													"query": {
														"type": "object",
														"properties": {
															"sessionId": {
																"type": "string",
																"mock": {
																	"mock": "{{sessionId}}"
																}
															}
														},
														"APIPOST_ORDERS": [
															"sessionId"
														],
														"required": [
															"sessionId"
														]
													}
												},
												"APIPOST_ORDERS": [
													"query"
												],
												"required": [
													"query"
												]
											}
										},
										"APIPOST_ORDERS": [
											"id",
											"jsonrpc",
											"method",
											"params"
										],
										"required": [
											"id",
											"jsonrpc",
											"method",
											"params"
										]
									}
								},
								"header": {
									"parameter": [
										{
											"is_checked": "1",
											"type": "Text",
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"not_null": "-1",
											"description": "",
											"field_type": "Text"
										}
									]
								}
							},
							"response": {
								"success": {
									"raw": "{\n\t\"id\": 1185790607725323,\n\t\"jsonrpc\": \"2.0\",\n\t\"result\": {\n\t\t\"response\": {\n\t\t\t\"responseCode\": 0,\n\t\t\t\"sessions\": [\n\t\t\t\t{\n\t\t\t\t\t\"expiration\": {\n\t\t\t\t\t\t\"resolution\": 1000000,\n\t\t\t\t\t\t\"time\": -7533702771983586,\n\t\t\t\t\t\t\"valid\": true\n\t\t\t\t\t},\n\t\t\t\t\t\"isExpired\": false,\n\t\t\t\t\t\"lastActivity\": {\n\t\t\t\t\t\t\"resolution\": 1000000,\n\t\t\t\t\t\t\"time\": 1689669264871189,\n\t\t\t\t\t\t\"valid\": true\n\t\t\t\t\t},\n\t\t\t\t\t\"revokeId\": \"4459ef32-6c3d-4665-9864-7436f3c3cf01\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"expiration\": {\n\t\t\t\t\t\t\"resolution\": 1000000,\n\t\t\t\t\t\t\"time\": 1689697611660335,\n\t\t\t\t\t\t\"valid\": true\n\t\t\t\t\t},\n\t\t\t\t\t\"isExpired\": false,\n\t\t\t\t\t\"lastActivity\": {\n\t\t\t\t\t\t\"resolution\": 1000000,\n\t\t\t\t\t\t\"time\": 1689668811660335,\n\t\t\t\t\t\t\"valid\": true\n\t\t\t\t\t},\n\t\t\t\t\t\"revokeId\": \"3c3dfe94-1521-400c-bd58-116259370fb7\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t}\n}",
									"parameter": [],
									"expect": {
										"name": "OK",
										"isDefault": 1,
										"code": 200,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object",
											"properties": {
												"id": {
													"type": "integer"
												},
												"jsonrpc": {
													"type": "string"
												},
												"result": {
													"type": "object",
													"properties": {
														"response": {
															"type": "object",
															"properties": {
																"responseCode": {
																	"type": "integer"
																},
																"sessionId": {
																	"type": "string"
																}
															},
															"required": [
																"responseCode",
																"sessionId"
															],
															"APIPOST_ORDERS": [
																"responseCode",
																"sessionId"
															]
														}
													},
													"required": [
														"response"
													],
													"APIPOST_ORDERS": [
														"response"
													]
												}
											},
											"required": [
												"id",
												"jsonrpc",
												"result"
											],
											"APIPOST_ORDERS": [
												"id",
												"jsonrpc",
												"result"
											]
										}
									}
								},
								"error": {
									"raw": "{\n\t\"id\": 1185790607725323,\n\t\"jsonrpc\": \"2.0\",\n\t\"result\": {\n\t\t\"response\": {\n\t\t\t\"responseCode\": 4,\n\t\t\t\"sessions\": []\n\t\t}\n\t}\n}",
									"parameter": [],
									"expect": {
										"name": "失败",
										"isDefault": -1,
										"code": 404,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object"
										}
									}
								}
							},
							"children": []
						},
						{
							"target_type": "api",
							"name": "sessionRevoke",
							"mark": "complated",
							"sort": 1,
							"tags": [],
							"created_uuid": "",
							"method": "POST",
							"mock": "{}",
							"mock_url": "",
							"request": {
								"url": "",
								"description": "",
								"event": {
									"pre_script": "",
									"test": ""
								},
								"pre_tasks": [],
								"post_tasks": [],
								"body": {
									"mode": "json",
									"parameter": [],
									"raw": "{\n\t\"id\": 4401029267591375,\n\t\"jsonrpc\": \"2.0\",\n\t\"method\": \"sessionRevoke\",\n\t\"params\": {\n\t\t\"query\": {\n\t\t\t\"sessionId\": \"{{sessionId}}\",\n\t\t\t\"revokeId\": \"f891307a-daed-4ec6-b055-0f425959e4a4\"\n\t\t}\n\t}\n}",
									"raw_para": [],
									"raw_schema": {
										"type": "object",
										"properties": {
											"id": {
												"type": "integer"
											},
											"jsonrpc": {
												"type": "string",
												"mock": {
													"mock": "2.0"
												}
											},
											"method": {
												"type": "string",
												"mock": {
													"mock": "sessionRevoke"
												}
											},
											"params": {
												"type": "object",
												"properties": {
													"query": {
														"type": "object",
														"properties": {
															"sessionId": {
																"type": "string",
																"mock": {
																	"mock": "{{sessionId}}"
																}
															},
															"revokeId": {
																"type": "string"
															}
														},
														"APIPOST_ORDERS": [
															"sessionId",
															"revokeId"
														],
														"required": [
															"sessionId",
															"revokeId"
														]
													}
												},
												"APIPOST_ORDERS": [
													"query"
												],
												"required": [
													"query"
												]
											}
										},
										"APIPOST_ORDERS": [
											"id",
											"jsonrpc",
											"method",
											"params"
										],
										"required": [
											"id",
											"jsonrpc",
											"method",
											"params"
										]
									}
								},
								"header": {
									"parameter": [
										{
											"is_checked": "1",
											"type": "Text",
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"not_null": "-1",
											"description": "",
											"field_type": "Text"
										}
									]
								}
							},
							"response": {
								"success": {
									"raw": "{\n\t\"id\": 4401029267591375,\n\t\"jsonrpc\": \"2.0\",\n\t\"result\": {\n\t\t\"response\": {\n\t\t\t\"responseCode\": 0\n\t\t}\n\t}\n}",
									"parameter": [],
									"expect": {
										"name": "OK",
										"isDefault": 1,
										"code": 200,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object",
											"properties": {
												"id": {
													"type": "integer"
												},
												"jsonrpc": {
													"type": "string"
												},
												"result": {
													"type": "object",
													"properties": {
														"response": {
															"type": "object",
															"properties": {
																"responseCode": {
																	"type": "integer"
																},
																"sessionId": {
																	"type": "string",
																	"mock": {
																		"mock": "{{sessionId}}"
																	}
																}
															},
															"required": [
																"responseCode",
																"sessionId"
															]
														}
													},
													"required": [
														"response"
													]
												}
											},
											"required": [
												"id",
												"jsonrpc",
												"result"
											]
										}
									}
								},
								"error": {
									"raw": "{\n\t\"id\": 4401029267591375,\n\t\"jsonrpc\": \"2.0\",\n\t\"result\": {\n\t\t\"response\": {\n\t\t\t\"responseCode\": 4\n\t\t}\n\t}\n}",
									"parameter": [],
									"expect": {
										"name": "失败",
										"isDefault": -1,
										"code": 404,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object"
										}
									}
								}
							},
							"children": []
						},
						{
							"target_type": "api",
							"name": "sessionGroupInfo",
							"mark": "complated",
							"sort": 1,
							"tags": [],
							"created_uuid": "",
							"method": "POST",
							"mock": "{}",
							"mock_url": "",
							"request": {
								"url": "",
								"description": "",
								"event": {
									"pre_script": "",
									"test": ""
								},
								"pre_tasks": [],
								"post_tasks": [],
								"body": {
									"mode": "json",
									"parameter": [],
									"raw": "{\n\t\"id\": 6318750777902935,\n\t\"jsonrpc\": \"2.0\",\n\t\"method\": \"sessionGroupInfo\",\n\t\"params\": {\n\t\t\"query\": {\n\t\t\t\"sessionId\": \"{{sessionId}}\"\n\t\t}\n\t}\n}",
									"raw_para": [],
									"raw_schema": {
										"type": "object",
										"properties": {
											"id": {
												"type": "integer"
											},
											"jsonrpc": {
												"type": "string",
												"mock": {
													"mock": "2.0"
												}
											},
											"method": {
												"type": "string",
												"mock": {
													"mock": "sessionGroupInfo"
												}
											},
											"params": {
												"type": "object",
												"properties": {
													"query": {
														"type": "object",
														"properties": {
															"sessionId": {
																"type": "string",
																"mock": {
																	"mock": "{{sessionId}}"
																}
															}
														},
														"APIPOST_ORDERS": [
															"sessionId"
														],
														"required": [
															"sessionId"
														]
													}
												},
												"APIPOST_ORDERS": [
													"query"
												],
												"required": [
													"query"
												]
											}
										},
										"APIPOST_ORDERS": [
											"id",
											"jsonrpc",
											"method",
											"params"
										],
										"required": [
											"id",
											"jsonrpc",
											"method",
											"params"
										]
									}
								},
								"header": {
									"parameter": [
										{
											"is_checked": "1",
											"type": "Text",
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"not_null": "-1",
											"description": "",
											"field_type": "Text"
										}
									]
								}
							},
							"response": {
								"success": {
									"raw": "{\n\t\"id\": 6318750777902935,\n\t\"jsonrpc\": \"2.0\",\n\t\"result\": {\n\t\t\"response\": {\n\t\t\t\"responseCode\": 0,\n\t\t\t\"userGroups\": [\n\t\t\t\t\"admin\"\n\t\t\t]\n\t\t}\n\t}\n}",
									"parameter": [],
									"expect": {
										"name": "OK",
										"isDefault": 1,
										"code": 200,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object",
											"properties": {
												"id": {
													"type": "integer"
												},
												"jsonrpc": {
													"type": "string"
												},
												"result": {
													"type": "object",
													"properties": {
														"response": {
															"type": "object",
															"properties": {
																"responseCode": {
																	"type": "integer"
																},
																"sessionId": {
																	"type": "string"
																}
															},
															"required": [
																"responseCode",
																"sessionId"
															]
														}
													},
													"required": [
														"response"
													]
												}
											},
											"required": [
												"id",
												"jsonrpc",
												"result"
											]
										}
									}
								},
								"error": {
									"raw": "",
									"parameter": [],
									"expect": {
										"name": "失败",
										"isDefault": -1,
										"code": 404,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object"
										}
									}
								}
							},
							"children": []
						},
						{
							"target_type": "api",
							"name": "sessionRevokeAll",
							"mark": "complated",
							"sort": 1,
							"tags": [],
							"created_uuid": "",
							"method": "POST",
							"mock": "{}",
							"mock_url": "",
							"request": {
								"url": "",
								"description": "",
								"event": {
									"pre_script": "",
									"test": ""
								},
								"pre_tasks": [],
								"post_tasks": [],
								"body": {
									"mode": "json",
									"parameter": [],
									"raw": "{\n\t\"id\": 4418886592175895,\n\t\"jsonrpc\": \"2.0\",\n\t\"method\": \"sessionRevokeAll\",\n\t\"params\": {\n\t\t\"query\": {\n\t\t\t\"sessionId\": \"{{sessionId}}\"\n\t\t}\n\t}\n}",
									"raw_para": [],
									"raw_schema": {
										"type": "object",
										"properties": {
											"id": {
												"type": "integer"
											},
											"jsonrpc": {
												"type": "string",
												"mock": {
													"mock": "2.0"
												}
											},
											"method": {
												"type": "string",
												"mock": {
													"mock": "sessionRevokeAll"
												}
											},
											"params": {
												"type": "object",
												"properties": {
													"query": {
														"type": "object",
														"properties": {
															"sessionId": {
																"type": "string",
																"mock": {
																	"mock": "{{sessionId}}"
																}
															}
														},
														"APIPOST_ORDERS": [
															"sessionId"
														],
														"required": [
															"sessionId"
														]
													}
												},
												"APIPOST_ORDERS": [
													"query"
												],
												"required": [
													"query"
												]
											}
										},
										"APIPOST_ORDERS": [
											"id",
											"jsonrpc",
											"method",
											"params"
										],
										"required": [
											"id",
											"jsonrpc",
											"method",
											"params"
										]
									}
								},
								"header": {
									"parameter": [
										{
											"is_checked": "1",
											"type": "Text",
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"not_null": "-1",
											"description": "",
											"field_type": "Text"
										}
									]
								}
							},
							"response": {
								"success": {
									"raw": "{\n\t\"id\": 4418886592175895,\n\t\"jsonrpc\": \"2.0\",\n\t\"result\": {\n\t\t\"response\": {\n\t\t\t\"responseCode\": 0\n\t\t}\n\t}\n}",
									"parameter": [],
									"expect": {
										"name": "OK",
										"isDefault": 1,
										"code": 200,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object",
											"properties": {
												"id": {
													"type": "integer"
												},
												"jsonrpc": {
													"type": "string"
												},
												"result": {
													"type": "object",
													"properties": {
														"response": {
															"type": "object",
															"properties": {
																"responseCode": {
																	"type": "integer"
																},
																"sessionId": {
																	"type": "string"
																}
															},
															"required": [
																"responseCode",
																"sessionId"
															]
														}
													},
													"required": [
														"response"
													]
												}
											},
											"required": [
												"id",
												"jsonrpc",
												"result"
											]
										}
									}
								},
								"error": {
									"raw": "",
									"parameter": [],
									"expect": {
										"name": "失败",
										"isDefault": -1,
										"code": 404,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object"
										}
									}
								},
								"77dd275e-497e-4aaa-9d37-814e2fc3f2d7": {
									"expect": {
										"name": "-32602",
										"isDefault": -1,
										"code": "200",
										"contentType": "json",
										"schema": "",
										"mock": "",
										"verifyType": "schema"
									},
									"raw": "{\n\t\"error\": {\n\t\t\"code\": -32602,\n\t\t\"message\": \"Invalid params\"\n\t},\n\t\"id\": 4418886592175895,\n\t\"jsonrpc\": \"2.0\"\n}",
									"parameter": []
								}
							},
							"children": []
						},
						{
							"target_type": "api",
							"name": "sessionRevokeId",
							"mark": "complated",
							"sort": 1,
							"tags": [],
							"created_uuid": "",
							"method": "POST",
							"mock": "{}",
							"mock_url": "",
							"request": {
								"url": "",
								"description": "",
								"event": {
									"pre_script": "",
									"test": ""
								},
								"pre_tasks": [],
								"post_tasks": [],
								"body": {
									"mode": "json",
									"parameter": [],
									"raw": "{\n\t\"id\": 884816487441427,\n\t\"jsonrpc\": \"2.0\",\n\t\"method\": \"sessionRevokeId\",\n\t\"params\": {\n\t\t\"query\": {\n\t\t\t\"sessionId\": \"{{sessionId}}\"\n\t\t}\n\t}\n}",
									"raw_para": [],
									"raw_schema": {
										"type": "object",
										"properties": {
											"id": {
												"type": "integer"
											},
											"jsonrpc": {
												"type": "string",
												"mock": {
													"mock": "2.0"
												}
											},
											"method": {
												"type": "string",
												"mock": {
													"mock": "sessionRevokeId"
												}
											},
											"params": {
												"type": "object",
												"properties": {
													"query": {
														"type": "object",
														"properties": {
															"sessionId": {
																"type": "string",
																"mock": {
																	"mock": "{{sessionId}}"
																}
															}
														},
														"APIPOST_ORDERS": [
															"sessionId"
														],
														"required": [
															"sessionId"
														]
													}
												},
												"APIPOST_ORDERS": [
													"query"
												],
												"required": [
													"query"
												]
											}
										},
										"APIPOST_ORDERS": [
											"id",
											"jsonrpc",
											"method",
											"params"
										],
										"required": [
											"id",
											"jsonrpc",
											"method",
											"params"
										]
									}
								},
								"header": {
									"parameter": [
										{
											"is_checked": "1",
											"type": "Text",
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"not_null": "-1",
											"description": "",
											"field_type": "Text"
										}
									]
								}
							},
							"response": {
								"success": {
									"raw": "{\n\t\"id\": 884816487441427,\n\t\"jsonrpc\": \"2.0\",\n\t\"result\": {\n\t\t\"response\": {\n\t\t\t\"responseCode\": 0,\n\t\t\t\"revokeId\": \"f891307a-daed-4ec6-b055-0f425959e4a4\"\n\t\t}\n\t}\n}",
									"parameter": [],
									"expect": {
										"name": "OK",
										"isDefault": 1,
										"code": 200,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object",
											"properties": {
												"id": {
													"type": "integer"
												},
												"jsonrpc": {
													"type": "string"
												},
												"result": {
													"type": "object",
													"properties": {
														"response": {
															"type": "object",
															"properties": {
																"responseCode": {
																	"type": "integer"
																},
																"sessionId": {
																	"type": "string",
																	"mock": {
																		"mock": "{{sessionId}}"
																	}
																}
															},
															"required": [
																"responseCode",
																"sessionId"
															],
															"APIPOST_ORDERS": [
																"responseCode",
																"sessionId"
															]
														}
													},
													"required": [
														"response"
													],
													"APIPOST_ORDERS": [
														"response"
													]
												}
											},
											"required": [
												"id",
												"jsonrpc",
												"result"
											],
											"APIPOST_ORDERS": [
												"id",
												"jsonrpc",
												"result"
											]
										}
									}
								},
								"error": {
									"raw": "{\n\t\"id\": 884816487441427,\n\t\"jsonrpc\": \"2.0\",\n\t\"result\": {\n\t\t\"response\": {\n\t\t\t\"responseCode\": 4,\n\t\t\t\"revokeId\": \"\"\n\t\t}\n\t}\n}",
									"parameter": [],
									"expect": {
										"name": "失败",
										"isDefault": -1,
										"code": 404,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object"
										}
									}
								}
							},
							"children": []
						},
						{
							"target_type": "api",
							"name": "sessionRefresh",
							"mark": "complated",
							"sort": 1,
							"tags": [],
							"created_uuid": "",
							"method": "POST",
							"mock": "{}",
							"mock_url": "",
							"request": {
								"url": "",
								"description": "",
								"event": {
									"pre_script": "",
									"test": ""
								},
								"pre_tasks": [],
								"post_tasks": [],
								"body": {
									"mode": "json",
									"parameter": [],
									"raw": "{\n\t\"id\": -3212930462112128,\n\t\"jsonrpc\": \"2.0\",\n\t\"method\": \"sessionRefresh\",\n\t\"params\": {\n\t\t\"query\": {\n\t\t\t\"sessionId\": \"{{sessionId}}\"\n\t\t}\n\t}\n}",
									"raw_para": [],
									"raw_schema": {
										"type": "object",
										"properties": {
											"id": {
												"type": "integer"
											},
											"jsonrpc": {
												"type": "string",
												"mock": {
													"mock": "2.0"
												}
											},
											"method": {
												"type": "string",
												"mock": {
													"mock": "sessionRefresh"
												}
											},
											"params": {
												"type": "object",
												"properties": {
													"query": {
														"type": "object",
														"properties": {
															"sessionId": {
																"type": "string",
																"mock": {
																	"mock": "{{sessionId}}"
																}
															}
														},
														"APIPOST_ORDERS": [
															"sessionId"
														],
														"required": [
															"sessionId"
														]
													}
												},
												"APIPOST_ORDERS": [
													"query"
												],
												"required": [
													"query"
												]
											}
										},
										"APIPOST_ORDERS": [
											"id",
											"jsonrpc",
											"method",
											"params"
										],
										"required": [
											"id",
											"jsonrpc",
											"method",
											"params"
										]
									}
								},
								"header": {
									"parameter": [
										{
											"is_checked": "1",
											"type": "Text",
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"not_null": "-1",
											"description": "",
											"field_type": "Text"
										}
									]
								}
							},
							"response": {
								"success": {
									"raw": "{\n\t\"id\": -3212930462112128,\n\t\"jsonrpc\": \"2.0\",\n\t\"result\": {\n\t\t\"response\": {\n\t\t\t\"responseCode\": 0\n\t\t}\n\t}\n}",
									"parameter": [
										{
											"key": "id",
											"value": "-3212930462112128",
											"description": "",
											"not_null": 1,
											"field_type": "Integer",
											"type": "Text",
											"is_checked": 1
										},
										{
											"key": "jsonrpc",
											"value": "2.0",
											"description": "",
											"not_null": 1,
											"field_type": "String",
											"type": "Text",
											"is_checked": 1
										},
										{
											"key": "result",
											"value": "",
											"description": "",
											"not_null": 1,
											"field_type": "Object",
											"type": "Text",
											"is_checked": 1
										},
										{
											"key": "result.response",
											"value": "",
											"description": "",
											"not_null": 1,
											"field_type": "Object",
											"type": "Text",
											"is_checked": 1
										},
										{
											"key": "result.response.responseCode",
											"value": "0",
											"description": "",
											"not_null": 1,
											"field_type": "Integer",
											"type": "Text",
											"is_checked": 1
										}
									],
									"expect": {
										"name": "OK",
										"isDefault": 1,
										"code": 200,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object",
											"properties": {
												"id": {
													"type": "integer"
												},
												"jsonrpc": {
													"type": "string"
												},
												"result": {
													"type": "object",
													"properties": {
														"response": {
															"type": "object",
															"properties": {
																"responseCode": {
																	"type": "integer"
																}
															},
															"required": [
																"responseCode"
															],
															"APIPOST_ORDERS": [
																"responseCode"
															]
														}
													},
													"required": [
														"response"
													],
													"APIPOST_ORDERS": [
														"response"
													]
												}
											},
											"required": [
												"id",
												"jsonrpc",
												"result"
											],
											"APIPOST_ORDERS": [
												"id",
												"jsonrpc",
												"result"
											]
										}
									}
								},
								"error": {
									"raw": "",
									"parameter": [],
									"expect": {
										"name": "失败",
										"isDefault": -1,
										"code": 404,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object"
										}
									}
								}
							},
							"children": []
						},
						{
							"target_type": "api",
							"name": "sessionLogin",
							"mark": "complated",
							"sort": 1,
							"tags": [],
							"created_uuid": "UBAPH1393C43",
							"method": "POST",
							"mock": "{}",
							"mock_url": "",
							"request": {
								"url": "",
								"description": "",
								"event": {
									"pre_script": "",
									"test": "// var session_id = response.json.result.response.sessionId;\napt.environment.set(\"sessionId\", response.json.result.response.sessionId);"
								},
								"pre_tasks": [],
								"post_tasks": [
									{
										"type": "pickVars",
										"enabled": 1,
										"data": {
											"source": "responseJson",
											"variables": [
												{
													"name": "sessionId",
													"type": "envVars",
													"expression": "$.result.response.sessionId"
												}
											]
										},
										"id": "ed5451cd-428a-41f5-8381-2ec8fe2aed42"
									}
								],
								"body": {
									"mode": "json",
									"parameter": [],
									"raw": "{\n\t\"id\": -3346680452603756,\n\t\"jsonrpc\": \"2.0\",\n\t\"method\": \"sessionLogin\",\n\t\"params\": {\n\t\t\"query\": {\n\t\t\t\"timeout\": {\n\t\t\t\t\"valid\": false,\n\t\t\t\t\"time\": 1663372036854775808,\n\t\t\t\t\"resolution\": 1\n\t\t\t},\n\t\t\t\"userName\": \"admin\",\n\t\t\t\"password\": \"bbZGs3wFsB35\"\n\t\t}\n\t}\n}",
									"raw_para": [],
									"raw_schema": {
										"type": "object",
										"properties": {
											"id": {
												"type": "integer"
											},
											"jsonrpc": {
												"type": "string",
												"mock": {
													"mock": "2.0"
												}
											},
											"method": {
												"type": "string",
												"mock": {
													"mock": "sessionLogin"
												}
											},
											"params": {
												"type": "object",
												"properties": {
													"query": {
														"type": "object",
														"properties": {
															"timeout": {
																"type": "object",
																"properties": {
																	"valid": {
																		"type": "boolean",
																		"mock": {
																			"mock": "false"
																		}
																	},
																	"time": {
																		"type": "integer",
																		"mock": {
																			"mock": "1663372036854775807"
																		}
																	},
																	"resolution": {
																		"type": "number",
																		"mock": {
																			"mock": "1"
																		}
																	}
																},
																"APIPOST_ORDERS": [
																	"valid",
																	"time",
																	"resolution"
																],
																"required": [
																	"valid",
																	"time",
																	"resolution"
																]
															},
															"userName": {
																"type": "string",
																"mock": {
																	"mock": "admin"
																}
															},
															"password": {
																"type": "string",
																"mock": {
																	"mock": "bbZGs3wFsB35"
																}
															}
														},
														"APIPOST_ORDERS": [
															"timeout",
															"userName",
															"password"
														],
														"required": [
															"timeout",
															"userName",
															"password"
														]
													}
												},
												"APIPOST_ORDERS": [
													"query"
												],
												"required": [
													"query"
												]
											}
										},
										"APIPOST_ORDERS": [
											"id",
											"jsonrpc",
											"method",
											"params"
										],
										"required": [
											"id",
											"jsonrpc",
											"method",
											"params"
										]
									}
								},
								"header": {
									"parameter": [
										{
											"is_checked": "1",
											"type": "Text",
											"key": "Content-Type",
											"value": "application/json",
											"not_null": "-1",
											"description": "",
											"field_type": "Text"
										}
									]
								}
							},
							"response": {
								"success": {
									"raw": "{\n\t\"id\": 1898482435650171,\n\t\"jsonrpc\": \"2.0\",\n\t\"result\": {\n\t\t\"response\": {\n\t\t\t\"responseCode\": 0,\n\t\t\t\"sessionId\": \"3ab1cce1-e7a4-48f1-ab46-170747d0ff05\"\n\t\t}\n\t}\n}",
									"parameter": [],
									"expect": {
										"name": "OK",
										"isDefault": 1,
										"code": 200,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object",
											"properties": {
												"id": {
													"type": "integer"
												},
												"jsonrpc": {
													"type": "string"
												},
												"result": {
													"type": "object",
													"properties": {
														"response": {
															"type": "object",
															"properties": {
																"responseCode": {
																	"type": "integer"
																},
																"sessionId": {
																	"type": "string",
																	"mock": {
																		"mock": "{{sessionId}}"
																	}
																}
															},
															"required": [
																"responseCode",
																"sessionId"
															],
															"APIPOST_ORDERS": [
																"responseCode",
																"sessionId"
															]
														}
													},
													"required": [
														"response"
													],
													"APIPOST_ORDERS": [
														"response"
													]
												}
											},
											"required": [
												"id",
												"jsonrpc",
												"result"
											],
											"APIPOST_ORDERS": [
												"id",
												"jsonrpc",
												"result"
											]
										}
									}
								},
								"error": {
									"raw": "{\n\t\"id\": 4858981432643327,\n\t\"jsonrpc\": \"2.0\",\n\t\"result\": {\n\t\t\"response\": {\n\t\t\t\"responseCode\": 562949953421313,\n\t\t\t\"sessionId\": \"\"\n\t\t}\n\t}\n}",
									"parameter": [],
									"expect": {
										"name": "失败",
										"isDefault": -1,
										"code": 404,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object"
										}
									}
								}
							},
							"children": []
						}
					]
				},
				{
					"target_type": "folder",
					"name": "AboutBuild",
					"mark": "developing",
					"sort": 1,
					"tags": [],
					"created_uuid": "",
					"request": {
						"description": ""
					},
					"children": [
						{
							"target_type": "api",
							"name": "aboutBuildList",
							"mark": "developing",
							"sort": 1,
							"tags": [],
							"created_uuid": "",
							"method": "POST",
							"mock": "{}",
							"mock_url": "",
							"request": {
								"url": "",
								"description": "",
								"event": {
									"pre_script": "",
									"test": ""
								},
								"pre_tasks": [],
								"post_tasks": [],
								"body": {
									"mode": "json",
									"parameter": [],
									"raw": "{\"0\":\"s\",\"1\":\"e\",\"2\":\"s\",\"3\":\"s\",\"4\":\"i\",\"5\":\"o\",\"6\":\"n\",\"7\":\"L\",\"8\":\"o\",\"9\":\"g\",\"10\":\"i\",\"11\":\"n\",\"query\":{\"timeout\":{\"valid\":true,\"time\":1663372036854775800,\"resolution\":1},\"userName\":\"admin\",\"password\":\"bbZGs3wFsB35\"}}",
									"raw_para": [],
									"raw_schema": {
										"type": "object",
										"properties": {
											"id": {
												"type": "integer"
											},
											"jsonrpc": {
												"type": "string",
												"mock": {
													"mock": "2.0"
												}
											},
											"method": {
												"type": "string",
												"mock": {
													"mock": "sessionLogout"
												}
											},
											"params": {
												"type": "object",
												"properties": {
													"query": {
														"type": "object",
														"properties": {
															"sessionId": {
																"type": "string",
																"mock": {
																	"mock": "{{sessionId}}"
																}
															}
														},
														"APIPOST_ORDERS": [
															"sessionId"
														],
														"required": [
															"sessionId"
														]
													}
												},
												"APIPOST_ORDERS": [
													"query"
												],
												"required": [
													"query"
												]
											}
										},
										"APIPOST_ORDERS": [
											"id",
											"jsonrpc",
											"method",
											"params"
										],
										"required": [
											"id",
											"jsonrpc",
											"method",
											"params"
										]
									}
								},
								"header": {
									"parameter": [
										{
											"is_checked": "1",
											"type": "Text",
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"not_null": "-1",
											"description": "",
											"field_type": "Text"
										}
									]
								}
							},
							"response": {
								"success": {
									"raw": "{\n    \"id\": 326,\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"response\": {\n            \"responseCode\": 0\n        }\n    }\n}",
									"parameter": [],
									"expect": {
										"name": "OK",
										"isDefault": 1,
										"code": 200,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object",
											"properties": {
												"id": {
													"type": "integer"
												},
												"jsonrpc": {
													"type": "string"
												},
												"result": {
													"type": "object",
													"properties": {
														"response": {
															"type": "object",
															"properties": {
																"responseCode": {
																	"type": "integer"
																},
																"aboutString": {
																	"type": "string"
																}
															},
															"required": [
																"responseCode"
															],
															"APIPOST_ORDERS": [
																"responseCode",
																"aboutString"
															]
														}
													},
													"required": [
														"response"
													],
													"APIPOST_ORDERS": [
														"response"
													]
												}
											},
											"required": [
												"id",
												"jsonrpc",
												"result"
											],
											"APIPOST_ORDERS": [
												"id",
												"jsonrpc",
												"result"
											]
										}
									}
								},
								"error": {
									"raw": "",
									"parameter": [],
									"expect": {
										"name": "失败",
										"isDefault": -1,
										"code": 404,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object"
										}
									}
								}
							},
							"children": []
						},
						{
							"target_type": "api",
							"name": "aboutBuildList Copy",
							"mark": "developing",
							"sort": 1,
							"tags": [],
							"created_uuid": "",
							"method": "POST",
							"mock": "{}",
							"mock_url": "",
							"request": {
								"url": "",
								"description": "",
								"event": {
									"pre_script": "",
									"test": ""
								},
								"pre_tasks": [],
								"post_tasks": [],
								"body": {
									"mode": "json",
									"parameter": [],
									"raw": "{\"0\":\"s\",\"1\":\"e\",\"2\":\"s\",\"3\":\"s\",\"4\":\"i\",\"5\":\"o\",\"6\":\"n\",\"7\":\"L\",\"8\":\"o\",\"9\":\"g\",\"10\":\"i\",\"11\":\"n\",\"query\":{\"timeout\":{\"valid\":true,\"time\":1663372036854775800,\"resolution\":1},\"userName\":\"admin\",\"password\":\"bbZGs3wFsB35\"}}",
									"raw_para": [],
									"raw_schema": {
										"type": "object",
										"properties": {
											"id": {
												"type": "integer"
											},
											"jsonrpc": {
												"type": "string",
												"mock": {
													"mock": "2.0"
												}
											},
											"method": {
												"type": "string",
												"mock": {
													"mock": "sessionLogout"
												}
											},
											"params": {
												"type": "object",
												"properties": {
													"query": {
														"type": "object",
														"properties": {
															"sessionId": {
																"type": "string",
																"mock": {
																	"mock": "{{sessionId}}"
																}
															}
														},
														"APIPOST_ORDERS": [
															"sessionId"
														],
														"required": [
															"sessionId"
														]
													}
												},
												"APIPOST_ORDERS": [
													"query"
												],
												"required": [
													"query"
												]
											}
										},
										"APIPOST_ORDERS": [
											"id",
											"jsonrpc",
											"method",
											"params"
										],
										"required": [
											"id",
											"jsonrpc",
											"method",
											"params"
										]
									}
								},
								"header": {
									"parameter": [
										{
											"is_checked": "1",
											"type": "Text",
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"not_null": "-1",
											"description": "",
											"field_type": "Text"
										}
									]
								}
							},
							"response": {
								"success": {
									"raw": "{\n    \"id\": 326,\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"response\": {\n            \"responseCode\": 0\n        }\n    }\n}",
									"parameter": [],
									"expect": {
										"name": "OK",
										"isDefault": 1,
										"code": 200,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object",
											"properties": {
												"id": {
													"type": "integer"
												},
												"jsonrpc": {
													"type": "string"
												},
												"result": {
													"type": "object",
													"properties": {
														"response": {
															"type": "object",
															"properties": {
																"responseCode": {
																	"type": "integer"
																},
																"aboutString": {
																	"type": "string"
																}
															},
															"required": [
																"responseCode"
															],
															"APIPOST_ORDERS": [
																"responseCode",
																"aboutString"
															]
														}
													},
													"required": [
														"response"
													],
													"APIPOST_ORDERS": [
														"response"
													]
												}
											},
											"required": [
												"id",
												"jsonrpc",
												"result"
											],
											"APIPOST_ORDERS": [
												"id",
												"jsonrpc",
												"result"
											]
										}
									}
								},
								"error": {
									"raw": "",
									"parameter": [],
									"expect": {
										"name": "失败",
										"isDefault": -1,
										"code": 404,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object"
										}
									}
								}
							},
							"children": []
						}
					]
				},
				{
					"target_type": "folder",
					"name": "Diagnostic",
					"mark": "developing",
					"sort": 1,
					"tags": [],
					"created_uuid": "",
					"request": {
						"description": ""
					},
					"children": [
						{
							"target_type": "api",
							"name": "diagnosticList",
							"mark": "developing",
							"sort": 1,
							"tags": [],
							"created_uuid": "",
							"method": "POST",
							"mock": "{}",
							"mock_url": "",
							"request": {
								"url": "",
								"description": "",
								"event": {
									"pre_script": "",
									"test": ""
								},
								"pre_tasks": [],
								"post_tasks": [],
								"body": {
									"mode": "json",
									"parameter": [],
									"raw": "{\"0\":\"s\",\"1\":\"e\",\"2\":\"s\",\"3\":\"s\",\"4\":\"i\",\"5\":\"o\",\"6\":\"n\",\"7\":\"L\",\"8\":\"o\",\"9\":\"g\",\"10\":\"i\",\"11\":\"n\",\"query\":{\"timeout\":{\"valid\":true,\"time\":1663372036854775800,\"resolution\":1},\"userName\":\"admin\",\"password\":\"bbZGs3wFsB35\"}}",
									"raw_para": [],
									"raw_schema": {
										"type": "object",
										"properties": {
											"id": {
												"type": "integer"
											},
											"jsonrpc": {
												"type": "string",
												"mock": {
													"mock": "2.0"
												}
											},
											"method": {
												"type": "string",
												"mock": {
													"mock": "diagnosticList"
												}
											},
											"params": {
												"type": "object",
												"properties": {
													"query": {
														"type": "object",
														"properties": {
															"sessionId": {
																"type": "string",
																"mock": {
																	"mock": "{{sessionId}}"
																}
															}
														},
														"APIPOST_ORDERS": [
															"sessionId"
														],
														"required": [
															"sessionId"
														]
													}
												},
												"APIPOST_ORDERS": [
													"query"
												],
												"required": [
													"query"
												]
											}
										},
										"APIPOST_ORDERS": [
											"id",
											"jsonrpc",
											"method",
											"params"
										],
										"required": [
											"id",
											"jsonrpc",
											"method",
											"params"
										]
									}
								},
								"header": {
									"parameter": [
										{
											"is_checked": "1",
											"type": "Text",
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"not_null": "-1",
											"description": "",
											"field_type": "Text"
										}
									]
								}
							},
							"response": {
								"success": {
									"raw": "{\n    \"id\": 326,\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"response\": {\n            \"responseCode\": 0\n        }\n    }\n}",
									"parameter": [],
									"expect": {
										"name": "OK",
										"isDefault": 1,
										"code": 200,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object",
											"properties": {
												"id": {
													"type": "integer"
												},
												"jsonrpc": {
													"type": "string"
												},
												"result": {
													"type": "object",
													"properties": {
														"response": {
															"type": "object",
															"properties": {
																"responseCode": {
																	"type": "integer"
																},
																"sessionId": {
																	"type": "string"
																}
															},
															"required": [
																"responseCode",
																"sessionId"
															]
														}
													},
													"required": [
														"response"
													]
												}
											},
											"required": [
												"id",
												"jsonrpc",
												"result"
											]
										}
									}
								},
								"error": {
									"raw": "",
									"parameter": [],
									"expect": {
										"name": "失败",
										"isDefault": -1,
										"code": 404,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object"
										}
									}
								}
							},
							"children": []
						},
						{
							"target_type": "api",
							"name": "diagnosticClear",
							"mark": "developing",
							"sort": 1,
							"tags": [],
							"created_uuid": "",
							"method": "POST",
							"mock": "{}",
							"mock_url": "",
							"request": {
								"url": "",
								"description": "",
								"event": {
									"pre_script": "",
									"test": ""
								},
								"pre_tasks": [],
								"post_tasks": [],
								"body": {
									"mode": "json",
									"parameter": [],
									"raw": "{\"0\":\"s\",\"1\":\"e\",\"2\":\"s\",\"3\":\"s\",\"4\":\"i\",\"5\":\"o\",\"6\":\"n\",\"7\":\"L\",\"8\":\"o\",\"9\":\"g\",\"10\":\"i\",\"11\":\"n\",\"query\":{\"timeout\":{\"valid\":true,\"time\":1663372036854775800,\"resolution\":1},\"userName\":\"admin\",\"password\":\"bbZGs3wFsB35\"}}",
									"raw_para": [],
									"raw_schema": {
										"type": "object",
										"properties": {
											"id": {
												"type": "integer"
											},
											"jsonrpc": {
												"type": "string",
												"mock": {
													"mock": "2.0"
												}
											},
											"method": {
												"type": "string",
												"mock": {
													"mock": "diagnosticClear"
												}
											},
											"params": {
												"type": "object",
												"properties": {
													"query": {
														"type": "object",
														"properties": {
															"sessionId": {
																"type": "string",
																"mock": {
																	"mock": "{{sessionId}}"
																}
															}
														},
														"APIPOST_ORDERS": [
															"sessionId"
														],
														"required": [
															"sessionId"
														]
													}
												},
												"APIPOST_ORDERS": [
													"query"
												],
												"required": [
													"query"
												]
											}
										},
										"APIPOST_ORDERS": [
											"id",
											"jsonrpc",
											"method",
											"params"
										],
										"required": [
											"id",
											"jsonrpc",
											"method",
											"params"
										]
									}
								},
								"header": {
									"parameter": [
										{
											"is_checked": "1",
											"type": "Text",
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"not_null": "-1",
											"description": "",
											"field_type": "Text"
										}
									]
								}
							},
							"response": {
								"success": {
									"raw": "{\n    \"id\": 326,\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"response\": {\n            \"responseCode\": 0\n        }\n    }\n}",
									"parameter": [],
									"expect": {
										"name": "OK",
										"isDefault": 1,
										"code": 200,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object",
											"properties": {
												"id": {
													"type": "integer"
												},
												"jsonrpc": {
													"type": "string"
												},
												"result": {
													"type": "object",
													"properties": {
														"response": {
															"type": "object",
															"properties": {
																"responseCode": {
																	"type": "integer"
																},
																"sessionId": {
																	"type": "string"
																}
															},
															"required": [
																"responseCode",
																"sessionId"
															]
														}
													},
													"required": [
														"response"
													]
												}
											},
											"required": [
												"id",
												"jsonrpc",
												"result"
											]
										}
									}
								},
								"error": {
									"raw": "",
									"parameter": [],
									"expect": {
										"name": "失败",
										"isDefault": -1,
										"code": 404,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object"
										}
									}
								}
							},
							"children": []
						}
					]
				},
				{
					"target_type": "folder",
					"name": "Config",
					"mark": "developing",
					"sort": 1,
					"tags": [],
					"created_uuid": "",
					"request": {
						"description": ""
					},
					"children": [
						{
							"target_type": "api",
							"name": "configDefaultList",
							"mark": "developing",
							"sort": 1,
							"tags": [],
							"created_uuid": "",
							"method": "POST",
							"mock": "{}",
							"mock_url": "",
							"request": {
								"url": "",
								"description": "",
								"event": {
									"pre_script": "",
									"test": ""
								},
								"pre_tasks": [],
								"post_tasks": [],
								"body": {
									"mode": "json",
									"parameter": [],
									"raw": "{\"0\":\"s\",\"1\":\"e\",\"2\":\"s\",\"3\":\"s\",\"4\":\"i\",\"5\":\"o\",\"6\":\"n\",\"7\":\"L\",\"8\":\"o\",\"9\":\"g\",\"10\":\"i\",\"11\":\"n\",\"query\":{\"timeout\":{\"valid\":true,\"time\":1663372036854775800,\"resolution\":1},\"userName\":\"admin\",\"password\":\"bbZGs3wFsB35\"}}",
									"raw_para": [],
									"raw_schema": {
										"type": "object",
										"properties": {
											"id": {
												"type": "integer"
											},
											"jsonrpc": {
												"type": "string",
												"mock": {
													"mock": "2.0"
												}
											},
											"method": {
												"type": "string",
												"mock": {
													"mock": "configDefaultList"
												}
											},
											"params": {
												"type": "object",
												"properties": {
													"query": {
														"type": "object",
														"properties": {
															"sessionId": {
																"type": "string",
																"mock": {
																	"mock": "{{sessionId}}"
																}
															}
														},
														"APIPOST_ORDERS": [
															"sessionId"
														],
														"required": [
															"sessionId"
														]
													}
												},
												"APIPOST_ORDERS": [
													"query"
												],
												"required": [
													"query"
												]
											}
										},
										"APIPOST_ORDERS": [
											"id",
											"jsonrpc",
											"method",
											"params"
										],
										"required": [
											"id",
											"jsonrpc",
											"method",
											"params"
										]
									}
								},
								"header": {
									"parameter": [
										{
											"is_checked": "1",
											"type": "Text",
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"not_null": "-1",
											"description": "",
											"field_type": "Text"
										}
									]
								}
							},
							"response": {
								"success": {
									"raw": "{\n    \"id\": 421,\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"response\": {\n            \"configEntries\": [\n                {\n                    \"key\": \"ClientLaserMask.laser.maxRangeLines\",\n                    \"value\": []\n                },\n                {\n                    \"key\": \"ClientLaserMask.laser.minRangeLines\",\n                    \"value\": [\n                        -0.13671,\n                        0.41833,\n                        -0.00392,\n                        0.54181,\n                        -0.13904,\n                        -0.12683,\n                        -0.05051,\n                        -0.25496\n                    ]\n                },\n                {\n                    \"key\": \"ClientLaserMask.laser2.maxRangeLines\",\n                    \"value\": []\n                },\n                {\n                    \"key\": \"ClientLaserMask.laser2.minRangeLines\",\n                    \"value\": []\n                },\n                {\n                    \"key\": \"Licensing.licensingMethod\",\n                    \"value\": \"WIBUDONGLE\"\n                },\n                {\n                    \"key\": \"Licensing.preferredDongleSerial\",\n                    \"value\": \"\"\n                },\n                {\n                    \"key\": \"Certificate.enableRevocationList\",\n                    \"value\": true\n                },\n                {\n                    \"key\": \"ClientSensor.enableImu\",\n                    \"value\": false\n                },\n                {\n                    \"key\": \"ClientSensor.imuAddress\",\n                    \"value\": \"172.17.0.1:1112\"\n                },\n                {\n                    \"key\": \"ClientSensor.enableLaser2\",\n                    \"value\": false\n                },\n                {\n                    \"key\": \"ClientSensor.imuEncryption\",\n                    \"value\": false\n                },\n                {\n                    \"key\": \"ClientSensor.enableOdometry\",\n                    \"value\": false\n                },\n                {\n                    \"key\": \"ClientSensor.odometryAddress\",\n                    \"value\": \"172.17.0.1:1111\"\n                },\n                {\n                    \"key\": \"ClientSensor.sensorFusionMode\",\n                    \"value\": \"NONE\"\n                },\n                {\n                    \"key\": \"ClientSensor.odometryEncryption\",\n                    \"value\": false\n                },\n                {\n                    \"key\": \"ClientSensor.enableReflectorMarkers\",\n                    \"value\": false\n                },\n                {\n                    \"key\": \"ClientSensor.laser.type\",\n                    \"value\": \"simple\"\n                },\n                {\n                    \"key\": \"ClientSensor.laser.address\",\n                    \"value\": \"172.17.0.1:9090\"\n                },\n                {\n                    \"key\": \"ClientSensor.laser.clientAddress\",\n                    \"value\": \"192.168.0.100:6060\"\n                },\n                {\n                    \"key\": \"ClientSensor.laser.useIntensities\",\n                    \"value\": false\n                },\n                {\n                    \"key\": \"ClientSensor.laser.mirrorLaserScans\",\n                    \"value\": false\n                },\n                {\n                    \"key\": \"ClientSensor.laser.vehicleTransformLaser.x\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.laser.vehicleTransformLaser.y\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.laser.vehicleTransformLaser.z\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.laser.vehicleTransformLaser.yaw\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.laser.vehicleTransformLaser.roll\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.laser.vehicleTransformLaser.pitch\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.laser2.type\",\n                    \"value\": \"simple\"\n                },\n                {\n                    \"key\": \"ClientSensor.laser2.address\",\n                    \"value\": \"172.17.0.1:2113\"\n                },\n                {\n                    \"key\": \"ClientSensor.laser2.clientAddress\",\n                    \"value\": \"192.168.0.100:6061\"\n                },\n                {\n                    \"key\": \"ClientSensor.laser2.useIntensities\",\n                    \"value\": false\n                },\n                {\n                    \"key\": \"ClientSensor.laser2.mirrorLaserScans\",\n                    \"value\": false\n                },\n                {\n                    \"key\": \"ClientSensor.laser2.vehicleTransformLaser.x\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.laser2.vehicleTransformLaser.y\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.laser2.vehicleTransformLaser.z\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.laser2.vehicleTransformLaser.yaw\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.laser2.vehicleTransformLaser.roll\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.laser2.vehicleTransformLaser.pitch\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.vehicleTransformImu.x\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.vehicleTransformImu.y\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.vehicleTransformImu.z\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.vehicleTransformImu.yaw\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.vehicleTransformImu.roll\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.vehicleTransformImu.pitch\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.vehicleTransformOdometry.x\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.vehicleTransformOdometry.y\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.vehicleTransformOdometry.z\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.vehicleTransformOdometry.yaw\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.vehicleTransformOdometry.roll\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.vehicleTransformOdometry.pitch\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.customReflectorParameters.enabled\",\n                    \"value\": true\n                },\n                {\n                    \"key\": \"ClientSensor.customReflectorParameters.windowSize\",\n                    \"value\": 0.15\n                },\n                {\n                    \"key\": \"ClientSensor.customReflectorParameters.markerWidth\",\n                    \"value\": 0.05\n                },\n                {\n                    \"key\": \"ClientSensor.customReflectorParameters.maxDistance\",\n                    \"value\": 15.0\n                },\n                {\n                    \"key\": \"ClientSensor.customReflectorParameters.minDistance\",\n                    \"value\": 0.5\n                },\n                {\n                    \"key\": \"ClientSensor.customReflectorParameters.minWallLength\",\n                    \"value\": 0.15\n                },\n                {\n                    \"key\": \"ClientSensor.customReflectorParameters.minWallPoints\",\n                    \"value\": 5\n                },\n                {\n                    \"key\": \"ClientSensor.customReflectorParameters.maxWallFitError\",\n                    \"value\": 0.001\n                },\n                {\n                    \"key\": \"ClientSensor.customReflectorParameters.maxWallViewingAngle\",\n                    \"value\": 90.0\n                },\n                {\n                    \"key\": \"ClientSensor.customReflectorParameters.minWallViewingAngle\",\n                    \"value\": 10.0\n                },\n                {\n                    \"key\": \"ClientSensor.customReflectorParameters.highIntensityThreshold\",\n                    \"value\": 500.0\n                },\n                {\n                    \"key\": \"ClientSensor.customReflectorParameters.allowedMarkerPointsError\",\n                    \"value\": 2\n                },\n                {\n                    \"key\": \"ClientSensor.customReflectorParameters.minIntensityChangeFactor\",\n                    \"value\": 0.33\n                },\n                {\n                    \"key\": \"ClientSensor.customReflectorParameters.markerWidthToleranceFactor\",\n                    \"value\": 1.5\n                },\n                {\n                    \"key\": \"ClientSensor.customReflectorParameters.expectedAdditionalMarkerPoints\",\n                    \"value\": 0\n                },\n                {\n                    \"key\": \"ClientSensor.vehicleErrorModelTransformImu.x\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.vehicleErrorModelTransformImu.y\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.vehicleErrorModelTransformImu.z\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.vehicleErrorModelTransformImu.yaw\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.vehicleErrorModelTransformImu.roll\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.vehicleErrorModelTransformImu.pitch\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.vehicleErrorModelTransformImu.enabled\",\n                    \"value\": false\n                },\n                {\n                    \"key\": \"ClientSensor.vehicleErrorModelTransformOdometry.x\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.vehicleErrorModelTransformOdometry.y\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.vehicleErrorModelTransformOdometry.z\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.vehicleErrorModelTransformOdometry.yaw\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.vehicleErrorModelTransformOdometry.roll\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.vehicleErrorModelTransformOdometry.pitch\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.vehicleErrorModelTransformOdometry.enabled\",\n                    \"value\": false\n                },\n                {\n                    \"key\": \"SupportReport.recordDriveData\",\n                    \"value\": true\n                },\n                {\n                    \"key\": \"SupportReport.driveDataDurationHours\",\n                    \"value\": 2\n                },\n                {\n                    \"key\": \"ClientLaserMask.laser.maxRange\",\n                    \"value\": 100.0\n                },\n                {\n                    \"key\": \"ClientLaserMask.laser.minRange\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientLaserMask.laser2.maxRange\",\n                    \"value\": 50.0\n                },\n                {\n                    \"key\": \"ClientLaserMask.laser2.minRange\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"SupportRecovery.enableAutosave\",\n                    \"value\": true\n                },\n                {\n                    \"key\": \"SupportRecovery.numberOfAutosaves\",\n                    \"value\": 5\n                },\n                {\n                    \"key\": \"SupportRecovery.autosaveIntervalDays\",\n                    \"value\": 1\n                },\n                {\n                    \"key\": \"ClientApplication.vehicleName\",\n                    \"value\": \"Vehicle_01\"\n                },\n                {\n                    \"key\": \"ClientApplication.mapServerAddress\",\n                    \"value\": \"172.17.0.1\"\n                },\n                {\n                    \"key\": \"ClientLocalization.autostart\",\n                    \"value\": true\n                },\n                {\n                    \"key\": \"ClientLocalization.activeMapName\",\n                    \"value\": \"office1103_2022-11-03_15-08-11_built_001_aligned_001\"\n                },\n                {\n                    \"key\": \"ClientLocalization.sendMapUpdates\",\n                    \"value\": true\n                },\n                {\n                    \"key\": \"ClientLocalization.storeMapHistory\",\n                    \"value\": true\n                },\n                {\n                    \"key\": \"ClientLocalization.mapHistoryDuration\",\n                    \"value\": 50\n                }\n            ],\n            \"responseCode\": 0\n        }\n    }\n}",
									"parameter": [],
									"expect": {
										"name": "OK",
										"isDefault": 1,
										"code": 200,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object",
											"properties": {
												"id": {
													"type": "integer"
												},
												"jsonrpc": {
													"type": "string"
												},
												"result": {
													"type": "object",
													"properties": {
														"response": {
															"type": "object",
															"properties": {
																"configEntries": {
																	"type": "array",
																	"items": {
																		"type": "object",
																		"properties": {
																			"key": {
																				"type": "string"
																			},
																			"value": {
																				"type": [
																					"array",
																					"string",
																					"boolean",
																					"integer",
																					"number"
																				],
																				"items": {
																					"type": "number"
																				}
																			}
																		},
																		"required": [
																			"key",
																			"value"
																		]
																	}
																},
																"responseCode": {
																	"type": "integer"
																}
															},
															"required": [
																"configEntries",
																"responseCode"
															]
														}
													},
													"required": [
														"response"
													]
												}
											},
											"required": [
												"id",
												"jsonrpc",
												"result"
											]
										}
									}
								},
								"error": {
									"raw": "",
									"parameter": [],
									"expect": {
										"name": "失败",
										"isDefault": -1,
										"code": 404,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object"
										}
									}
								}
							},
							"children": []
						},
						{
							"target_type": "api",
							"name": "configSet",
							"mark": "developing",
							"sort": 1,
							"tags": [],
							"created_uuid": "",
							"method": "POST",
							"mock": "{}",
							"mock_url": "",
							"request": {
								"url": "",
								"description": "",
								"event": {
									"pre_script": "pm.variables.set(si, pm.environment.get(\"sessionId\"));",
									"test": ""
								},
								"pre_tasks": [],
								"post_tasks": [],
								"body": {
									"mode": "json",
									"parameter": [],
									"raw": "{\"0\":\"c\",\"1\":\"o\",\"2\":\"n\",\"3\":\"f\",\"4\":\"i\",\"5\":\"g\",\"6\":\"S\",\"7\":\"e\",\"8\":\"t\",\"query\":{\"sessionId\":\"80\",\"conﬁgEntries\":[{\"key\":\"pariatur consequat consectetur\",\"value\":\"Duis voluptate exercitation\"},{\"key\":\"Excepteur nostrud\",\"value\":\"labore tempor sit\"},{\"key\":\"Duis\",\"value\":\"irure\"},{\"key\":\"aliqua\",\"value\":\"eu cillum nulla Excepteur\"},{\"key\":\"enim est eu\",\"value\":\"exercitation\"}]}}",
									"raw_para": [],
									"raw_schema": {
										"type": "object",
										"properties": {
											"id": {
												"type": "integer"
											},
											"jsonrpc": {
												"type": "string",
												"mock": {
													"mock": "2.0"
												}
											},
											"method": {
												"type": "string",
												"mock": {
													"mock": "configSet"
												}
											},
											"params": {
												"type": "object",
												"properties": {
													"query": {
														"type": "object",
														"properties": {
															"sessionId": {
																"type": "string",
																"mock": {
																	"mock": "{{sessionId}}"
																}
															},
															"conﬁgEntries": {
																"type": "array",
																"items": {
																	"type": "object",
																	"properties": {
																		"key": {
																			"type": "string"
																		},
																		"value": {
																			"type": "string"
																		}
																	},
																	"APIPOST_ORDERS": [
																		"key",
																		"value"
																	],
																	"required": [
																		"key",
																		"value"
																	]
																}
															}
														},
														"APIPOST_ORDERS": [
															"sessionId",
															"conﬁgEntries"
														],
														"required": [
															"sessionId",
															"conﬁgEntries"
														]
													}
												},
												"APIPOST_ORDERS": [
													"query"
												],
												"required": [
													"query"
												]
											}
										},
										"APIPOST_ORDERS": [
											"id",
											"jsonrpc",
											"method",
											"params"
										],
										"required": [
											"id",
											"jsonrpc",
											"method",
											"params"
										]
									}
								},
								"header": {
									"parameter": [
										{
											"is_checked": "1",
											"type": "Text",
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"not_null": "-1",
											"description": "",
											"field_type": "Text"
										}
									]
								},
								"query": {
									"parameter": [
										{
											"is_checked": "1",
											"type": "Text",
											"key": "sessionId",
											"value": "{{sessionId}}",
											"not_null": "-1",
											"description": "",
											"field_type": "Text"
										}
									]
								}
							},
							"response": {
								"success": {
									"raw": "{\n    \"id\": 421,\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"response\": {\n            \"configEntries\": [\n                {\n                    \"key\": \"ClientLaserMask.laser.maxRangeLines\",\n                    \"value\": []\n                },\n                {\n                    \"key\": \"ClientLaserMask.laser.minRangeLines\",\n                    \"value\": [\n                        -0.13671,\n                        0.41833,\n                        -0.00392,\n                        0.54181,\n                        -0.13904,\n                        -0.12683,\n                        -0.05051,\n                        -0.25496\n                    ]\n                },\n                {\n                    \"key\": \"ClientLaserMask.laser2.maxRangeLines\",\n                    \"value\": []\n                },\n                {\n                    \"key\": \"ClientLaserMask.laser2.minRangeLines\",\n                    \"value\": []\n                },\n                {\n                    \"key\": \"Licensing.licensingMethod\",\n                    \"value\": \"WIBUDONGLE\"\n                },\n                {\n                    \"key\": \"Licensing.preferredDongleSerial\",\n                    \"value\": \"\"\n                },\n                {\n                    \"key\": \"Certificate.enableRevocationList\",\n                    \"value\": true\n                },\n                {\n                    \"key\": \"ClientSensor.enableImu\",\n                    \"value\": false\n                },\n                {\n                    \"key\": \"ClientSensor.imuAddress\",\n                    \"value\": \"172.17.0.1:1112\"\n                },\n                {\n                    \"key\": \"ClientSensor.enableLaser2\",\n                    \"value\": false\n                },\n                {\n                    \"key\": \"ClientSensor.imuEncryption\",\n                    \"value\": false\n                },\n                {\n                    \"key\": \"ClientSensor.enableOdometry\",\n                    \"value\": false\n                },\n                {\n                    \"key\": \"ClientSensor.odometryAddress\",\n                    \"value\": \"172.17.0.1:1111\"\n                },\n                {\n                    \"key\": \"ClientSensor.sensorFusionMode\",\n                    \"value\": \"NONE\"\n                },\n                {\n                    \"key\": \"ClientSensor.odometryEncryption\",\n                    \"value\": false\n                },\n                {\n                    \"key\": \"ClientSensor.enableReflectorMarkers\",\n                    \"value\": false\n                },\n                {\n                    \"key\": \"ClientSensor.laser.type\",\n                    \"value\": \"simple\"\n                },\n                {\n                    \"key\": \"ClientSensor.laser.address\",\n                    \"value\": \"172.17.0.1:9090\"\n                },\n                {\n                    \"key\": \"ClientSensor.laser.clientAddress\",\n                    \"value\": \"192.168.0.100:6060\"\n                },\n                {\n                    \"key\": \"ClientSensor.laser.useIntensities\",\n                    \"value\": false\n                },\n                {\n                    \"key\": \"ClientSensor.laser.mirrorLaserScans\",\n                    \"value\": false\n                },\n                {\n                    \"key\": \"ClientSensor.laser.vehicleTransformLaser.x\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.laser.vehicleTransformLaser.y\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.laser.vehicleTransformLaser.z\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.laser.vehicleTransformLaser.yaw\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.laser.vehicleTransformLaser.roll\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.laser.vehicleTransformLaser.pitch\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.laser2.type\",\n                    \"value\": \"simple\"\n                },\n                {\n                    \"key\": \"ClientSensor.laser2.address\",\n                    \"value\": \"172.17.0.1:2113\"\n                },\n                {\n                    \"key\": \"ClientSensor.laser2.clientAddress\",\n                    \"value\": \"192.168.0.100:6061\"\n                },\n                {\n                    \"key\": \"ClientSensor.laser2.useIntensities\",\n                    \"value\": false\n                },\n                {\n                    \"key\": \"ClientSensor.laser2.mirrorLaserScans\",\n                    \"value\": false\n                },\n                {\n                    \"key\": \"ClientSensor.laser2.vehicleTransformLaser.x\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.laser2.vehicleTransformLaser.y\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.laser2.vehicleTransformLaser.z\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.laser2.vehicleTransformLaser.yaw\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.laser2.vehicleTransformLaser.roll\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.laser2.vehicleTransformLaser.pitch\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.vehicleTransformImu.x\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.vehicleTransformImu.y\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.vehicleTransformImu.z\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.vehicleTransformImu.yaw\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.vehicleTransformImu.roll\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.vehicleTransformImu.pitch\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.vehicleTransformOdometry.x\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.vehicleTransformOdometry.y\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.vehicleTransformOdometry.z\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.vehicleTransformOdometry.yaw\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.vehicleTransformOdometry.roll\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.vehicleTransformOdometry.pitch\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.customReflectorParameters.enabled\",\n                    \"value\": true\n                },\n                {\n                    \"key\": \"ClientSensor.customReflectorParameters.windowSize\",\n                    \"value\": 0.15\n                },\n                {\n                    \"key\": \"ClientSensor.customReflectorParameters.markerWidth\",\n                    \"value\": 0.05\n                },\n                {\n                    \"key\": \"ClientSensor.customReflectorParameters.maxDistance\",\n                    \"value\": 15.0\n                },\n                {\n                    \"key\": \"ClientSensor.customReflectorParameters.minDistance\",\n                    \"value\": 0.5\n                },\n                {\n                    \"key\": \"ClientSensor.customReflectorParameters.minWallLength\",\n                    \"value\": 0.15\n                },\n                {\n                    \"key\": \"ClientSensor.customReflectorParameters.minWallPoints\",\n                    \"value\": 5\n                },\n                {\n                    \"key\": \"ClientSensor.customReflectorParameters.maxWallFitError\",\n                    \"value\": 0.001\n                },\n                {\n                    \"key\": \"ClientSensor.customReflectorParameters.maxWallViewingAngle\",\n                    \"value\": 90.0\n                },\n                {\n                    \"key\": \"ClientSensor.customReflectorParameters.minWallViewingAngle\",\n                    \"value\": 10.0\n                },\n                {\n                    \"key\": \"ClientSensor.customReflectorParameters.highIntensityThreshold\",\n                    \"value\": 500.0\n                },\n                {\n                    \"key\": \"ClientSensor.customReflectorParameters.allowedMarkerPointsError\",\n                    \"value\": 2\n                },\n                {\n                    \"key\": \"ClientSensor.customReflectorParameters.minIntensityChangeFactor\",\n                    \"value\": 0.33\n                },\n                {\n                    \"key\": \"ClientSensor.customReflectorParameters.markerWidthToleranceFactor\",\n                    \"value\": 1.5\n                },\n                {\n                    \"key\": \"ClientSensor.customReflectorParameters.expectedAdditionalMarkerPoints\",\n                    \"value\": 0\n                },\n                {\n                    \"key\": \"ClientSensor.vehicleErrorModelTransformImu.x\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.vehicleErrorModelTransformImu.y\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.vehicleErrorModelTransformImu.z\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.vehicleErrorModelTransformImu.yaw\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.vehicleErrorModelTransformImu.roll\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.vehicleErrorModelTransformImu.pitch\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.vehicleErrorModelTransformImu.enabled\",\n                    \"value\": false\n                },\n                {\n                    \"key\": \"ClientSensor.vehicleErrorModelTransformOdometry.x\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.vehicleErrorModelTransformOdometry.y\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.vehicleErrorModelTransformOdometry.z\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.vehicleErrorModelTransformOdometry.yaw\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.vehicleErrorModelTransformOdometry.roll\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.vehicleErrorModelTransformOdometry.pitch\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.vehicleErrorModelTransformOdometry.enabled\",\n                    \"value\": false\n                },\n                {\n                    \"key\": \"SupportReport.recordDriveData\",\n                    \"value\": true\n                },\n                {\n                    \"key\": \"SupportReport.driveDataDurationHours\",\n                    \"value\": 2\n                },\n                {\n                    \"key\": \"ClientLaserMask.laser.maxRange\",\n                    \"value\": 100.0\n                },\n                {\n                    \"key\": \"ClientLaserMask.laser.minRange\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientLaserMask.laser2.maxRange\",\n                    \"value\": 50.0\n                },\n                {\n                    \"key\": \"ClientLaserMask.laser2.minRange\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"SupportRecovery.enableAutosave\",\n                    \"value\": true\n                },\n                {\n                    \"key\": \"SupportRecovery.numberOfAutosaves\",\n                    \"value\": 5\n                },\n                {\n                    \"key\": \"SupportRecovery.autosaveIntervalDays\",\n                    \"value\": 1\n                },\n                {\n                    \"key\": \"ClientApplication.vehicleName\",\n                    \"value\": \"Vehicle_01\"\n                },\n                {\n                    \"key\": \"ClientApplication.mapServerAddress\",\n                    \"value\": \"172.17.0.1\"\n                },\n                {\n                    \"key\": \"ClientLocalization.autostart\",\n                    \"value\": true\n                },\n                {\n                    \"key\": \"ClientLocalization.activeMapName\",\n                    \"value\": \"office1103_2022-11-03_15-08-11_built_001_aligned_001\"\n                },\n                {\n                    \"key\": \"ClientLocalization.sendMapUpdates\",\n                    \"value\": true\n                },\n                {\n                    \"key\": \"ClientLocalization.storeMapHistory\",\n                    \"value\": true\n                },\n                {\n                    \"key\": \"ClientLocalization.mapHistoryDuration\",\n                    \"value\": 50\n                }\n            ],\n            \"responseCode\": 0\n        }\n    }\n}",
									"parameter": [],
									"expect": {
										"name": "OK",
										"isDefault": 1,
										"code": 200,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object",
											"properties": {
												"id": {
													"type": "integer"
												},
												"jsonrpc": {
													"type": "string"
												},
												"result": {
													"type": "object",
													"properties": {
														"response": {
															"type": "object",
															"properties": {
																"configEntries": {
																	"type": "array",
																	"items": {
																		"type": "object",
																		"properties": {
																			"key": {
																				"type": "string"
																			},
																			"value": {
																				"type": [
																					"array",
																					"string",
																					"boolean",
																					"integer",
																					"number"
																				],
																				"items": {
																					"type": "number"
																				}
																			}
																		},
																		"required": [
																			"key",
																			"value"
																		]
																	}
																},
																"responseCode": {
																	"type": "integer"
																}
															},
															"required": [
																"configEntries",
																"responseCode"
															]
														}
													},
													"required": [
														"response"
													]
												}
											},
											"required": [
												"id",
												"jsonrpc",
												"result"
											]
										}
									}
								},
								"error": {
									"raw": "",
									"parameter": [],
									"expect": {
										"name": "失败",
										"isDefault": -1,
										"code": 404,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object"
										}
									}
								}
							},
							"children": []
						},
						{
							"target_type": "api",
							"name": "configList",
							"mark": "complated",
							"sort": 1,
							"tags": [],
							"created_uuid": "",
							"method": "POST",
							"mock": "{}",
							"mock_url": "",
							"request": {
								"url": "",
								"description": "",
								"event": {
									"pre_script": "",
									"test": ""
								},
								"pre_tasks": [],
								"post_tasks": [],
								"body": {
									"mode": "json",
									"parameter": [],
									"raw": "{\n\t\"id\": -3739510678300132,\n\t\"jsonrpc\": \"2.0\",\n\t\"method\": \"configList\",\n\t\"params\": {\n\t\t\"query\": {\n\t\t\t\"sessionId\": \"{{sessionId}}\"\n\t\t}\n\t}\n}",
									"raw_para": [],
									"raw_schema": {
										"type": "object",
										"properties": {
											"params": {
												"type": "object",
												"properties": {
													"query": {
														"type": "object",
														"properties": {
															"sessionId": {
																"type": "string",
																"mock": {
																	"mock": "{{sessionId}}"
																}
															}
														},
														"required": [
															"sessionId"
														],
														"APIPOST_ORDERS": [
															"sessionId"
														]
													}
												},
												"required": [
													"query"
												],
												"APIPOST_ORDERS": [
													"query"
												]
											},
											"id": {
												"type": "integer"
											},
											"jsonrpc": {
												"type": "string",
												"mock": {
													"mock": "2.0"
												}
											},
											"method": {
												"type": "string",
												"mock": {
													"mock": "configList"
												}
											}
										},
										"required": [
											"params",
											"id",
											"jsonrpc",
											"method"
										],
										"APIPOST_ORDERS": [
											"id",
											"jsonrpc",
											"method",
											"params"
										]
									}
								},
								"header": {
									"parameter": [
										{
											"is_checked": "1",
											"type": "Text",
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"not_null": "-1",
											"description": "",
											"field_type": "Text"
										}
									]
								},
								"query": {
									"parameter": [
										{
											"is_checked": "1",
											"type": "Text",
											"key": "sessionId",
											"value": "{{sessionId}}",
											"not_null": "-1",
											"description": "",
											"field_type": "Text"
										}
									]
								}
							},
							"response": {
								"success": {
									"raw": "{\n    \"id\": 421,\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"response\": {\n            \"configEntries\": [\n                {\n                    \"key\": \"ClientLaserMask.laser.maxRangeLines\",\n                    \"value\": []\n                },\n                {\n                    \"key\": \"ClientLaserMask.laser.minRangeLines\",\n                    \"value\": [\n                        -0.13671,\n                        0.41833,\n                        -0.00392,\n                        0.54181,\n                        -0.13904,\n                        -0.12683,\n                        -0.05051,\n                        -0.25496\n                    ]\n                },\n                {\n                    \"key\": \"ClientLaserMask.laser2.maxRangeLines\",\n                    \"value\": []\n                },\n                {\n                    \"key\": \"ClientLaserMask.laser2.minRangeLines\",\n                    \"value\": []\n                },\n                {\n                    \"key\": \"Licensing.licensingMethod\",\n                    \"value\": \"WIBUDONGLE\"\n                },\n                {\n                    \"key\": \"Licensing.preferredDongleSerial\",\n                    \"value\": \"\"\n                },\n                {\n                    \"key\": \"Certificate.enableRevocationList\",\n                    \"value\": true\n                },\n                {\n                    \"key\": \"ClientSensor.enableImu\",\n                    \"value\": false\n                },\n                {\n                    \"key\": \"ClientSensor.imuAddress\",\n                    \"value\": \"172.17.0.1:1112\"\n                },\n                {\n                    \"key\": \"ClientSensor.enableLaser2\",\n                    \"value\": false\n                },\n                {\n                    \"key\": \"ClientSensor.imuEncryption\",\n                    \"value\": false\n                },\n                {\n                    \"key\": \"ClientSensor.enableOdometry\",\n                    \"value\": false\n                },\n                {\n                    \"key\": \"ClientSensor.odometryAddress\",\n                    \"value\": \"172.17.0.1:1111\"\n                },\n                {\n                    \"key\": \"ClientSensor.sensorFusionMode\",\n                    \"value\": \"NONE\"\n                },\n                {\n                    \"key\": \"ClientSensor.odometryEncryption\",\n                    \"value\": false\n                },\n                {\n                    \"key\": \"ClientSensor.enableReflectorMarkers\",\n                    \"value\": false\n                },\n                {\n                    \"key\": \"ClientSensor.laser.type\",\n                    \"value\": \"simple\"\n                },\n                {\n                    \"key\": \"ClientSensor.laser.address\",\n                    \"value\": \"172.17.0.1:9090\"\n                },\n                {\n                    \"key\": \"ClientSensor.laser.clientAddress\",\n                    \"value\": \"192.168.0.100:6060\"\n                },\n                {\n                    \"key\": \"ClientSensor.laser.useIntensities\",\n                    \"value\": false\n                },\n                {\n                    \"key\": \"ClientSensor.laser.mirrorLaserScans\",\n                    \"value\": false\n                },\n                {\n                    \"key\": \"ClientSensor.laser.vehicleTransformLaser.x\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.laser.vehicleTransformLaser.y\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.laser.vehicleTransformLaser.z\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.laser.vehicleTransformLaser.yaw\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.laser.vehicleTransformLaser.roll\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.laser.vehicleTransformLaser.pitch\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.laser2.type\",\n                    \"value\": \"simple\"\n                },\n                {\n                    \"key\": \"ClientSensor.laser2.address\",\n                    \"value\": \"172.17.0.1:2113\"\n                },\n                {\n                    \"key\": \"ClientSensor.laser2.clientAddress\",\n                    \"value\": \"192.168.0.100:6061\"\n                },\n                {\n                    \"key\": \"ClientSensor.laser2.useIntensities\",\n                    \"value\": false\n                },\n                {\n                    \"key\": \"ClientSensor.laser2.mirrorLaserScans\",\n                    \"value\": false\n                },\n                {\n                    \"key\": \"ClientSensor.laser2.vehicleTransformLaser.x\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.laser2.vehicleTransformLaser.y\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.laser2.vehicleTransformLaser.z\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.laser2.vehicleTransformLaser.yaw\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.laser2.vehicleTransformLaser.roll\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.laser2.vehicleTransformLaser.pitch\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.vehicleTransformImu.x\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.vehicleTransformImu.y\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.vehicleTransformImu.z\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.vehicleTransformImu.yaw\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.vehicleTransformImu.roll\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.vehicleTransformImu.pitch\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.vehicleTransformOdometry.x\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.vehicleTransformOdometry.y\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.vehicleTransformOdometry.z\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.vehicleTransformOdometry.yaw\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.vehicleTransformOdometry.roll\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.vehicleTransformOdometry.pitch\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.customReflectorParameters.enabled\",\n                    \"value\": true\n                },\n                {\n                    \"key\": \"ClientSensor.customReflectorParameters.windowSize\",\n                    \"value\": 0.15\n                },\n                {\n                    \"key\": \"ClientSensor.customReflectorParameters.markerWidth\",\n                    \"value\": 0.05\n                },\n                {\n                    \"key\": \"ClientSensor.customReflectorParameters.maxDistance\",\n                    \"value\": 15.0\n                },\n                {\n                    \"key\": \"ClientSensor.customReflectorParameters.minDistance\",\n                    \"value\": 0.5\n                },\n                {\n                    \"key\": \"ClientSensor.customReflectorParameters.minWallLength\",\n                    \"value\": 0.15\n                },\n                {\n                    \"key\": \"ClientSensor.customReflectorParameters.minWallPoints\",\n                    \"value\": 5\n                },\n                {\n                    \"key\": \"ClientSensor.customReflectorParameters.maxWallFitError\",\n                    \"value\": 0.001\n                },\n                {\n                    \"key\": \"ClientSensor.customReflectorParameters.maxWallViewingAngle\",\n                    \"value\": 90.0\n                },\n                {\n                    \"key\": \"ClientSensor.customReflectorParameters.minWallViewingAngle\",\n                    \"value\": 10.0\n                },\n                {\n                    \"key\": \"ClientSensor.customReflectorParameters.highIntensityThreshold\",\n                    \"value\": 500.0\n                },\n                {\n                    \"key\": \"ClientSensor.customReflectorParameters.allowedMarkerPointsError\",\n                    \"value\": 2\n                },\n                {\n                    \"key\": \"ClientSensor.customReflectorParameters.minIntensityChangeFactor\",\n                    \"value\": 0.33\n                },\n                {\n                    \"key\": \"ClientSensor.customReflectorParameters.markerWidthToleranceFactor\",\n                    \"value\": 1.5\n                },\n                {\n                    \"key\": \"ClientSensor.customReflectorParameters.expectedAdditionalMarkerPoints\",\n                    \"value\": 0\n                },\n                {\n                    \"key\": \"ClientSensor.vehicleErrorModelTransformImu.x\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.vehicleErrorModelTransformImu.y\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.vehicleErrorModelTransformImu.z\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.vehicleErrorModelTransformImu.yaw\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.vehicleErrorModelTransformImu.roll\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.vehicleErrorModelTransformImu.pitch\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.vehicleErrorModelTransformImu.enabled\",\n                    \"value\": false\n                },\n                {\n                    \"key\": \"ClientSensor.vehicleErrorModelTransformOdometry.x\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.vehicleErrorModelTransformOdometry.y\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.vehicleErrorModelTransformOdometry.z\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.vehicleErrorModelTransformOdometry.yaw\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.vehicleErrorModelTransformOdometry.roll\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.vehicleErrorModelTransformOdometry.pitch\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientSensor.vehicleErrorModelTransformOdometry.enabled\",\n                    \"value\": false\n                },\n                {\n                    \"key\": \"SupportReport.recordDriveData\",\n                    \"value\": true\n                },\n                {\n                    \"key\": \"SupportReport.driveDataDurationHours\",\n                    \"value\": 2\n                },\n                {\n                    \"key\": \"ClientLaserMask.laser.maxRange\",\n                    \"value\": 100.0\n                },\n                {\n                    \"key\": \"ClientLaserMask.laser.minRange\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"ClientLaserMask.laser2.maxRange\",\n                    \"value\": 50.0\n                },\n                {\n                    \"key\": \"ClientLaserMask.laser2.minRange\",\n                    \"value\": 0.0\n                },\n                {\n                    \"key\": \"SupportRecovery.enableAutosave\",\n                    \"value\": true\n                },\n                {\n                    \"key\": \"SupportRecovery.numberOfAutosaves\",\n                    \"value\": 5\n                },\n                {\n                    \"key\": \"SupportRecovery.autosaveIntervalDays\",\n                    \"value\": 1\n                },\n                {\n                    \"key\": \"ClientApplication.vehicleName\",\n                    \"value\": \"Vehicle_01\"\n                },\n                {\n                    \"key\": \"ClientApplication.mapServerAddress\",\n                    \"value\": \"172.17.0.1\"\n                },\n                {\n                    \"key\": \"ClientLocalization.autostart\",\n                    \"value\": true\n                },\n                {\n                    \"key\": \"ClientLocalization.activeMapName\",\n                    \"value\": \"office1103_2022-11-03_15-08-11_built_001_aligned_001\"\n                },\n                {\n                    \"key\": \"ClientLocalization.sendMapUpdates\",\n                    \"value\": true\n                },\n                {\n                    \"key\": \"ClientLocalization.storeMapHistory\",\n                    \"value\": true\n                },\n                {\n                    \"key\": \"ClientLocalization.mapHistoryDuration\",\n                    \"value\": 50\n                }\n            ],\n            \"responseCode\": 0\n        }\n    }\n}",
									"parameter": [],
									"expect": {
										"name": "OK",
										"isDefault": 1,
										"code": 200,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object",
											"properties": {
												"id": {
													"type": "integer"
												},
												"jsonrpc": {
													"type": "string"
												},
												"result": {
													"type": "object",
													"properties": {
														"response": {
															"type": "object",
															"properties": {
																"configEntries": {
																	"type": "array",
																	"items": {
																		"type": "object",
																		"properties": {
																			"key": {
																				"type": "string"
																			},
																			"value": {
																				"type": [
																					"array",
																					"string",
																					"boolean",
																					"integer",
																					"number"
																				],
																				"items": {
																					"type": "number"
																				}
																			}
																		},
																		"required": [
																			"key",
																			"value"
																		],
																		"APIPOST_ORDERS": [
																			"key",
																			"value"
																		]
																	}
																},
																"responseCode": {
																	"type": "integer"
																}
															},
															"required": [
																"configEntries",
																"responseCode"
															],
															"APIPOST_ORDERS": [
																"configEntries",
																"responseCode"
															]
														}
													},
													"required": [
														"response"
													],
													"APIPOST_ORDERS": [
														"response"
													]
												}
											},
											"required": [
												"id",
												"jsonrpc",
												"result"
											],
											"APIPOST_ORDERS": [
												"id",
												"jsonrpc",
												"result"
											]
										}
									}
								},
								"error": {
									"raw": "",
									"parameter": [],
									"expect": {
										"name": "失败",
										"isDefault": -1,
										"code": 404,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object"
										}
									}
								}
							},
							"children": []
						}
					]
				},
				{
					"target_type": "folder",
					"name": "Certificate",
					"mark": "developing",
					"sort": 1,
					"tags": [],
					"created_uuid": "",
					"request": {
						"description": ""
					},
					"children": [
						{
							"target_type": "api",
							"name": "certiﬁcateSet",
							"mark": "developing",
							"sort": 1,
							"tags": [],
							"created_uuid": "",
							"method": "POST",
							"mock": "{}",
							"mock_url": "",
							"request": {
								"url": "",
								"description": "",
								"event": {
									"pre_script": "",
									"test": ""
								},
								"pre_tasks": [],
								"post_tasks": [],
								"body": {
									"mode": "json",
									"parameter": [],
									"raw": "{\"0\":\"s\",\"1\":\"e\",\"2\":\"s\",\"3\":\"s\",\"4\":\"i\",\"5\":\"o\",\"6\":\"n\",\"7\":\"L\",\"8\":\"o\",\"9\":\"g\",\"10\":\"i\",\"11\":\"n\",\"query\":{\"timeout\":{\"valid\":true,\"time\":1663372036854775800,\"resolution\":1},\"userName\":\"admin\",\"password\":\"bbZGs3wFsB35\"}}",
									"raw_para": [],
									"raw_schema": {
										"type": "object",
										"properties": {
											"id": {
												"type": "integer"
											},
											"jsonrpc": {
												"type": "string",
												"mock": {
													"mock": "2.0"
												}
											},
											"method": {
												"type": "string",
												"mock": {
													"mock": "sessionLogout"
												}
											},
											"params": {
												"type": "object",
												"properties": {
													"query": {
														"type": "object",
														"properties": {
															"sessionId": {
																"type": "string"
															},
															"root": {
																"ref": "77fc9181-4161-44e0-8407-ab80e1fb2fca"
															},
															"crt": {
																"ref": "77fc9181-4161-44e0-8407-ab80e1fb2fca"
															},
															"key": {
																"ref": "77fc9181-4161-44e0-8407-ab80e1fb2fca"
															},
															"rev": {
																"ref": "77fc9181-4161-44e0-8407-ab80e1fb2fca"
															}
														},
														"APIPOST_ORDERS": [
															"sessionId",
															"root",
															"crt",
															"key",
															"rev"
														],
														"required": [
															"sessionId",
															"root",
															"crt",
															"key",
															"rev"
														]
													}
												},
												"APIPOST_ORDERS": [
													"query"
												],
												"required": [
													"query"
												]
											}
										},
										"APIPOST_ORDERS": [
											"id",
											"jsonrpc",
											"method",
											"params"
										],
										"required": [
											"id",
											"jsonrpc",
											"method",
											"params"
										]
									}
								},
								"header": {
									"parameter": [
										{
											"is_checked": "1",
											"type": "Text",
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"not_null": "-1",
											"description": "",
											"field_type": "Text"
										}
									]
								}
							},
							"response": {
								"success": {
									"raw": "{\n    \"id\": 326,\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"response\": {\n            \"responseCode\": 0\n        }\n    }\n}",
									"parameter": [],
									"expect": {
										"name": "OK",
										"isDefault": 1,
										"code": 200,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object",
											"properties": {
												"id": {
													"type": "integer"
												},
												"jsonrpc": {
													"type": "string"
												},
												"result": {
													"type": "object",
													"properties": {
														"response": {
															"type": "object",
															"properties": {
																"responseCode": {
																	"type": "integer"
																},
																"aboutString": {
																	"type": "string"
																}
															},
															"required": [
																"responseCode"
															],
															"APIPOST_ORDERS": [
																"responseCode",
																"aboutString"
															]
														}
													},
													"required": [
														"response"
													],
													"APIPOST_ORDERS": [
														"response"
													]
												}
											},
											"required": [
												"id",
												"jsonrpc",
												"result"
											],
											"APIPOST_ORDERS": [
												"id",
												"jsonrpc",
												"result"
											]
										}
									}
								},
								"error": {
									"raw": "",
									"parameter": [],
									"expect": {
										"name": "失败",
										"isDefault": -1,
										"code": 404,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object"
										}
									}
								}
							},
							"children": []
						}
					]
				},
				{
					"target_type": "folder",
					"name": "System",
					"mark": "developing",
					"sort": 1,
					"tags": [],
					"created_uuid": "",
					"request": {
						"description": ""
					},
					"children": [
						{
							"target_type": "api",
							"name": "systemShutdown",
							"mark": "developing",
							"sort": 1,
							"tags": [],
							"created_uuid": "",
							"method": "POST",
							"mock": "{}",
							"mock_url": "",
							"request": {
								"url": "",
								"description": "",
								"event": {
									"pre_script": "",
									"test": ""
								},
								"pre_tasks": [],
								"post_tasks": [],
								"body": {
									"mode": "json",
									"parameter": [],
									"raw": "{\"0\":\"s\",\"1\":\"e\",\"2\":\"s\",\"3\":\"s\",\"4\":\"i\",\"5\":\"o\",\"6\":\"n\",\"7\":\"L\",\"8\":\"o\",\"9\":\"g\",\"10\":\"i\",\"11\":\"n\",\"query\":{\"timeout\":{\"valid\":true,\"time\":1663372036854775800,\"resolution\":1},\"userName\":\"admin\",\"password\":\"bbZGs3wFsB35\"}}",
									"raw_para": [],
									"raw_schema": {
										"type": "object",
										"properties": {
											"id": {
												"type": "integer"
											},
											"jsonrpc": {
												"type": "string",
												"mock": {
													"mock": "2.0"
												}
											},
											"method": {
												"type": "string",
												"mock": {
													"mock": "sessionLogout"
												}
											},
											"params": {
												"type": "object",
												"properties": {
													"query": {
														"type": "object",
														"properties": {
															"sessionId": {
																"type": "string",
																"mock": {
																	"mock": "{{sessionId}}"
																}
															}
														},
														"APIPOST_ORDERS": [
															"sessionId"
														],
														"required": [
															"sessionId"
														]
													}
												},
												"APIPOST_ORDERS": [
													"query"
												],
												"required": [
													"query"
												]
											}
										},
										"APIPOST_ORDERS": [
											"id",
											"jsonrpc",
											"method",
											"params"
										],
										"required": [
											"id",
											"jsonrpc",
											"method",
											"params"
										]
									}
								},
								"header": {
									"parameter": [
										{
											"is_checked": "1",
											"type": "Text",
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"not_null": "-1",
											"description": "",
											"field_type": "Text"
										}
									]
								}
							},
							"response": {
								"success": {
									"raw": "{\n    \"id\": 326,\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"response\": {\n            \"responseCode\": 0\n        }\n    }\n}",
									"parameter": [],
									"expect": {
										"name": "OK",
										"isDefault": 1,
										"code": 200,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object",
											"properties": {
												"id": {
													"type": "integer"
												},
												"jsonrpc": {
													"type": "string"
												},
												"result": {
													"type": "object",
													"properties": {
														"response": {
															"type": "object",
															"properties": {
																"responseCode": {
																	"type": "integer"
																},
																"aboutString": {
																	"type": "string"
																}
															},
															"required": [
																"responseCode"
															],
															"APIPOST_ORDERS": [
																"responseCode",
																"aboutString"
															]
														}
													},
													"required": [
														"response"
													],
													"APIPOST_ORDERS": [
														"response"
													]
												}
											},
											"required": [
												"id",
												"jsonrpc",
												"result"
											],
											"APIPOST_ORDERS": [
												"id",
												"jsonrpc",
												"result"
											]
										}
									}
								},
								"error": {
									"raw": "",
									"parameter": [],
									"expect": {
										"name": "失败",
										"isDefault": -1,
										"code": 404,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object"
										}
									}
								}
							},
							"children": []
						}
					]
				},
				{
					"target_type": "folder",
					"name": "User",
					"mark": "developing",
					"sort": 1,
					"tags": [],
					"created_uuid": "",
					"request": {
						"description": ""
					},
					"children": [
						{
							"target_type": "api",
							"name": "userAdd",
							"mark": "complated",
							"sort": 1,
							"tags": [],
							"created_uuid": "",
							"method": "POST",
							"mock": "{}",
							"mock_url": "",
							"request": {
								"url": "",
								"description": "",
								"event": {
									"pre_script": "",
									"test": ""
								},
								"pre_tasks": [],
								"post_tasks": [],
								"body": {
									"mode": "json",
									"parameter": [],
									"raw": "{\n\t\"id\": 1566052604490255,\n\t\"jsonrpc\": \"2.0\",\n\t\"method\": \"userAdd\",\n\t\"params\": {\n\t\t\"query\": {\n\t\t\t\"sessionId\": \"{{sessionId}}\",\n\t\t\t\"userName\": \"没成从长阶复\",\n\t\t\t\"userPassword\": \"联解题指之\",\n\t\t\t\"userGroups\": [\n\t\t\t\t\"admin\"\n\t\t\t]\n\t\t}\n\t}\n}",
									"raw_para": [],
									"raw_schema": {
										"type": "object",
										"properties": {
											"id": {
												"type": "integer"
											},
											"jsonrpc": {
												"type": "string",
												"mock": {
													"mock": "2.0"
												}
											},
											"method": {
												"type": "string",
												"mock": {
													"mock": "userAdd"
												}
											},
											"params": {
												"type": "object",
												"properties": {
													"query": {
														"type": "object",
														"properties": {
															"sessionId": {
																"type": "string",
																"mock": {
																	"mock": "{{sessionId}}"
																}
															},
															"userName": {
																"type": "string"
															},
															"userPassword": {
																"type": "string"
															},
															"userGroups": {
																"type": "array",
																"items": {
																	"type": "oneOf",
																	"oneOf": [
																		{
																			"type": "string",
																			"mock": {
																				"mock": "admin"
																			}
																		},
																		{
																			"type": "string",
																			"mock": {
																				"mock": "user"
																			}
																		},
																		{
																			"type": "string",
																			"mock": {
																				"mock": "observer"
																			}
																		}
																	]
																},
																"minItems": 1,
																"maxItems": 3,
																"uniqueItems": true
															}
														},
														"APIPOST_ORDERS": [
															"sessionId",
															"userName",
															"userPassword",
															"userGroups"
														],
														"required": [
															"sessionId",
															"userName",
															"userGroups",
															"userPassword"
														]
													}
												},
												"APIPOST_ORDERS": [
													"query"
												],
												"required": [
													"query"
												]
											}
										},
										"APIPOST_ORDERS": [
											"id",
											"jsonrpc",
											"method",
											"params"
										],
										"required": [
											"id",
											"jsonrpc",
											"method",
											"params"
										]
									}
								},
								"header": {
									"parameter": [
										{
											"is_checked": "1",
											"type": "Text",
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"not_null": "-1",
											"description": "",
											"field_type": "Text"
										}
									]
								}
							},
							"response": {
								"success": {
									"raw": "{\n    \"id\": 326,\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"response\": {\n            \"responseCode\": 0\n        }\n    }\n}",
									"parameter": [],
									"expect": {
										"name": "OK",
										"isDefault": 1,
										"code": 200,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object",
											"properties": {
												"id": {
													"type": "integer"
												},
												"jsonrpc": {
													"type": "string"
												},
												"result": {
													"type": "object",
													"properties": {
														"response": {
															"type": "object",
															"properties": {
																"responseCode": {
																	"type": "integer"
																},
																"aboutString": {
																	"type": "string"
																}
															},
															"required": [
																"responseCode"
															],
															"APIPOST_ORDERS": [
																"responseCode",
																"aboutString"
															]
														}
													},
													"required": [
														"response"
													],
													"APIPOST_ORDERS": [
														"response"
													]
												}
											},
											"required": [
												"id",
												"jsonrpc",
												"result"
											],
											"APIPOST_ORDERS": [
												"id",
												"jsonrpc",
												"result"
											]
										}
									}
								},
								"error": {
									"raw": "",
									"parameter": [],
									"expect": {
										"name": "失败",
										"isDefault": -1,
										"code": 404,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object"
										}
									}
								}
							},
							"children": []
						},
						{
							"target_type": "api",
							"name": "userList",
							"mark": "complated",
							"sort": 1,
							"tags": [],
							"created_uuid": "",
							"method": "POST",
							"mock": "{}",
							"mock_url": "",
							"request": {
								"url": "",
								"description": "",
								"event": {
									"pre_script": "",
									"test": ""
								},
								"pre_tasks": [],
								"post_tasks": [],
								"body": {
									"mode": "json",
									"parameter": [],
									"raw": "{\n\t\"id\": -1536903329011520,\n\t\"jsonrpc\": \"2.0\",\n\t\"method\": \"userList\",\n\t\"params\": {\n\t\t\"query\": {\n\t\t\t\"sessionId\": \"{{sessionId}}\"\n\t\t}\n\t}\n}",
									"raw_para": [],
									"raw_schema": {
										"type": "object",
										"properties": {
											"id": {
												"type": "integer"
											},
											"jsonrpc": {
												"type": "string",
												"mock": {
													"mock": "2.0"
												}
											},
											"method": {
												"type": "string",
												"mock": {
													"mock": "userList"
												}
											},
											"params": {
												"type": "object",
												"properties": {
													"query": {
														"type": "object",
														"properties": {
															"sessionId": {
																"type": "string",
																"mock": {
																	"mock": "{{sessionId}}"
																}
															}
														},
														"APIPOST_ORDERS": [
															"sessionId"
														],
														"required": [
															"sessionId"
														]
													}
												},
												"APIPOST_ORDERS": [
													"query"
												],
												"required": [
													"query"
												]
											}
										},
										"APIPOST_ORDERS": [
											"id",
											"jsonrpc",
											"method",
											"params"
										],
										"required": [
											"id",
											"jsonrpc",
											"method",
											"params"
										]
									}
								},
								"header": {
									"parameter": [
										{
											"is_checked": "1",
											"type": "Text",
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"not_null": "-1",
											"description": "",
											"field_type": "Text"
										}
									]
								}
							},
							"response": {
								"success": {
									"raw": "{\n    \"id\": 326,\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"response\": {\n            \"responseCode\": 0\n        }\n    }\n}",
									"parameter": [],
									"expect": {
										"name": "OK",
										"isDefault": 1,
										"code": 200,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object",
											"properties": {
												"id": {
													"type": "integer"
												},
												"jsonrpc": {
													"type": "string"
												},
												"result": {
													"type": "object",
													"properties": {
														"response": {
															"type": "object",
															"properties": {
																"responseCode": {
																	"type": "integer"
																},
																"aboutString": {
																	"type": "string"
																}
															},
															"required": [
																"responseCode"
															],
															"APIPOST_ORDERS": [
																"responseCode",
																"aboutString"
															]
														}
													},
													"required": [
														"response"
													],
													"APIPOST_ORDERS": [
														"response"
													]
												}
											},
											"required": [
												"id",
												"jsonrpc",
												"result"
											],
											"APIPOST_ORDERS": [
												"id",
												"jsonrpc",
												"result"
											]
										}
									}
								},
								"error": {
									"raw": "",
									"parameter": [],
									"expect": {
										"name": "失败",
										"isDefault": -1,
										"code": 404,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object"
										}
									}
								}
							},
							"children": []
						},
						{
							"target_type": "api",
							"name": "userChangeOwnPassword",
							"mark": "developing",
							"sort": 1,
							"tags": [],
							"created_uuid": "",
							"method": "POST",
							"mock": "{}",
							"mock_url": "",
							"request": {
								"url": "",
								"description": "",
								"event": {
									"pre_script": "",
									"test": ""
								},
								"pre_tasks": [],
								"post_tasks": [],
								"body": {
									"mode": "json",
									"parameter": [],
									"raw": "{\"0\":\"s\",\"1\":\"e\",\"2\":\"s\",\"3\":\"s\",\"4\":\"i\",\"5\":\"o\",\"6\":\"n\",\"7\":\"L\",\"8\":\"o\",\"9\":\"g\",\"10\":\"i\",\"11\":\"n\",\"query\":{\"timeout\":{\"valid\":true,\"time\":1663372036854775800,\"resolution\":1},\"userName\":\"admin\",\"password\":\"bbZGs3wFsB35\"}}",
									"raw_para": [],
									"raw_schema": {
										"type": "object",
										"properties": {
											"id": {
												"type": "integer"
											},
											"jsonrpc": {
												"type": "string",
												"mock": {
													"mock": "2.0"
												}
											},
											"method": {
												"type": "string",
												"mock": {
													"mock": "userChangeOwnPassword"
												}
											},
											"params": {
												"type": "object",
												"properties": {
													"query": {
														"type": "object",
														"properties": {
															"sessionId": {
																"type": "string",
																"mock": {
																	"mock": "{{sessionId}}"
																}
															},
															"newUserPassword": {
																"ref": "cd1feef2-6671-4e67-baa4-183b8aa413c3"
															},
															"oldUserPassword": {
																"ref": "cd1feef2-6671-4e67-baa4-183b8aa413c3"
															}
														},
														"APIPOST_ORDERS": [
															"sessionId",
															"newUserPassword",
															"oldUserPassword"
														],
														"required": [
															"sessionId",
															"oldUserPassword",
															"newUserPassword"
														]
													}
												},
												"APIPOST_ORDERS": [
													"query"
												],
												"required": [
													"query"
												]
											}
										},
										"APIPOST_ORDERS": [
											"id",
											"jsonrpc",
											"method",
											"params"
										],
										"required": [
											"id",
											"jsonrpc",
											"method",
											"params"
										]
									}
								},
								"header": {
									"parameter": [
										{
											"is_checked": "1",
											"type": "Text",
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"not_null": "-1",
											"description": "",
											"field_type": "Text"
										}
									]
								}
							},
							"response": {
								"success": {
									"raw": "{\n    \"id\": 326,\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"response\": {\n            \"responseCode\": 0\n        }\n    }\n}",
									"parameter": [],
									"expect": {
										"name": "OK",
										"isDefault": 1,
										"code": 200,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object",
											"properties": {
												"id": {
													"type": "integer"
												},
												"jsonrpc": {
													"type": "string"
												},
												"result": {
													"type": "object",
													"properties": {
														"response": {
															"type": "object",
															"properties": {
																"responseCode": {
																	"type": "integer"
																},
																"aboutString": {
																	"type": "string"
																}
															},
															"required": [
																"responseCode"
															],
															"APIPOST_ORDERS": [
																"responseCode",
																"aboutString"
															]
														}
													},
													"required": [
														"response"
													],
													"APIPOST_ORDERS": [
														"response"
													]
												}
											},
											"required": [
												"id",
												"jsonrpc",
												"result"
											],
											"APIPOST_ORDERS": [
												"id",
												"jsonrpc",
												"result"
											]
										}
									}
								},
								"error": {
									"raw": "",
									"parameter": [],
									"expect": {
										"name": "失败",
										"isDefault": -1,
										"code": 404,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object"
										}
									}
								}
							},
							"children": []
						},
						{
							"target_type": "api",
							"name": "userDelete",
							"mark": "complated",
							"sort": 1,
							"tags": [],
							"created_uuid": "",
							"method": "POST",
							"mock": "{}",
							"mock_url": "",
							"request": {
								"url": "",
								"description": "",
								"event": {
									"pre_script": "",
									"test": ""
								},
								"pre_tasks": [],
								"post_tasks": [],
								"body": {
									"mode": "json",
									"parameter": [],
									"raw": "{\n\t\"id\": 3041857581606591,\n\t\"jsonrpc\": \"2.0\",\n\t\"method\": \"userDelete\",\n\t\"params\": {\n\t\t\"query\": {\n\t\t\t\"sessionId\": \"{{sessionId}}\",\n\t\t\t\"userName\": \"必认前代\"\n\t\t}\n\t}\n}",
									"raw_para": [],
									"raw_schema": {
										"type": "object",
										"properties": {
											"id": {
												"type": "integer"
											},
											"jsonrpc": {
												"type": "string",
												"mock": {
													"mock": "2.0"
												}
											},
											"method": {
												"type": "string",
												"mock": {
													"mock": "userDelete"
												}
											},
											"params": {
												"type": "object",
												"properties": {
													"query": {
														"type": "object",
														"properties": {
															"sessionId": {
																"type": "string",
																"mock": {
																	"mock": "{{sessionId}}"
																}
															},
															"userName": {
																"APIPOST_ORDERS": [
																	"499d707ed31842688f82fbb5a4e028ed"
																],
																"APIPOST_REFS": {
																	"499d707ed31842688f82fbb5a4e028ed": {
																		"ref": "cd1feef2-6671-4e67-baa4-183b8aa413c3"
																	}
																},
																"properties": [],
																"type": "string"
															}
														},
														"APIPOST_ORDERS": [
															"sessionId",
															"userName"
														],
														"required": [
															"sessionId",
															"userName"
														]
													}
												},
												"APIPOST_ORDERS": [
													"query"
												],
												"required": [
													"query"
												]
											}
										},
										"APIPOST_ORDERS": [
											"id",
											"jsonrpc",
											"method",
											"params"
										],
										"required": [
											"id",
											"jsonrpc",
											"method",
											"params"
										]
									}
								},
								"header": {
									"parameter": [
										{
											"is_checked": "1",
											"type": "Text",
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"not_null": "-1",
											"description": "",
											"field_type": "Text"
										}
									]
								}
							},
							"response": {
								"success": {
									"raw": "{\n    \"id\": 326,\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"response\": {\n            \"responseCode\": 0\n        }\n    }\n}",
									"parameter": [],
									"expect": {
										"name": "OK",
										"isDefault": 1,
										"code": 200,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object",
											"properties": {
												"id": {
													"type": "integer"
												},
												"jsonrpc": {
													"type": "string"
												},
												"result": {
													"type": "object",
													"properties": {
														"response": {
															"type": "object",
															"properties": {
																"responseCode": {
																	"type": "integer"
																},
																"aboutString": {
																	"type": "string"
																}
															},
															"required": [
																"responseCode"
															],
															"APIPOST_ORDERS": [
																"responseCode",
																"aboutString"
															]
														}
													},
													"required": [
														"response"
													],
													"APIPOST_ORDERS": [
														"response"
													]
												}
											},
											"required": [
												"id",
												"jsonrpc",
												"result"
											],
											"APIPOST_ORDERS": [
												"id",
												"jsonrpc",
												"result"
											]
										}
									}
								},
								"error": {
									"raw": "",
									"parameter": [],
									"expect": {
										"name": "失败",
										"isDefault": -1,
										"code": 404,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object"
										}
									}
								}
							},
							"children": []
						},
						{
							"target_type": "api",
							"name": "userListGroup",
							"mark": "developing",
							"sort": 1,
							"tags": [],
							"created_uuid": "",
							"method": "POST",
							"mock": "{}",
							"mock_url": "",
							"request": {
								"url": "",
								"description": "",
								"event": {
									"pre_script": "",
									"test": ""
								},
								"pre_tasks": [],
								"post_tasks": [],
								"body": {
									"mode": "json",
									"parameter": [],
									"raw": "{\"0\":\"s\",\"1\":\"e\",\"2\":\"s\",\"3\":\"s\",\"4\":\"i\",\"5\":\"o\",\"6\":\"n\",\"7\":\"L\",\"8\":\"o\",\"9\":\"g\",\"10\":\"i\",\"11\":\"n\",\"query\":{\"timeout\":{\"valid\":true,\"time\":1663372036854775800,\"resolution\":1},\"userName\":\"admin\",\"password\":\"bbZGs3wFsB35\"}}",
									"raw_para": [],
									"raw_schema": {
										"type": "object",
										"properties": {
											"id": {
												"type": "integer"
											},
											"jsonrpc": {
												"type": "string",
												"mock": {
													"mock": "2.0"
												}
											},
											"method": {
												"type": "string",
												"mock": {
													"mock": "userListGroup"
												}
											},
											"params": {
												"type": "object",
												"properties": {
													"query": {
														"type": "object",
														"properties": {
															"sessionId": {
																"type": "string",
																"mock": {
																	"mock": "{{sessionId}}"
																}
															}
														},
														"APIPOST_ORDERS": [
															"sessionId"
														],
														"required": [
															"sessionId"
														]
													}
												},
												"APIPOST_ORDERS": [
													"query"
												],
												"required": [
													"query"
												]
											}
										},
										"APIPOST_ORDERS": [
											"id",
											"jsonrpc",
											"method",
											"params"
										],
										"required": [
											"id",
											"jsonrpc",
											"method",
											"params"
										]
									}
								},
								"header": {
									"parameter": [
										{
											"is_checked": "1",
											"type": "Text",
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"not_null": "-1",
											"description": "",
											"field_type": "Text"
										}
									]
								}
							},
							"response": {
								"success": {
									"raw": "{\n    \"id\": 326,\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"response\": {\n            \"responseCode\": 0\n        }\n    }\n}",
									"parameter": [],
									"expect": {
										"name": "OK",
										"isDefault": 1,
										"code": 200,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object",
											"properties": {
												"id": {
													"type": "integer"
												},
												"jsonrpc": {
													"type": "string"
												},
												"result": {
													"type": "object",
													"properties": {
														"response": {
															"type": "object",
															"properties": {
																"responseCode": {
																	"type": "integer"
																},
																"aboutString": {
																	"type": "string"
																}
															},
															"required": [
																"responseCode"
															],
															"APIPOST_ORDERS": [
																"responseCode",
																"aboutString"
															]
														}
													},
													"required": [
														"response"
													],
													"APIPOST_ORDERS": [
														"response"
													]
												}
											},
											"required": [
												"id",
												"jsonrpc",
												"result"
											],
											"APIPOST_ORDERS": [
												"id",
												"jsonrpc",
												"result"
											]
										}
									}
								},
								"error": {
									"raw": "",
									"parameter": [],
									"expect": {
										"name": "失败",
										"isDefault": -1,
										"code": 404,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object"
										}
									}
								}
							},
							"children": []
						},
						{
							"target_type": "api",
							"name": "userChangePassword",
							"mark": "developing",
							"sort": 1,
							"tags": [],
							"created_uuid": "",
							"method": "POST",
							"mock": "{}",
							"mock_url": "",
							"request": {
								"url": "",
								"description": "",
								"event": {
									"pre_script": "",
									"test": ""
								},
								"pre_tasks": [],
								"post_tasks": [],
								"body": {
									"mode": "json",
									"parameter": [],
									"raw": "{\"0\":\"s\",\"1\":\"e\",\"2\":\"s\",\"3\":\"s\",\"4\":\"i\",\"5\":\"o\",\"6\":\"n\",\"7\":\"L\",\"8\":\"o\",\"9\":\"g\",\"10\":\"i\",\"11\":\"n\",\"query\":{\"timeout\":{\"valid\":true,\"time\":1663372036854775800,\"resolution\":1},\"userName\":\"admin\",\"password\":\"bbZGs3wFsB35\"}}",
									"raw_para": [],
									"raw_schema": {
										"type": "object",
										"properties": {
											"id": {
												"type": "integer"
											},
											"jsonrpc": {
												"type": "string",
												"mock": {
													"mock": "2.0"
												}
											},
											"method": {
												"type": "string",
												"mock": {
													"mock": "userChangePassword"
												}
											},
											"params": {
												"type": "object",
												"properties": {
													"query": {
														"type": "object",
														"properties": {
															"sessionId": {
																"type": "string",
																"mock": {
																	"mock": "{{sessionId}}"
																}
															},
															"userName": {
																"ref": "cd1feef2-6671-4e67-baa4-183b8aa413c3"
															},
															"newUserPassword": {
																"type": "string"
															}
														},
														"APIPOST_ORDERS": [
															"sessionId",
															"userName",
															"newUserPassword"
														],
														"required": [
															"sessionId",
															"userName",
															"newUserPassword"
														]
													}
												},
												"APIPOST_ORDERS": [
													"query"
												],
												"required": [
													"query"
												]
											}
										},
										"APIPOST_ORDERS": [
											"id",
											"jsonrpc",
											"method",
											"params"
										],
										"required": [
											"id",
											"jsonrpc",
											"method",
											"params"
										]
									}
								},
								"header": {
									"parameter": [
										{
											"is_checked": "1",
											"type": "Text",
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"not_null": "-1",
											"description": "",
											"field_type": "Text"
										}
									]
								}
							},
							"response": {
								"success": {
									"raw": "{\n    \"id\": 326,\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"response\": {\n            \"responseCode\": 0\n        }\n    }\n}",
									"parameter": [],
									"expect": {
										"name": "OK",
										"isDefault": 1,
										"code": 200,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object",
											"properties": {
												"id": {
													"type": "integer"
												},
												"jsonrpc": {
													"type": "string"
												},
												"result": {
													"type": "object",
													"properties": {
														"response": {
															"type": "object",
															"properties": {
																"responseCode": {
																	"type": "integer"
																},
																"aboutString": {
																	"type": "string"
																}
															},
															"required": [
																"responseCode"
															],
															"APIPOST_ORDERS": [
																"responseCode",
																"aboutString"
															]
														}
													},
													"required": [
														"response"
													],
													"APIPOST_ORDERS": [
														"response"
													]
												}
											},
											"required": [
												"id",
												"jsonrpc",
												"result"
											],
											"APIPOST_ORDERS": [
												"id",
												"jsonrpc",
												"result"
											]
										}
									}
								},
								"error": {
									"raw": "",
									"parameter": [],
									"expect": {
										"name": "失败",
										"isDefault": -1,
										"code": 404,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object"
										}
									}
								}
							},
							"children": []
						}
					]
				},
				{
					"target_type": "folder",
					"name": "Licensing",
					"mark": "developing",
					"sort": 1,
					"tags": [],
					"created_uuid": "",
					"request": {
						"description": ""
					},
					"children": [
						{
							"target_type": "api",
							"name": "licensingFeatureGetHostId",
							"mark": "complated",
							"sort": 1,
							"tags": [],
							"created_uuid": "",
							"method": "POST",
							"mock": "{}",
							"mock_url": "",
							"request": {
								"url": "",
								"description": "",
								"event": {
									"pre_script": "",
									"test": ""
								},
								"pre_tasks": [],
								"post_tasks": [],
								"body": {
									"mode": "json",
									"parameter": [],
									"raw": "{\n\t\"id\": -4771637385960099,\n\t\"jsonrpc\": \"2.0\",\n\t\"method\": \"licensingFeatureGetHostId\",\n\t\"params\": {\n\t\t\"query\": {\n\t\t\t\"sessionId\": \"{{sessionId}}\"\n\t\t}\n\t}\n}",
									"raw_para": [],
									"raw_schema": {
										"type": "object",
										"properties": {
											"id": {
												"type": "integer"
											},
											"jsonrpc": {
												"type": "string",
												"mock": {
													"mock": "2.0"
												}
											},
											"method": {
												"type": "string",
												"mock": {
													"mock": "licensingFeatureGetHostId"
												}
											},
											"params": {
												"type": "object",
												"properties": {
													"query": {
														"type": "object",
														"properties": {
															"sessionId": {
																"type": "string",
																"mock": {
																	"mock": "{{sessionId}}"
																}
															}
														},
														"APIPOST_ORDERS": [
															"sessionId"
														],
														"required": [
															"sessionId"
														]
													}
												},
												"APIPOST_ORDERS": [
													"query"
												],
												"required": [
													"query"
												]
											}
										},
										"APIPOST_ORDERS": [
											"id",
											"jsonrpc",
											"method",
											"params"
										],
										"required": [
											"id",
											"jsonrpc",
											"method",
											"params"
										]
									}
								},
								"header": {
									"parameter": [
										{
											"is_checked": "1",
											"type": "Text",
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"not_null": "-1",
											"description": "",
											"field_type": "Text"
										}
									]
								},
								"query": {
									"parameter": [
										{
											"is_checked": "1",
											"type": "Text",
											"key": "sessionId",
											"value": "{{sessionId}}",
											"not_null": "-1",
											"description": "",
											"field_type": "Text"
										}
									]
								}
							},
							"response": {
								"success": {
									"raw": "{\r\n    \"id\": 275,\r\n    \"jsonrpc\": \"2.0\",\r\n    \"result\": {\r\n        \"response\": {\r\n            \"hostId\": \"3-6137741-76e39bb5fe5e702b73b431ad5bad82ae84e48d6868cfcc774430fa59ac3397ca\",\r\n            \"responseCode\": 0\r\n        }\r\n    }\r\n}",
									"parameter": [],
									"expect": {
										"name": "OK",
										"isDefault": 1,
										"code": 200,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object",
											"properties": {
												"id": {
													"type": "integer"
												},
												"jsonrpc": {
													"type": "string"
												},
												"result": {
													"type": "object",
													"properties": {
														"response": {
															"type": "object",
															"properties": {
																"hostId": {
																	"type": "string"
																},
																"responseCode": {
																	"type": "integer"
																}
															},
															"required": [
																"hostId",
																"responseCode"
															]
														}
													},
													"required": [
														"response"
													]
												}
											},
											"required": [
												"id",
												"jsonrpc",
												"result"
											]
										}
									}
								},
								"error": {
									"raw": "",
									"parameter": [],
									"expect": {
										"name": "失败",
										"isDefault": -1,
										"code": 404,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object"
										}
									}
								}
							},
							"children": []
						},
						{
							"target_type": "api",
							"name": "licensingFeatureGetTrustedPlatformModuleInformation",
							"mark": "complated",
							"sort": 1,
							"tags": [],
							"created_uuid": "",
							"method": "POST",
							"mock": "{}",
							"mock_url": "",
							"request": {
								"url": "",
								"description": "",
								"event": {
									"pre_script": "",
									"test": ""
								},
								"pre_tasks": [],
								"post_tasks": [],
								"body": {
									"mode": "json",
									"parameter": [],
									"raw": "{\n\t\"id\": 5333350615543935,\n\t\"jsonrpc\": \"2.0\",\n\t\"method\": \"licensingFeatureGetTrustedPlatformModuleInformation\",\n\t\"params\": {\n\t\t\"query\": {\n\t\t\t\"sessionId\": \"{{sessionId}}\"\n\t\t}\n\t}\n}",
									"raw_para": [],
									"raw_schema": {
										"type": "object",
										"properties": {
											"id": {
												"type": "integer"
											},
											"jsonrpc": {
												"type": "string",
												"mock": {
													"mock": "2.0"
												}
											},
											"method": {
												"type": "string",
												"mock": {
													"mock": "licensingFeatureGetTrustedPlatformModuleInformation"
												}
											},
											"params": {
												"type": "object",
												"properties": {
													"query": {
														"type": "object",
														"properties": {
															"sessionId": {
																"type": "string",
																"mock": {
																	"mock": "{{sessionId}}"
																}
															}
														},
														"APIPOST_ORDERS": [
															"sessionId"
														],
														"required": [
															"sessionId"
														]
													}
												},
												"APIPOST_ORDERS": [
													"query"
												],
												"required": [
													"query"
												]
											}
										},
										"APIPOST_ORDERS": [
											"id",
											"jsonrpc",
											"method",
											"params"
										],
										"required": [
											"id",
											"jsonrpc",
											"method",
											"params"
										]
									}
								},
								"header": {
									"parameter": [
										{
											"is_checked": "1",
											"type": "Text",
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"not_null": "-1",
											"description": "",
											"field_type": "Text"
										}
									]
								}
							},
							"response": {
								"success": {
									"raw": "{\n\t\"id\": 5333350615543935,\n\t\"jsonrpc\": \"2.0\",\n\t\"result\": {\n\t\t\"response\": {\n\t\t\t\"certificateAuthorityInformationAccess\": [],\n\t\t\t\"certificateAuthorityKeyIdentifier\": \"\",\n\t\t\t\"certificateIssuer\": \"/C=DE/O=Infineon Technologies AG/OU=OPTIGA(TM) TPM2.0/CN=Infineon OPTIGA(TM) RSA Manufacturing CA 035\",\n\t\t\t\"certificateSubject\": \"\",\n\t\t\t\"certificateSubjectAlternativeNames\": [\n\t\t\t\t\"id:49465800\"\n\t\t\t],\n\t\t\t\"hardwareInformation\": \"Manufacturer: IFX - Infineon (IFX), Vendor String: SLB9670, Type: , Firmware version: 0x0007003f 0x000d1900\",\n\t\t\t\"responseCode\": 0\n\t\t}\n\t}\n}",
									"parameter": [
										{
											"key": "id",
											"value": "5333350615543935",
											"description": "",
											"not_null": true,
											"field_type": "Integer",
											"type": "Text",
											"is_checked": 1
										},
										{
											"key": "jsonrpc",
											"value": "2.0",
											"description": "",
											"not_null": true,
											"field_type": "String",
											"type": "Text",
											"is_checked": 1
										},
										{
											"key": "result",
											"value": "",
											"description": "",
											"not_null": true,
											"field_type": "Object",
											"type": "Text",
											"is_checked": 1
										},
										{
											"key": "result.response",
											"value": "",
											"description": "",
											"not_null": true,
											"field_type": "Object",
											"type": "Text",
											"is_checked": 1
										},
										{
											"key": "result.response.certificateAuthorityInformationAccess",
											"value": "",
											"description": "",
											"not_null": 1,
											"field_type": "Array",
											"type": "Text",
											"is_checked": 1
										},
										{
											"key": "result.response.certificateAuthorityKeyIdentifier",
											"value": "",
											"description": "",
											"not_null": 1,
											"field_type": "String",
											"type": "Text",
											"is_checked": 1
										},
										{
											"key": "result.response.certificateIssuer",
											"value": "/C=DE/O=Infineon Technologies AG/OU=OPTIGA(TM) TPM2.0/CN=Infineon OPTIGA(TM) RSA Manufacturing CA 035",
											"description": "",
											"not_null": 1,
											"field_type": "String",
											"type": "Text",
											"is_checked": 1
										},
										{
											"key": "result.response.certificateSubject",
											"value": "",
											"description": "",
											"not_null": 1,
											"field_type": "String",
											"type": "Text",
											"is_checked": 1
										},
										{
											"key": "result.response.certificateSubjectAlternativeNames",
											"value": "id:49465800",
											"description": "",
											"not_null": 1,
											"field_type": "Array",
											"type": "Text",
											"is_checked": 1
										},
										{
											"key": "result.response.hardwareInformation",
											"value": "Manufacturer: IFX - Infineon (IFX), Vendor String: SLB9670, Type: , Firmware version: 0x0007003f 0x000d1900",
											"description": "",
											"not_null": 1,
											"field_type": "String",
											"type": "Text",
											"is_checked": 1
										},
										{
											"key": "result.response.responseCode",
											"value": "0",
											"description": "",
											"not_null": true,
											"field_type": "Integer",
											"type": "Text",
											"is_checked": 1
										}
									],
									"expect": {
										"name": "OK",
										"isDefault": 1,
										"code": 200,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object",
											"properties": {
												"id": {
													"type": "integer"
												},
												"jsonrpc": {
													"type": "string"
												},
												"result": {
													"type": "object",
													"properties": {
														"response": {
															"type": "object",
															"properties": {
																"responseCode": {
																	"type": "integer"
																},
																"sessionId": {
																	"type": "string"
																}
															},
															"required": [
																"responseCode",
																"sessionId"
															],
															"APIPOST_ORDERS": [
																"responseCode",
																"sessionId"
															]
														}
													},
													"required": [
														"response"
													],
													"APIPOST_ORDERS": [
														"response"
													]
												}
											},
											"required": [
												"id",
												"jsonrpc",
												"result"
											],
											"APIPOST_ORDERS": [
												"id",
												"jsonrpc",
												"result"
											]
										}
									}
								},
								"error": {
									"raw": "",
									"parameter": [],
									"expect": {
										"name": "失败",
										"isDefault": -1,
										"code": 404,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object"
										}
									}
								}
							},
							"children": []
						},
						{
							"target_type": "api",
							"name": "licensingFeatureSet",
							"mark": "developing",
							"sort": 1,
							"tags": [],
							"created_uuid": "",
							"method": "POST",
							"mock": "{}",
							"mock_url": "",
							"request": {
								"url": "",
								"description": "",
								"event": {
									"pre_script": "",
									"test": ""
								},
								"pre_tasks": [],
								"post_tasks": [],
								"body": {
									"mode": "json",
									"parameter": [],
									"raw": "{\n\t\"id\": -7977097955556563,\n\t\"jsonrpc\": \"2.0\",\n\t\"method\": \"licensingFeatureSet\",\n\t\"params\": {\n\t\t\"query\": {\n\t\t\t\"sessionId\": \"{{sessionId}}\",\n\t\t\t\"licenseKey\": {\n\t\t\t\t\"contentEncoding\": \"经表东日我变\",\n\t\t\t\t\"contentMediaType\": \"生称生场\",\n\t\t\t\t\"content\": \"大始战争省\"\n\t\t\t}\n\t\t}\n\t}\n}",
									"raw_para": [],
									"raw_schema": {
										"type": "object",
										"properties": {
											"id": {
												"type": "integer"
											},
											"jsonrpc": {
												"type": "string",
												"mock": {
													"mock": "2.0"
												}
											},
											"method": {
												"type": "string",
												"mock": {
													"mock": "licensingFeatureSet"
												}
											},
											"params": {
												"type": "object",
												"properties": {
													"query": {
														"type": "object",
														"properties": {
															"sessionId": {
																"type": "string",
																"mock": {
																	"mock": "{{sessionId}}"
																}
															},
															"licenseKey": {
																"type": "object",
																"properties": {
																	"contentEncoding": {
																		"type": "string"
																	},
																	"contentMediaType": {
																		"type": "string"
																	},
																	"content": {
																		"type": "string"
																	}
																},
																"APIPOST_ORDERS": [
																	"contentEncoding",
																	"contentMediaType",
																	"content"
																],
																"required": [
																	"contentEncoding",
																	"contentMediaType",
																	"content"
																]
															}
														},
														"APIPOST_ORDERS": [
															"sessionId",
															"licenseKey"
														],
														"required": [
															"sessionId",
															"licenseKey"
														]
													}
												},
												"APIPOST_ORDERS": [
													"query"
												],
												"required": [
													"query"
												]
											}
										},
										"APIPOST_ORDERS": [
											"id",
											"jsonrpc",
											"method",
											"params"
										],
										"required": [
											"id",
											"jsonrpc",
											"method",
											"params"
										]
									}
								},
								"header": {
									"parameter": [
										{
											"is_checked": "1",
											"type": "Text",
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"not_null": "-1",
											"description": "",
											"field_type": "Text"
										}
									]
								}
							},
							"response": {
								"success": {
									"raw": "{\n    \"id\": 326,\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"response\": {\n            \"responseCode\": 0\n        }\n    }\n}",
									"parameter": [],
									"expect": {
										"name": "OK",
										"isDefault": 1,
										"code": 200,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object",
											"properties": {
												"id": {
													"type": "integer"
												},
												"jsonrpc": {
													"type": "string"
												},
												"result": {
													"type": "object",
													"properties": {
														"response": {
															"type": "object",
															"properties": {
																"responseCode": {
																	"type": "integer"
																},
																"sessionId": {
																	"type": "string"
																}
															},
															"required": [
																"responseCode",
																"sessionId"
															],
															"APIPOST_ORDERS": [
																"responseCode",
																"sessionId"
															]
														}
													},
													"required": [
														"response"
													],
													"APIPOST_ORDERS": [
														"response"
													]
												}
											},
											"required": [
												"id",
												"jsonrpc",
												"result"
											],
											"APIPOST_ORDERS": [
												"id",
												"jsonrpc",
												"result"
											]
										}
									}
								},
								"error": {
									"raw": "",
									"parameter": [],
									"expect": {
										"name": "失败",
										"isDefault": -1,
										"code": 404,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object"
										}
									}
								}
							},
							"children": []
						},
						{
							"target_type": "api",
							"name": "licensingFeatureList",
							"mark": "complated",
							"sort": 1,
							"tags": [],
							"created_uuid": "",
							"method": "POST",
							"mock": "{}",
							"mock_url": "",
							"request": {
								"url": "",
								"description": "",
								"event": {
									"pre_script": "",
									"test": ""
								},
								"pre_tasks": [],
								"post_tasks": [],
								"body": {
									"mode": "json",
									"parameter": [],
									"raw": "{\n\t\"id\": -1786249181454532,\n\t\"jsonrpc\": \"2.0\",\n\t\"method\": \"licensingFeatureList\",\n\t\"params\": {\n\t\t\"query\": {\n\t\t\t\"sessionId\": \"{{sessionId}}\"\n\t\t}\n\t}\n}",
									"raw_para": [],
									"raw_schema": {
										"type": "object",
										"properties": {
											"id": {
												"type": "integer"
											},
											"jsonrpc": {
												"type": "string",
												"mock": {
													"mock": "2.0"
												}
											},
											"method": {
												"type": "string",
												"mock": {
													"mock": "licensingFeatureList"
												}
											},
											"params": {
												"type": "object",
												"properties": {
													"query": {
														"type": "object",
														"properties": {
															"sessionId": {
																"type": "string",
																"mock": {
																	"mock": "{{sessionId}}"
																}
															}
														},
														"APIPOST_ORDERS": [
															"sessionId"
														],
														"required": [
															"sessionId"
														]
													}
												},
												"APIPOST_ORDERS": [
													"query"
												],
												"required": [
													"query"
												]
											}
										},
										"APIPOST_ORDERS": [
											"id",
											"jsonrpc",
											"method",
											"params"
										],
										"required": [
											"id",
											"jsonrpc",
											"method",
											"params"
										]
									}
								},
								"header": {
									"parameter": [
										{
											"is_checked": "1",
											"type": "Text",
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"not_null": "-1",
											"description": "",
											"field_type": "Text"
										}
									]
								}
							},
							"response": {
								"success": {
									"raw": "{\n    \"id\": 326,\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"response\": {\n            \"responseCode\": 0\n        }\n    }\n}",
									"parameter": [],
									"expect": {
										"name": "OK",
										"isDefault": 1,
										"code": 200,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object",
											"properties": {
												"id": {
													"type": "integer"
												},
												"jsonrpc": {
													"type": "string"
												},
												"result": {
													"type": "object",
													"properties": {
														"response": {
															"type": "object",
															"properties": {
																"responseCode": {
																	"type": "integer"
																},
																"sessionId": {
																	"type": "string"
																}
															},
															"required": [
																"responseCode",
																"sessionId"
															],
															"APIPOST_ORDERS": [
																"responseCode",
																"sessionId"
															]
														}
													},
													"required": [
														"response"
													],
													"APIPOST_ORDERS": [
														"response"
													]
												}
											},
											"required": [
												"id",
												"jsonrpc",
												"result"
											],
											"APIPOST_ORDERS": [
												"id",
												"jsonrpc",
												"result"
											]
										}
									}
								},
								"error": {
									"raw": "",
									"parameter": [],
									"expect": {
										"name": "失败",
										"isDefault": -1,
										"code": 404,
										"contentType": "json",
										"verifyType": "schema",
										"mock": "",
										"schema": {
											"type": "object"
										}
									}
								}
							},
							"children": []
						}
					]
				}
			]
		}
	],
	"envs": [
		{
			"env_id": "-1",
			"list": {},
			"name": "默认环境",
			"pre_url": "",
			"pre_urls": {
				"default": ""
			}
		},
		{
			"env_id": "-2",
			"list": {},
			"name": "Mock环境",
			"pre_url": "https://console-mock.apipost.cn/mock/06d7d8b4-12cf-4b0c-ae4f-a2e3b3023e22/",
			"pre_urls": {
				"default": "https://console-mock.apipost.cn/mock/06d7d8b4-12cf-4b0c-ae4f-a2e3b3023e22/"
			}
		},
		{
			"env_id": "1ec490c1-87b3-446e-a889-29e392bebbfc",
			"list": {
				"sessionId": {
					"current_value": "60d854a6-9147-471c-af32-5f1ffae3360c",
					"type": "1",
					"value": "60d854a6-9147-471c-af32-5f1ffae3360c",
					"description": ""
				}
			},
			"name": "LoccalLocatorClient",
			"pre_url": "http://127.0.0.1:8080",
			"pre_urls": {
				"default": "http://127.0.0.1:8080"
			}
		},
		{
			"env_id": "35ef36f1-4163-46f6-9b24-3b34a259171c",
			"list": {
				"sessionId": {
					"value": "",
					"current_value": "",
					"description": ""
				}
			},
			"name": "ClientSupport",
			"pre_url": "http://192.168.8.78:8084",
			"pre_urls": {
				"default": "http://192.168.8.78:8084"
			}
		},
		{
			"env_id": "4d0735a7-a00d-40e0-a33d-338c326d9678",
			"list": {
				"sessionId": {
					"value": "",
					"current_value": "",
					"description": ""
				}
			},
			"name": "ServerSupport",
			"pre_url": "http://127.0.0.1:8086",
			"pre_urls": {
				"default": "http://127.0.0.1:8086"
			}
		},
		{
			"env_id": "95e0670c-1077-40f6-bc0f-b77719d61460",
			"list": {
				"sessionId": {
					"value": "",
					"current_value": "",
					"description": ""
				}
			},
			"name": "LocalLocatorServer",
			"pre_url": "http://127.0.0.1:8082",
			"pre_urls": {
				"default": "http://127.0.0.1:8082"
			}
		}
	],
	"models": []
}